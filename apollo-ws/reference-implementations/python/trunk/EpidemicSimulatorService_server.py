##################################################
# file: EpidemicSimulatorService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      /usr/bin/wsdl2py epidemicsimulator.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from EpidemicSimulatorService_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
getPreconfiguredModels = GED("http://service.apollo.pitt.edu/", "getPreconfiguredModels").pyclass

getPreconfiguredModelsResponse = GED("http://service.apollo.pitt.edu/", "getPreconfiguredModelsResponse").pyclass

getModelConfiguration = GED("http://service.apollo.pitt.edu/", "getModelConfiguration").pyclass

getModelConfigurationResponse = GED("http://service.apollo.pitt.edu/", "getModelConfigurationResponse").pyclass

run = GED("http://service.apollo.pitt.edu/", "run").pyclass

runResponse = GED("http://service.apollo.pitt.edu/", "runResponse").pyclass

releaseResources = GED("http://service.apollo.pitt.edu/", "releaseResources").pyclass

releaseResourcesResponse = GED("http://service.apollo.pitt.edu/", "releaseResourcesResponse").pyclass

getNativeConfigurationFile = GED("http://service.apollo.pitt.edu/", "getNativeConfigurationFile").pyclass

getNativeConfigurationFileResponse = GED("http://service.apollo.pitt.edu/", "getNativeConfigurationFileResponse").pyclass

getModelDescription = GED("http://service.apollo.pitt.edu/", "getModelDescription").pyclass

getModelDescriptionResponse = GED("http://service.apollo.pitt.edu/", "getModelDescriptionResponse").pyclass

getSimulatorDescription = GED("http://service.apollo.pitt.edu/", "getSimulatorDescription").pyclass

getSimulatorDescriptionResponse = GED("http://service.apollo.pitt.edu/", "getSimulatorDescriptionResponse").pyclass

getResult = GED("http://service.apollo.pitt.edu/", "getResult").pyclass

getResultResponse = GED("http://service.apollo.pitt.edu/", "getResultResponse").pyclass

getJobStatus = GED("http://service.apollo.pitt.edu/", "getJobStatus").pyclass

getJobStatusResponse = GED("http://service.apollo.pitt.edu/", "getJobStatusResponse").pyclass

runGzipBatch = GED("http://service.apollo.pitt.edu/", "runGzipBatch").pyclass

runGzipBatchResponse = GED("http://service.apollo.pitt.edu/", "runGzipBatchResponse").pyclass


# Service Skeletons
class EpidemicSimulatorService(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/GenericEpidemicModelService/services/EpidemicSimulatorPort', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_getPreconfiguredModels(self, ps, **kw):
        request = ps.Parse(getPreconfiguredModels.typecode)
        return request,getPreconfiguredModelsResponse()

    soapAction[''] = 'soap_getPreconfiguredModels'
    root[(getPreconfiguredModels.typecode.nspname,getPreconfiguredModels.typecode.pname)] = 'soap_getPreconfiguredModels'

    def soap_getModelConfiguration(self, ps, **kw):
        request = ps.Parse(getModelConfiguration.typecode)
        return request,getModelConfigurationResponse()

    soapAction[''] = 'soap_getModelConfiguration'
    root[(getModelConfiguration.typecode.nspname,getModelConfiguration.typecode.pname)] = 'soap_getModelConfiguration'

    def soap_run(self, ps, **kw):
        request = ps.Parse(run.typecode)
        return request,runResponse()

    soapAction[''] = 'soap_run'
    root[(run.typecode.nspname,run.typecode.pname)] = 'soap_run'

    def soap_releaseResources(self, ps, **kw):
        request = ps.Parse(releaseResources.typecode)
        return request,releaseResourcesResponse()

    soapAction[''] = 'soap_releaseResources'
    root[(releaseResources.typecode.nspname,releaseResources.typecode.pname)] = 'soap_releaseResources'

    def soap_getNativeConfigurationFile(self, ps, **kw):
        request = ps.Parse(getNativeConfigurationFile.typecode)
        return request,getNativeConfigurationFileResponse()

    soapAction[''] = 'soap_getNativeConfigurationFile'
    root[(getNativeConfigurationFile.typecode.nspname,getNativeConfigurationFile.typecode.pname)] = 'soap_getNativeConfigurationFile'

    def soap_getModelDescription(self, ps, **kw):
        request = ps.Parse(getModelDescription.typecode)
        return request,getModelDescriptionResponse()

    soapAction[''] = 'soap_getModelDescription'
    root[(getModelDescription.typecode.nspname,getModelDescription.typecode.pname)] = 'soap_getModelDescription'

    def soap_getSimulatorDescription(self, ps, **kw):
        request = ps.Parse(getSimulatorDescription.typecode)
        return request,getSimulatorDescriptionResponse()

    soapAction[''] = 'soap_getSimulatorDescription'
    root[(getSimulatorDescription.typecode.nspname,getSimulatorDescription.typecode.pname)] = 'soap_getSimulatorDescription'

    def soap_getResult(self, ps, **kw):
        request = ps.Parse(getResult.typecode)
        return request,getResultResponse()

    soapAction[''] = 'soap_getResult'
    root[(getResult.typecode.nspname,getResult.typecode.pname)] = 'soap_getResult'

    def soap_getJobStatus(self, ps, **kw):
        request = ps.Parse(getJobStatus.typecode)
        return request,getJobStatusResponse()

    soapAction[''] = 'soap_getJobStatus'
    root[(getJobStatus.typecode.nspname,getJobStatus.typecode.pname)] = 'soap_getJobStatus'

    def soap_runGzipBatch(self, ps, **kw):
        request = ps.Parse(runGzipBatch.typecode)
        return request,runGzipBatchResponse()

    soapAction[''] = 'soap_runGzipBatch'
    root[(runGzipBatch.typecode.nspname,runGzipBatch.typecode.pname)] = 'soap_runGzipBatch'

