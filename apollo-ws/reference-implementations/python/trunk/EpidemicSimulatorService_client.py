# Copyright 2012 University of Pittsburgh
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

##################################################
# file: EpidemicSimulatorService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     c:\programs\Python27\Scripts\wsdl2py-script.py epidemicsimulator.wsdl
# 
##################################################

from EpidemicSimulatorService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class EpidemicSimulatorServiceLocator:
    EpidemicSimulatorPort_address = "http://localhost:8080/GenericEpidemicModelService/services/EpidemicSimulatorPort"
    def getEpidemicSimulatorPortAddress(self):
        return EpidemicSimulatorServiceLocator.EpidemicSimulatorPort_address
    def getEpidemicSimulatorPort(self, url=None, **kw):
        return EpidemicSimulatorServiceSoapBindingSOAP(url or EpidemicSimulatorServiceLocator.EpidemicSimulatorPort_address, **kw)

# Methods
class EpidemicSimulatorServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getPreconfiguredModels
    def getPreconfiguredModels(self, request, **kw):
        if isinstance(request, getPreconfiguredModelsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getPreconfiguredModels", **kw)
        # no output wsaction
        response = self.binding.Receive(getPreconfiguredModelsResponse.typecode)
        return response

    # op: getModelConfiguration
    def getModelConfiguration(self, request, **kw):
        if isinstance(request, getModelConfigurationRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getModelConfiguration", **kw)
        # no output wsaction
        response = self.binding.Receive(getModelConfigurationResponse.typecode)
        return response

    # op: run
    def run(self, request, **kw):
        if isinstance(request, runRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/run", **kw)
        # no output wsaction
        response = self.binding.Receive(runResponse.typecode)
        return response

    # op: releaseResources
    def releaseResources(self, request, **kw):
        if isinstance(request, releaseResourcesRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/releaseResources", **kw)
        # no output wsaction
        response = self.binding.Receive(releaseResourcesResponse.typecode)
        return response

    # op: getNativeConfigurationFile
    def getNativeConfigurationFile(self, request, **kw):
        if isinstance(request, getNativeConfigurationFileRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getNativeConfigurationFile", **kw)
        # no output wsaction
        response = self.binding.Receive(getNativeConfigurationFileResponse.typecode)
        return response

    # op: getSimulatorDescription
    def getSimulatorDescription(self, request, **kw):
        if isinstance(request, getSimulatorDescriptionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getSimulatorDescription", **kw)
        # no output wsaction
        response = self.binding.Receive(getSimulatorDescriptionResponse.typecode)
        return response

    # op: getModelDescription
    def getModelDescription(self, request, **kw):
        if isinstance(request, getModelDescriptionRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getModelDescription", **kw)
        # no output wsaction
        response = self.binding.Receive(getModelDescriptionResponse.typecode)
        return response

    # op: getResult
    def getResult(self, request, **kw):
        if isinstance(request, getResultRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getResult", **kw)
        # no output wsaction
        response = self.binding.Receive(getResultResponse.typecode)
        return response

    # op: getRunStatus
    def getRunStatus(self, request, **kw):
        if isinstance(request, getRunStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/getRunStatus", **kw)
        # no output wsaction
        response = self.binding.Receive(getRunStatusResponse.typecode)
        return response

    # op: runBatch
    def runBatch(self, request, **kw):
        if isinstance(request, runBatchRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/epidemicsimulator/runBatch", **kw)
        # no output wsaction
        response = self.binding.Receive(runBatchResponse.typecode)
        return response

getPreconfiguredModelsRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getPreconfiguredModels").pyclass

getPreconfiguredModelsResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getPreconfiguredModelsResponse").pyclass

getModelConfigurationRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getModelConfiguration").pyclass

getModelConfigurationResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getModelConfigurationResponse").pyclass

runRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "run").pyclass

runResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "runResponse").pyclass

releaseResourcesRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "releaseResources").pyclass

releaseResourcesResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "releaseResourcesResponse").pyclass

getNativeConfigurationFileRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getNativeConfigurationFile").pyclass

getNativeConfigurationFileResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getNativeConfigurationFileResponse").pyclass

getSimulatorDescriptionRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getSimulatorDescription").pyclass

getSimulatorDescriptionResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getSimulatorDescriptionResponse").pyclass

getModelDescriptionRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getModelDescription").pyclass

getModelDescriptionResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getModelDescriptionResponse").pyclass

getResultRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getResult").pyclass

getResultResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getResultResponse").pyclass

getRunStatusRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getRunStatus").pyclass

getRunStatusResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "getRunStatusResponse").pyclass

runBatchRequest = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "runBatch").pyclass

runBatchResponse = GED("http://service.apollo.pitt.edu/epidemicsimulator/", "runBatchResponse").pyclass
