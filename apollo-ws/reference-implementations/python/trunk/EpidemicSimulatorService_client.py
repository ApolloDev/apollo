##################################################
# file: EpidemicSimulatorService_client.py
# 
# client stubs generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#     /usr/bin/wsdl2py epidemicsimulator.wsdl
# 
##################################################

from EpidemicSimulatorService_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
from ZSI.schema import GED, GTD
import ZSI

# Locator
class EpidemicSimulatorServiceLocator:
    EpidemicSimulatorPort_address = "http://localhost:8080/GenericEpidemicModelService/services/EpidemicSimulatorPort"
    def getEpidemicSimulatorPortAddress(self):
        return EpidemicSimulatorServiceLocator.EpidemicSimulatorPort_address
    def getEpidemicSimulatorPort(self, url=None, **kw):
        return EpidemicSimulatorServiceSoapBindingSOAP(url or EpidemicSimulatorServiceLocator.EpidemicSimulatorPort_address, **kw)

# Methods
class EpidemicSimulatorServiceSoapBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: getPreconfiguredModels
    def getPreconfiguredModels(self, request, **kw):
        if isinstance(request, getPreconfiguredModels) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getPreconfiguredModelsResponse.typecode)
        return response

    # op: getModelConfiguration
    def getModelConfiguration(self, request, **kw):
        if isinstance(request, getModelConfiguration) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getModelConfigurationResponse.typecode)
        return response

    # op: run
    def run(self, request, **kw):
        if isinstance(request, run) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(runResponse.typecode)
        return response

    # op: releaseResources
    def releaseResources(self, request, **kw):
        if isinstance(request, releaseResources) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(releaseResourcesResponse.typecode)
        return response

    # op: getNativeConfigurationFile
    def getNativeConfigurationFile(self, request, **kw):
        if isinstance(request, getNativeConfigurationFile) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getNativeConfigurationFileResponse.typecode)
        return response

    # op: getModelDescription
    def getModelDescription(self, request, **kw):
        if isinstance(request, getModelDescription) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getModelDescriptionResponse.typecode)
        return response

    # op: getSimulatorDescription
    def getSimulatorDescription(self, request, **kw):
        if isinstance(request, getSimulatorDescription) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getSimulatorDescriptionResponse.typecode)
        return response

    # op: getResult
    def getResult(self, request, **kw):
        if isinstance(request, getResult) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getResultResponse.typecode)
        return response

    # op: getJobStatus
    def getJobStatus(self, request, **kw):
        if isinstance(request, getJobStatus) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(getJobStatusResponse.typecode)
        return response

    # op: runGzipBatch
    def runGzipBatch(self, request, **kw):
        if isinstance(request, runGzipBatch) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="", **kw)
        # no output wsaction
        response = self.binding.Receive(runGzipBatchResponse.typecode)
        return response

getPreconfiguredModels = GED("http://service.apollo.pitt.edu/", "getPreconfiguredModels").pyclass

getPreconfiguredModelsResponse = GED("http://service.apollo.pitt.edu/", "getPreconfiguredModelsResponse").pyclass

getModelConfiguration = GED("http://service.apollo.pitt.edu/", "getModelConfiguration").pyclass

getModelConfigurationResponse = GED("http://service.apollo.pitt.edu/", "getModelConfigurationResponse").pyclass

run = GED("http://service.apollo.pitt.edu/", "run").pyclass

runResponse = GED("http://service.apollo.pitt.edu/", "runResponse").pyclass

releaseResources = GED("http://service.apollo.pitt.edu/", "releaseResources").pyclass

releaseResourcesResponse = GED("http://service.apollo.pitt.edu/", "releaseResourcesResponse").pyclass

getNativeConfigurationFile = GED("http://service.apollo.pitt.edu/", "getNativeConfigurationFile").pyclass

getNativeConfigurationFileResponse = GED("http://service.apollo.pitt.edu/", "getNativeConfigurationFileResponse").pyclass

getModelDescription = GED("http://service.apollo.pitt.edu/", "getModelDescription").pyclass

getModelDescriptionResponse = GED("http://service.apollo.pitt.edu/", "getModelDescriptionResponse").pyclass

getSimulatorDescription = GED("http://service.apollo.pitt.edu/", "getSimulatorDescription").pyclass

getSimulatorDescriptionResponse = GED("http://service.apollo.pitt.edu/", "getSimulatorDescriptionResponse").pyclass

getResult = GED("http://service.apollo.pitt.edu/", "getResult").pyclass

getResultResponse = GED("http://service.apollo.pitt.edu/", "getResultResponse").pyclass

getJobStatus = GED("http://service.apollo.pitt.edu/", "getJobStatus").pyclass

getJobStatusResponse = GED("http://service.apollo.pitt.edu/", "getJobStatusResponse").pyclass

runGzipBatch = GED("http://service.apollo.pitt.edu/", "runGzipBatch").pyclass

runGzipBatchResponse = GED("http://service.apollo.pitt.edu/", "runGzipBatchResponse").pyclass
