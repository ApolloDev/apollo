# Copyright 2012 University of Pittsburgh
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License.  You may obtain a copy of
# the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
# License for the specific language governing permissions and limitations under
# the License.

##################################################
# file: EpidemicSimulatorService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    c:\programs\Python27\Scripts\wsdl2py-script.py epidemicsimulator.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://service.apollo.pitt.edu/epidemicsimulator/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/epidemicsimulator/"

    class getPreconfiguredModels_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPreconfiguredModels"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getPreconfiguredModels_Dec.schema
            TClist = []
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getPreconfiguredModels")
            kw["aname"] = "_getPreconfiguredModels"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getPreconfiguredModels_Holder"
            self.pyclass = Holder

    class getPreconfiguredModelsResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getPreconfiguredModelsResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getPreconfiguredModelsResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modelNames", aname="_modelNames", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getPreconfiguredModelsResponse")
            kw["aname"] = "_getPreconfiguredModelsResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modelNames = []
                    return
            Holder.__name__ = "getPreconfiguredModelsResponse_Holder"
            self.pyclass = Holder

    class getModelConfiguration_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getModelConfiguration"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getModelConfiguration_Dec.schema
            TClist = [ZSI.TC.String(pname="modelName", aname="_modelName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getModelConfiguration")
            kw["aname"] = "_getModelConfiguration"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modelName = None
                    return
            Holder.__name__ = "getModelConfiguration_Holder"
            self.pyclass = Holder

    class getModelConfigurationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getModelConfigurationResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getModelConfigurationResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-input",lazy=False)(pname="epidemicModelInput", aname="_epidemicModelInput", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getModelConfigurationResponse")
            kw["aname"] = "_getModelConfigurationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._epidemicModelInput = None
                    return
            Holder.__name__ = "getModelConfigurationResponse_Holder"
            self.pyclass = Holder

    class run_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "run"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.run_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-input",lazy=False)(pname="epidemicModelinput", aname="_epidemicModelinput", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","run")
            kw["aname"] = "_run"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._epidemicModelinput = None
                    return
            Holder.__name__ = "run_Holder"
            self.pyclass = Holder

    class runResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.runResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","simulation_run_result",lazy=False)(pname="simulationRunResult", aname="_simulationRunResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","runResponse")
            kw["aname"] = "_runResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulationRunResult = None
                    return
            Holder.__name__ = "runResponse_Holder"
            self.pyclass = Holder

    class releaseResources_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "releaseResources"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.releaseResources_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","releaseResources")
            kw["aname"] = "_releaseResources"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "releaseResources_Holder"
            self.pyclass = Holder

    class releaseResourcesResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "releaseResourcesResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.releaseResourcesResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status",lazy=False)(pname="runStatus", aname="_runStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","releaseResourcesResponse")
            kw["aname"] = "_releaseResourcesResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runStatus = None
                    return
            Holder.__name__ = "releaseResourcesResponse_Holder"
            self.pyclass = Holder

    class getNativeConfigurationFile_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getNativeConfigurationFile"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getNativeConfigurationFile_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getNativeConfigurationFile")
            kw["aname"] = "_getNativeConfigurationFile"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getNativeConfigurationFile_Holder"
            self.pyclass = Holder

    class getNativeConfigurationFileResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getNativeConfigurationFileResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getNativeConfigurationFileResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="nativeConfigurationFileContents", aname="_nativeConfigurationFileContents", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getNativeConfigurationFileResponse")
            kw["aname"] = "_getNativeConfigurationFileResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nativeConfigurationFileContents = None
                    return
            Holder.__name__ = "getNativeConfigurationFileResponse_Holder"
            self.pyclass = Holder

    class getSimulatorDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSimulatorDescription"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getSimulatorDescription_Dec.schema
            TClist = []
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getSimulatorDescription")
            kw["aname"] = "_getSimulatorDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getSimulatorDescription_Holder"
            self.pyclass = Holder

    class getSimulatorDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getSimulatorDescriptionResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getSimulatorDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="simulatorDescription", aname="_simulatorDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getSimulatorDescriptionResponse")
            kw["aname"] = "_getSimulatorDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorDescription = None
                    return
            Holder.__name__ = "getSimulatorDescriptionResponse_Holder"
            self.pyclass = Holder

    class getModelDescription_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getModelDescription"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getModelDescription_Dec.schema
            TClist = [ZSI.TC.String(pname="modelName", aname="_modelName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getModelDescription")
            kw["aname"] = "_getModelDescription"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modelName = None
                    return
            Holder.__name__ = "getModelDescription_Holder"
            self.pyclass = Holder

    class getModelDescriptionResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getModelDescriptionResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getModelDescriptionResponse_Dec.schema
            TClist = [ZSI.TC.String(pname="modelDescription", aname="_modelDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getModelDescriptionResponse")
            kw["aname"] = "_getModelDescriptionResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._modelDescription = None
                    return
            Holder.__name__ = "getModelDescriptionResponse_Holder"
            self.pyclass = Holder

    class getResult_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResult"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getResult_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getResult")
            kw["aname"] = "_getResult"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getResult_Holder"
            self.pyclass = Holder

    class getResultResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getResultResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getResultResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-output",lazy=False)(pname="epidemicModelOutput", aname="_epidemicModelOutput", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getResultResponse")
            kw["aname"] = "_getResultResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._epidemicModelOutput = None
                    return
            Holder.__name__ = "getResultResponse_Holder"
            self.pyclass = Holder

    class getRunStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatus"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getRunStatus_Dec.schema
            TClist = [ZSI.TCnumbers.Ilong(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getRunStatus")
            kw["aname"] = "_getRunStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getRunStatus_Holder"
            self.pyclass = Holder

    class getRunStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatusResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.getRunStatusResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status",lazy=False)(pname="runStatus", aname="_runStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","getRunStatusResponse")
            kw["aname"] = "_getRunStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runStatus = None
                    return
            Holder.__name__ = "getRunStatusResponse_Holder"
            self.pyclass = Holder

    class runBatch_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runBatch"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.runBatch_Dec.schema
            TClist = [ZSI.TC.URI(pname="batchFileLocation", aname="_batchFileLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","runBatch")
            kw["aname"] = "_runBatch"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._batchFileLocation = None
                    return
            Holder.__name__ = "runBatch_Holder"
            self.pyclass = Holder

    class runBatchResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runBatchResponse"
        schema = "http://service.apollo.pitt.edu/epidemicsimulator/"
        def __init__(self, **kw):
            ns = ns0.runBatchResponse_Dec.schema
            TClist = [ZSI.TC.URI(pname="resultFileLocation", aname="_resultFileLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/epidemicsimulator/","runBatchResponse")
            kw["aname"] = "_runBatchResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._resultFileLocation = None
                    return
            Holder.__name__ = "runBatchResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/epidemicsimulator/)

##############################
# targetNamespace
# http://types.apollo.pitt.edu/
##############################

class ns1:
    targetNamespace = "http://types.apollo.pitt.edu/"

    class authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.authentication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requester_id"), aname="_requester_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requester_password"), aname="_requester_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requester_id = None
                    self._requester_password = None
                    return
            Holder.__name__ = "authentication_Holder"
            self.pyclass = Holder

    class probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class probability_array_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "probability_array")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.probability_array_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = []
                    return
            Holder.__name__ = "probability_array_Holder"
            self.pyclass = Holder

    class positiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "positiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class compartment_name_enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "compartment_name_enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class time_step_unit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "time_step_unit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class run_status_enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "run_status_enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class run_status_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "run_status")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.run_status_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status_enum",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "run_status_Holder"
            self.pyclass = Holder

    class control_measure_time_series_output_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "control_measure_time_series_output")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.control_measure_time_series_output_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"received_vaccination_time_series"), aname="_received_vaccination_time_series", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"received_antiviral_treatment_time_series"), aname="_received_antiviral_treatment_time_series", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._received_vaccination_time_series = []
                    self._received_antiviral_treatment_time_series = []
                    return
            Holder.__name__ = "control_measure_time_series_output_Holder"
            self.pyclass = Holder

    class population_time_series_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "population_time_series")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.population_time_series_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"simulated_population"), aname="_simulated_population", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulated_population = []
                    self._pop_count = []
                    return
            Holder.__name__ = "population_time_series_Holder"
            self.pyclass = Holder

    class disease_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "disease")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.disease_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"infectious_period"), aname="_infectious_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"latent_period"), aname="_latent_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"reproduction_number"), aname="_reproduction_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"asymptomatic_infection_fraction"), aname="_asymptomatic_infection_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"simulated_population"), aname="_simulated_population", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectious_period = None
                    self._latent_period = None
                    self._reproduction_number = None
                    self._asymptomatic_infection_fraction = None
                    self._simulated_population = []
                    self._pop_count = []
                    return
            Holder.__name__ = "disease_Holder"
            self.pyclass = Holder

    class antiviral_control_measure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "antiviral-control-measure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.antiviral_control_measure_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"antiviral_cm_compliance"), aname="_antiviral_cm_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"antiviral_supply_schedule"), aname="_antiviral_supply_schedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"antiviral_admin_schedule"), aname="_antiviral_admin_schedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"antiviral_efficacy"), aname="_antiviral_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"antiviral_efficacy_delay"), aname="_antiviral_efficacy_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._antiviral_cm_compliance = None
                    self._antiviral_supply_schedule = []
                    self._antiviral_admin_schedule = []
                    self._antiviral_efficacy = None
                    self._antiviral_efficacy_delay = None
                    return
            Holder.__name__ = "antiviral-control-measure_Holder"
            self.pyclass = Holder

    class vaccination_control_measure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "vaccination-control-measure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.vaccination_control_measure_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"vaccine_cm_compliance"), aname="_vaccine_cm_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"vaccine_supply_schedule"), aname="_vaccine_supply_schedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"vaccination_admin_schedule"), aname="_vaccination_admin_schedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","probability",lazy=False)(pname=(ns,"vaccine_efficacy"), aname="_vaccine_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"vaccine_efficacy_delay"), aname="_vaccine_efficacy_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vaccine_cm_compliance = None
                    self._vaccine_supply_schedule = []
                    self._vaccination_admin_schedule = []
                    self._vaccine_efficacy = None
                    self._vaccine_efficacy_delay = None
                    return
            Holder.__name__ = "vaccination-control-measure_Holder"
            self.pyclass = Holder

    class simulator_configuration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulator-configuration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.simulator_configuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","time_step_unit",lazy=False)(pname=(ns,"time_step_unit"), aname="_time_step_unit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), self.__class__.time_step_value_Dec(minOccurs=1, maxOccurs=1, nillable=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"run_length"), aname="_run_length", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","positiveDouble",lazy=False)(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disease"), aname="_disease", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"population_location"), aname="_population_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._time_step_unit = None
                    self._time_step_value = None
                    self._run_length = None
                    self._pop_count = None
                    self._disease = None
                    self._population_location = None
                    return
            Holder.__name__ = "simulator-configuration_Holder"
            self.pyclass = Holder


        class time_step_value_Dec(ZSI.TCnumbers.FPdouble, LocalElementDeclaration):
            literal = "time_step_value"
            schema = "http://types.apollo.pitt.edu/"
            def __init__(self, **kw):
                kw["pname"] = ("http://types.apollo.pitt.edu/","time_step_value")
                kw["aname"] = "_time_step_value"
                ZSI.TCnumbers.FPdouble.__init__(self, **kw)
                class IHolder(float): typecode=self
                self.pyclass = IHolder
                IHolder.__name__ = "_time_step_value_immutable_holder"




    class simulator_identification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulator-identification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.simulator_identification_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"simulator_developer"), aname="_simulator_developer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"simulator_name"), aname="_simulator_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"simulator_version"), aname="_simulator_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulator_developer = None
                    self._simulator_name = None
                    self._simulator_version = None
                    return
            Holder.__name__ = "simulator-identification_Holder"
            self.pyclass = Holder

    class epidemic_model_input_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "epidemic-model-input")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.epidemic_model_input_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","simulator-configuration",lazy=False)(pname=(ns,"simulator_configuration"), aname="_simulator_configuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","simulator-identification",lazy=False)(pname=(ns,"simulator_identification"), aname="_simulator_identification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","vaccination-control-measure",lazy=False)(pname=(ns,"vaccination_control_measure"), aname="_vaccination_control_measure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","disease",lazy=False)(pname=(ns,"disease_dynamics"), aname="_disease_dynamics", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","antiviral-control-measure",lazy=False)(pname=(ns,"antiviral_control_measure"), aname="_antiviral_control_measure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","authentication",lazy=False)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulator_configuration = None
                    self._simulator_identification = None
                    self._vaccination_control_measure = None
                    self._disease_dynamics = None
                    self._antiviral_control_measure = None
                    self._authentication = None
                    return
            Holder.__name__ = "epidemic-model-input_Holder"
            self.pyclass = Holder

    class epidemic_model_output_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "epidemic-model-output")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.epidemic_model_output_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","population_time_series",lazy=False)(pname=(ns,"population_time_series"), aname="_population_time_series", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","control_measure_time_series_output",lazy=False)(pname=(ns,"control_measure_time_series"), aname="_control_measure_time_series", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._population_time_series = None
                    self._control_measure_time_series = None
                    return
            Holder.__name__ = "epidemic-model-output_Holder"
            self.pyclass = Holder

    class simulation_run_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulation_run_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.simulation_run_result_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-output",lazy=False)(pname=(ns,"model_output"), aname="_model_output", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Ilong(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._model_output = None
                    self._runId = None
                    return
            Holder.__name__ = "simulation_run_result_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://types.apollo.pitt.edu/)
