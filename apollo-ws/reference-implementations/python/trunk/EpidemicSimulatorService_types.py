##################################################
# file: EpidemicSimulatorService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/bin/wsdl2py epidemicsimulator.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://types.apollo.pitt.edu/
##############################

class ns0:
    targetNamespace = "http://types.apollo.pitt.edu/"

    class epidemic_model_input_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "epidemic-model-input")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.epidemic_model_input_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","simulator-configuration",lazy=False)(pname=(ns,"simulator_configuration"), aname="_simulator_configuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","simulator-identification",lazy=False)(pname=(ns,"simulator_identification"), aname="_simulator_identification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","vaccination-control-measure",lazy=False)(pname=(ns,"vaccination_control_measure"), aname="_vaccination_control_measure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","disease",lazy=False)(pname=(ns,"disease_dynamics"), aname="_disease_dynamics", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","antiviral-control-measure",lazy=False)(pname=(ns,"antiviral_control_measure"), aname="_antiviral_control_measure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","authentication",lazy=False)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulator_configuration = None
                    self._simulator_identification = None
                    self._vaccination_control_measure = None
                    self._disease_dynamics = None
                    self._antiviral_control_measure = None
                    self._authentication = None
                    return
            Holder.__name__ = "epidemic-model-input_Holder"
            self.pyclass = Holder

    class simulator_configuration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulator-configuration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.simulator_configuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","time_step_unit",lazy=False)(pname=(ns,"time_step_unit"), aname="_time_step_unit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"time_step_value"), aname="_time_step_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"run_length"), aname="_run_length", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"disease"), aname="_disease", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"population_location"), aname="_population_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._time_step_unit = None
                    self._time_step_value = None
                    self._run_length = None
                    self._pop_count = None
                    self._disease = None
                    self._population_location = None
                    return
            Holder.__name__ = "simulator-configuration_Holder"
            self.pyclass = Holder

    class simulator_identification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulator-identification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.simulator_identification_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"simulator_developer"), aname="_simulator_developer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"simulator_name"), aname="_simulator_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"simulator_version"), aname="_simulator_version", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulator_developer = None
                    self._simulator_name = None
                    self._simulator_version = None
                    return
            Holder.__name__ = "simulator-identification_Holder"
            self.pyclass = Holder

    class vaccination_control_measure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "vaccination-control-measure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.vaccination_control_measure_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"vaccine_cm_compliance"), aname="_vaccine_cm_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"vaccine_supply_schedule"), aname="_vaccine_supply_schedule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"vaccination_admin_schedule"), aname="_vaccination_admin_schedule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"vaccine_efficacy"), aname="_vaccine_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"vaccine_efficacy_delay"), aname="_vaccine_efficacy_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vaccine_cm_compliance = None
                    self._vaccine_supply_schedule = []
                    self._vaccination_admin_schedule = []
                    self._vaccine_efficacy = None
                    self._vaccine_efficacy_delay = None
                    return
            Holder.__name__ = "vaccination-control-measure_Holder"
            self.pyclass = Holder

    class disease_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "disease")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.disease_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"infectious_period"), aname="_infectious_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"latent_period"), aname="_latent_period", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"reproduction_number"), aname="_reproduction_number", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"asymptomatic_infection_fraction"), aname="_asymptomatic_infection_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"population"), aname="_population", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectious_period = None
                    self._latent_period = None
                    self._reproduction_number = None
                    self._asymptomatic_infection_fraction = None
                    self._population = []
                    self._pop_count = []
                    return
            Holder.__name__ = "disease_Holder"
            self.pyclass = Holder

    class antiviral_control_measure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "antiviral-control-measure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.antiviral_control_measure_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"antiviral_cm_compliance"), aname="_antiviral_cm_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"antiviral_supply_schedule"), aname="_antiviral_supply_schedule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"antiviral_admin_schedule"), aname="_antiviral_admin_schedule", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"antiviral_efficacy"), aname="_antiviral_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"antiviral_efficacy_delay"), aname="_antiviral_efficacy_delay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._antiviral_cm_compliance = None
                    self._antiviral_supply_schedule = []
                    self._antiviral_admin_schedule = []
                    self._antiviral_efficacy = None
                    self._antiviral_efficacy_delay = None
                    return
            Holder.__name__ = "antiviral-control-measure_Holder"
            self.pyclass = Holder

    class authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.authentication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"requester_id"), aname="_requester_id", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requester_password"), aname="_requester_password", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requester_id = None
                    self._requester_password = None
                    return
            Holder.__name__ = "authentication_Holder"
            self.pyclass = Holder

    class epidemic_model_output_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "epidemic-model-output")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.epidemic_model_output_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","population_time_series",lazy=False)(pname=(ns,"population_time_series"), aname="_population_time_series", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","control_measure_time_series_output",lazy=False)(pname=(ns,"control_measure_time_series"), aname="_control_measure_time_series", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._population_time_series = None
                    self._control_measure_time_series = None
                    return
            Holder.__name__ = "epidemic-model-output_Holder"
            self.pyclass = Holder

    class population_time_series_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "population_time_series")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.population_time_series_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"population"), aname="_population", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"pop_count"), aname="_pop_count", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._population = []
                    self._pop_count = []
                    return
            Holder.__name__ = "population_time_series_Holder"
            self.pyclass = Holder

    class control_measure_time_series_output_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "control_measure_time_series_output")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.control_measure_time_series_output_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"received_vaccination"), aname="_received_vaccination", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"received_antiviral_treatment"), aname="_received_antiviral_treatment", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._received_vaccination = []
                    self._received_antiviral_treatment = []
                    return
            Holder.__name__ = "control_measure_time_series_output_Holder"
            self.pyclass = Holder

    class run_status_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "run_status")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.run_status_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status_enum",lazy=False)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "run_status_Holder"
            self.pyclass = Holder

    class probability_array_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "probability_array")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.probability_array_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = []
                    return
            Holder.__name__ = "probability_array_Holder"
            self.pyclass = Holder

    class simulation_run_result_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "simulation_run_result")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns0.simulation_run_result_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-output",lazy=False)(pname=(ns,"model_output"), aname="_model_output", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"run_id"), aname="_run_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._model_output = None
                    self._run_id = None
                    return
            Holder.__name__ = "simulation_run_result_Holder"
            self.pyclass = Holder

    class time_step_unit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "time_step_unit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class run_status_enum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "run_status_enum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

# end class ns0 (tns: http://types.apollo.pitt.edu/)

##############################
# targetNamespace
# http://service.apollo.pitt.edu/
##############################

class ns1:
    targetNamespace = "http://service.apollo.pitt.edu/"

    class getPreconfiguredModels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getPreconfiguredModels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getPreconfiguredModels_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getPreconfiguredModels_Holder"
            self.pyclass = Holder

    class getPreconfiguredModelsResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getPreconfiguredModelsResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getPreconfiguredModelsResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = []
                    return
            Holder.__name__ = "getPreconfiguredModelsResponse_Holder"
            self.pyclass = Holder

    class getModelConfiguration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getModelConfiguration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getModelConfiguration_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getModelConfiguration_Holder"
            self.pyclass = Holder

    class getModelConfigurationResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getModelConfigurationResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getModelConfigurationResponse_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-input",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getModelConfigurationResponse_Holder"
            self.pyclass = Holder

    class run_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "run")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.run_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-input",lazy=False)(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "run_Holder"
            self.pyclass = Holder

    class runResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "runResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.runResponse_Def.schema
            TClist = [GTD("http://service.apollo.pitt.edu/","runResult",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "runResponse_Holder"
            self.pyclass = Holder

    class runResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "runResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.runResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-output",lazy=False)(pname="output", aname="_output", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._output = None
                    self._runId = None
                    return
            Holder.__name__ = "runResult_Holder"
            self.pyclass = Holder

    class releaseResources_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "releaseResources")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.releaseResources_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "releaseResources_Holder"
            self.pyclass = Holder

    class releaseResourcesResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "releaseResourcesResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.releaseResourcesResponse_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status_enum",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "releaseResourcesResponse_Holder"
            self.pyclass = Holder

    class getNativeConfigurationFile_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getNativeConfigurationFile")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getNativeConfigurationFile_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getNativeConfigurationFile_Holder"
            self.pyclass = Holder

    class getNativeConfigurationFileResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getNativeConfigurationFileResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getNativeConfigurationFileResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getNativeConfigurationFileResponse_Holder"
            self.pyclass = Holder

    class getSimulatorDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getSimulatorDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getSimulatorDescription_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "getSimulatorDescription_Holder"
            self.pyclass = Holder

    class getSimulatorDescriptionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getSimulatorDescriptionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getSimulatorDescriptionResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getSimulatorDescriptionResponse_Holder"
            self.pyclass = Holder

    class getModelDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getModelDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getModelDescription_Def.schema
            TClist = [ZSI.TC.String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getModelDescription_Holder"
            self.pyclass = Holder

    class getModelDescriptionResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getModelDescriptionResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getModelDescriptionResponse_Def.schema
            TClist = [ZSI.TC.String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getModelDescriptionResponse_Holder"
            self.pyclass = Holder

    class getResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getResult_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getResult_Holder"
            self.pyclass = Holder

    class getResultResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getResultResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getResultResponse_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","epidemic-model-output",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getResultResponse_Holder"
            self.pyclass = Holder

    class runGzipBatch_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "runGzipBatch")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.runGzipBatch_Def.schema
            TClist = [ZSI.TC.Base64String(pname="arg0", aname="_arg0", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "runGzipBatch_Holder"
            self.pyclass = Holder

    class runGzipBatchResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "runGzipBatchResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.runGzipBatchResponse_Def.schema
            TClist = [ZSI.TC.Base64String(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "runGzipBatchResponse_Holder"
            self.pyclass = Holder

    class getJobStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getJobStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getJobStatus_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname="arg0", aname="_arg0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._arg0 = None
                    return
            Holder.__name__ = "getJobStatus_Holder"
            self.pyclass = Holder

    class getJobStatusResponse_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://service.apollo.pitt.edu/"
        type = (schema, "getJobStatusResponse")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.getJobStatusResponse_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","run_status_enum",lazy=False)(pname="return", aname="_return", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._return = None
                    return
            Holder.__name__ = "getJobStatusResponse_Holder"
            self.pyclass = Holder

    class getJobStatus_Dec(ElementDeclaration):
        literal = "getJobStatus"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getJobStatus")
            kw["aname"] = "_getJobStatus"
            if ns1.getJobStatus_Def not in ns1.getJobStatus_Dec.__bases__:
                bases = list(ns1.getJobStatus_Dec.__bases__)
                bases.insert(0, ns1.getJobStatus_Def)
                ns1.getJobStatus_Dec.__bases__ = tuple(bases)

            ns1.getJobStatus_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getJobStatus_Dec_Holder"

    class getJobStatusResponse_Dec(ElementDeclaration):
        literal = "getJobStatusResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getJobStatusResponse")
            kw["aname"] = "_getJobStatusResponse"
            if ns1.getJobStatusResponse_Def not in ns1.getJobStatusResponse_Dec.__bases__:
                bases = list(ns1.getJobStatusResponse_Dec.__bases__)
                bases.insert(0, ns1.getJobStatusResponse_Def)
                ns1.getJobStatusResponse_Dec.__bases__ = tuple(bases)

            ns1.getJobStatusResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getJobStatusResponse_Dec_Holder"

    class getModelConfiguration_Dec(ElementDeclaration):
        literal = "getModelConfiguration"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getModelConfiguration")
            kw["aname"] = "_getModelConfiguration"
            if ns1.getModelConfiguration_Def not in ns1.getModelConfiguration_Dec.__bases__:
                bases = list(ns1.getModelConfiguration_Dec.__bases__)
                bases.insert(0, ns1.getModelConfiguration_Def)
                ns1.getModelConfiguration_Dec.__bases__ = tuple(bases)

            ns1.getModelConfiguration_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getModelConfiguration_Dec_Holder"

    class getModelConfigurationResponse_Dec(ElementDeclaration):
        literal = "getModelConfigurationResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getModelConfigurationResponse")
            kw["aname"] = "_getModelConfigurationResponse"
            if ns1.getModelConfigurationResponse_Def not in ns1.getModelConfigurationResponse_Dec.__bases__:
                bases = list(ns1.getModelConfigurationResponse_Dec.__bases__)
                bases.insert(0, ns1.getModelConfigurationResponse_Def)
                ns1.getModelConfigurationResponse_Dec.__bases__ = tuple(bases)

            ns1.getModelConfigurationResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getModelConfigurationResponse_Dec_Holder"

    class getModelDescription_Dec(ElementDeclaration):
        literal = "getModelDescription"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getModelDescription")
            kw["aname"] = "_getModelDescription"
            if ns1.getModelDescription_Def not in ns1.getModelDescription_Dec.__bases__:
                bases = list(ns1.getModelDescription_Dec.__bases__)
                bases.insert(0, ns1.getModelDescription_Def)
                ns1.getModelDescription_Dec.__bases__ = tuple(bases)

            ns1.getModelDescription_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getModelDescription_Dec_Holder"

    class getModelDescriptionResponse_Dec(ElementDeclaration):
        literal = "getModelDescriptionResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getModelDescriptionResponse")
            kw["aname"] = "_getModelDescriptionResponse"
            if ns1.getModelDescriptionResponse_Def not in ns1.getModelDescriptionResponse_Dec.__bases__:
                bases = list(ns1.getModelDescriptionResponse_Dec.__bases__)
                bases.insert(0, ns1.getModelDescriptionResponse_Def)
                ns1.getModelDescriptionResponse_Dec.__bases__ = tuple(bases)

            ns1.getModelDescriptionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getModelDescriptionResponse_Dec_Holder"

    class getNativeConfigurationFile_Dec(ElementDeclaration):
        literal = "getNativeConfigurationFile"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getNativeConfigurationFile")
            kw["aname"] = "_getNativeConfigurationFile"
            if ns1.getNativeConfigurationFile_Def not in ns1.getNativeConfigurationFile_Dec.__bases__:
                bases = list(ns1.getNativeConfigurationFile_Dec.__bases__)
                bases.insert(0, ns1.getNativeConfigurationFile_Def)
                ns1.getNativeConfigurationFile_Dec.__bases__ = tuple(bases)

            ns1.getNativeConfigurationFile_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNativeConfigurationFile_Dec_Holder"

    class getNativeConfigurationFileResponse_Dec(ElementDeclaration):
        literal = "getNativeConfigurationFileResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getNativeConfigurationFileResponse")
            kw["aname"] = "_getNativeConfigurationFileResponse"
            if ns1.getNativeConfigurationFileResponse_Def not in ns1.getNativeConfigurationFileResponse_Dec.__bases__:
                bases = list(ns1.getNativeConfigurationFileResponse_Dec.__bases__)
                bases.insert(0, ns1.getNativeConfigurationFileResponse_Def)
                ns1.getNativeConfigurationFileResponse_Dec.__bases__ = tuple(bases)

            ns1.getNativeConfigurationFileResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getNativeConfigurationFileResponse_Dec_Holder"

    class getPreconfiguredModels_Dec(ElementDeclaration):
        literal = "getPreconfiguredModels"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getPreconfiguredModels")
            kw["aname"] = "_getPreconfiguredModels"
            if ns1.getPreconfiguredModels_Def not in ns1.getPreconfiguredModels_Dec.__bases__:
                bases = list(ns1.getPreconfiguredModels_Dec.__bases__)
                bases.insert(0, ns1.getPreconfiguredModels_Def)
                ns1.getPreconfiguredModels_Dec.__bases__ = tuple(bases)

            ns1.getPreconfiguredModels_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPreconfiguredModels_Dec_Holder"

    class getPreconfiguredModelsResponse_Dec(ElementDeclaration):
        literal = "getPreconfiguredModelsResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getPreconfiguredModelsResponse")
            kw["aname"] = "_getPreconfiguredModelsResponse"
            if ns1.getPreconfiguredModelsResponse_Def not in ns1.getPreconfiguredModelsResponse_Dec.__bases__:
                bases = list(ns1.getPreconfiguredModelsResponse_Dec.__bases__)
                bases.insert(0, ns1.getPreconfiguredModelsResponse_Def)
                ns1.getPreconfiguredModelsResponse_Dec.__bases__ = tuple(bases)

            ns1.getPreconfiguredModelsResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getPreconfiguredModelsResponse_Dec_Holder"

    class getResult_Dec(ElementDeclaration):
        literal = "getResult"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getResult")
            kw["aname"] = "_getResult"
            if ns1.getResult_Def not in ns1.getResult_Dec.__bases__:
                bases = list(ns1.getResult_Dec.__bases__)
                bases.insert(0, ns1.getResult_Def)
                ns1.getResult_Dec.__bases__ = tuple(bases)

            ns1.getResult_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getResult_Dec_Holder"

    class getResultResponse_Dec(ElementDeclaration):
        literal = "getResultResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getResultResponse")
            kw["aname"] = "_getResultResponse"
            if ns1.getResultResponse_Def not in ns1.getResultResponse_Dec.__bases__:
                bases = list(ns1.getResultResponse_Dec.__bases__)
                bases.insert(0, ns1.getResultResponse_Def)
                ns1.getResultResponse_Dec.__bases__ = tuple(bases)

            ns1.getResultResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getResultResponse_Dec_Holder"

    class getSimulatorDescription_Dec(ElementDeclaration):
        literal = "getSimulatorDescription"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getSimulatorDescription")
            kw["aname"] = "_getSimulatorDescription"
            if ns1.getSimulatorDescription_Def not in ns1.getSimulatorDescription_Dec.__bases__:
                bases = list(ns1.getSimulatorDescription_Dec.__bases__)
                bases.insert(0, ns1.getSimulatorDescription_Def)
                ns1.getSimulatorDescription_Dec.__bases__ = tuple(bases)

            ns1.getSimulatorDescription_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSimulatorDescription_Dec_Holder"

    class getSimulatorDescriptionResponse_Dec(ElementDeclaration):
        literal = "getSimulatorDescriptionResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","getSimulatorDescriptionResponse")
            kw["aname"] = "_getSimulatorDescriptionResponse"
            if ns1.getSimulatorDescriptionResponse_Def not in ns1.getSimulatorDescriptionResponse_Dec.__bases__:
                bases = list(ns1.getSimulatorDescriptionResponse_Dec.__bases__)
                bases.insert(0, ns1.getSimulatorDescriptionResponse_Def)
                ns1.getSimulatorDescriptionResponse_Dec.__bases__ = tuple(bases)

            ns1.getSimulatorDescriptionResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "getSimulatorDescriptionResponse_Dec_Holder"

    class releaseResources_Dec(ElementDeclaration):
        literal = "releaseResources"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","releaseResources")
            kw["aname"] = "_releaseResources"
            if ns1.releaseResources_Def not in ns1.releaseResources_Dec.__bases__:
                bases = list(ns1.releaseResources_Dec.__bases__)
                bases.insert(0, ns1.releaseResources_Def)
                ns1.releaseResources_Dec.__bases__ = tuple(bases)

            ns1.releaseResources_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "releaseResources_Dec_Holder"

    class releaseResourcesResponse_Dec(ElementDeclaration):
        literal = "releaseResourcesResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","releaseResourcesResponse")
            kw["aname"] = "_releaseResourcesResponse"
            if ns1.releaseResourcesResponse_Def not in ns1.releaseResourcesResponse_Dec.__bases__:
                bases = list(ns1.releaseResourcesResponse_Dec.__bases__)
                bases.insert(0, ns1.releaseResourcesResponse_Def)
                ns1.releaseResourcesResponse_Dec.__bases__ = tuple(bases)

            ns1.releaseResourcesResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "releaseResourcesResponse_Dec_Holder"

    class run_Dec(ElementDeclaration):
        literal = "run"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","run")
            kw["aname"] = "_run"
            if ns1.run_Def not in ns1.run_Dec.__bases__:
                bases = list(ns1.run_Dec.__bases__)
                bases.insert(0, ns1.run_Def)
                ns1.run_Dec.__bases__ = tuple(bases)

            ns1.run_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "run_Dec_Holder"

    class runGzipBatch_Dec(ElementDeclaration):
        literal = "runGzipBatch"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","runGzipBatch")
            kw["aname"] = "_runGzipBatch"
            if ns1.runGzipBatch_Def not in ns1.runGzipBatch_Dec.__bases__:
                bases = list(ns1.runGzipBatch_Dec.__bases__)
                bases.insert(0, ns1.runGzipBatch_Def)
                ns1.runGzipBatch_Dec.__bases__ = tuple(bases)

            ns1.runGzipBatch_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "runGzipBatch_Dec_Holder"

    class runGzipBatchResponse_Dec(ElementDeclaration):
        literal = "runGzipBatchResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","runGzipBatchResponse")
            kw["aname"] = "_runGzipBatchResponse"
            if ns1.runGzipBatchResponse_Def not in ns1.runGzipBatchResponse_Dec.__bases__:
                bases = list(ns1.runGzipBatchResponse_Dec.__bases__)
                bases.insert(0, ns1.runGzipBatchResponse_Def)
                ns1.runGzipBatchResponse_Dec.__bases__ = tuple(bases)

            ns1.runGzipBatchResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "runGzipBatchResponse_Dec_Holder"

    class runResponse_Dec(ElementDeclaration):
        literal = "runResponse"
        schema = "http://service.apollo.pitt.edu/"
        substitutionGroup = None
        def __init__(self, **kw):
            kw["pname"] = ("http://service.apollo.pitt.edu/","runResponse")
            kw["aname"] = "_runResponse"
            if ns1.runResponse_Def not in ns1.runResponse_Dec.__bases__:
                bases = list(ns1.runResponse_Dec.__bases__)
                bases.insert(0, ns1.runResponse_Def)
                ns1.runResponse_Dec.__bases__ = tuple(bases)

            ns1.runResponse_Def.__init__(self, **kw)
            if self.pyclass is not None: self.pyclass.__name__ = "runResponse_Dec_Holder"

# end class ns1 (tns: http://service.apollo.pitt.edu/)
