################################################## 
# VisualizerService_v2_0_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://types.apollo.pitt.edu/v2_0/
##############################

class ns1:
    targetNamespace = "http://types.apollo.pitt.edu/v2_0/"

    class Probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Fraction_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Fraction")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class PositiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PositiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class NonNegativeDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "NonNegativeDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class SimulatorType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SimulatorType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TimeStepUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TimeStepUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "MethodCallStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "MethodCallStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MethodCallStatus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "MethodCallStatus_Holder"
            self.pyclass = Holder

    class Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Authentication_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterId"), aname="_requesterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterPassword"), aname="_requesterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterId = None
                    self._requesterPassword = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class VisualizationOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VisualizationOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisualizationOptions_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"outputFormat"), aname="_outputFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._location = None
                    self._outputFormat = None
                    return
            Holder.__name__ = "VisualizationOptions_Holder"
            self.pyclass = Holder

    class RunVisualizationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunVisualizationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunVisualizationMessage_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","SoftwareIdentification",lazy=True)(pname=(ns,"visualizerIdentification"), aname="_visualizerIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VisualizationOptions",lazy=True)(pname=(ns,"visualizationOptions"), aname="_visualizationOptions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerIdentification = None
                    self._authentication = None
                    self._visualizationOptions = None
                    return
            Holder.__name__ = "RunVisualizationMessage_Holder"
            self.pyclass = Holder

    class RunIdentification_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunIdentification")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServiceRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ServiceRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceRecord_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "ServiceRecord_Holder"
            self.pyclass = Holder

    class ServiceRegistrationRecord_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ServiceRegistrationRecord")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ServiceRegistrationRecord_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ServiceRecord_Def not in ns1.ServiceRegistrationRecord_Def.__bases__:
                bases = list(ns1.ServiceRegistrationRecord_Def.__bases__)
                bases.insert(0, ns1.ServiceRecord_Def)
                ns1.ServiceRegistrationRecord_Def.__bases__ = tuple(bases)

            ns1.ServiceRecord_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SimulatorTimeSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SimulatorTimeSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorTimeSpecification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","TimeStepUnit",lazy=True)(pname=(ns,"timeStepUnit"), aname="_timeStepUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"timeStepValue"), aname="_timeStepValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"runLength"), aname="_runLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._timeStepUnit = None
                    self._timeStepValue = None
                    self._runLength = None
                    return
            Holder.__name__ = "SimulatorTimeSpecification_Holder"
            self.pyclass = Holder

    class IndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "IndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IndividualTreatmentControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Treatment",lazy=True)(pname=(ns,"individualTreatment"), aname="_individualTreatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"supplySchedule"), aname="_supplySchedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"administrationCapacity"), aname="_administrationCapacity", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ControlStrategyTargetPopulationsAndPrioritization",lazy=True)(pname=(ns,"targetPopulationsAndPrioritizations"), aname="_targetPopulationsAndPrioritizations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.IndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns1.IndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.IndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vaccination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Vaccination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Vaccination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Vaccine",lazy=True)(pname=(ns,"vaccine"), aname="_vaccine", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationEfficacy",lazy=True)(pname=(ns,"vaccinationEfficacies"), aname="_vaccinationEfficacies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Treatment_Def not in ns1.Vaccination_Def.__bases__:
                bases = list(ns1.Vaccination_Def.__bases__)
                bases.insert(0, ns1.Treatment_Def)
                ns1.Vaccination_Def.__bases__ = tuple(bases)

            ns1.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RingIndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RingIndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.RingIndividualTreatmentControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ringDiameterInMeters"), aname="_ringDiameterInMeters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.IndividualTreatmentControlStrategy_Def not in ns1.RingIndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns1.RingIndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns1.IndividualTreatmentControlStrategy_Def)
                ns1.RingIndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns1.IndividualTreatmentControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Infection_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Infection")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Infection_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonID"), aname="_pathogenTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"hostTaxonID"), aname="_hostTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"infectiousPeriodDuration"), aname="_infectiousPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"infectiousness"), aname="_infectiousness", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"latentPeriodDuration"), aname="_latentPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","InfectionAcquisition",lazy=True)(pname=(ns,"infectionAcquisition"), aname="_infectionAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Infection_Def.__bases__:
                bases = list(ns1.Infection_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Infection_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Contamination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Contamination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Contamination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonID"), aname="_pathogenTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"contaminatedPeriod"), aname="_contaminatedPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ContaminationAcquisition",lazy=True)(pname=(ns,"contaminationAcquisition"), aname="_contaminationAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Contamination_Def.__bases__:
                bases = list(ns1.Contamination_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Contamination_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationInfectionAndImmunityCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationInfectionAndImmunityCensus_Def.__bases__:
                bases = list(ns1.PopulationInfectionAndImmunityCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationInfectionAndImmunityCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationInfectionAndImmunityCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensusDataCell",lazy=True)(pname=(ns,"censusDataCells"), aname="_censusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__:
                bases = list(ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationTreatmentCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationTreatmentCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationTreatmentCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PopulationTreatmentCensusDataCell",lazy=True)(pname=(ns,"treatmentCensusDataCells"), aname="_treatmentCensusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.PopulationTreatmentCensusData_Def.__bases__:
                bases = list(ns1.PopulationTreatmentCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.PopulationTreatmentCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UrlOutputResource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "UrlOutputResource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UrlOutputResource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "UrlOutputResource_Holder"
            self.pyclass = Holder

    class ServiceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ServiceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "ServiceResult_Holder"
            self.pyclass = Holder

    class SoftwareIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SoftwareIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SoftwareIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"softwareDeveloper"), aname="_softwareDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareName"), aname="_softwareName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareVersion"), aname="_softwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloSoftwareType",lazy=True)(pname=(ns,"softwareType"), aname="_softwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareDeveloper = None
                    self._softwareName = None
                    self._softwareVersion = None
                    self._softwareType = None
                    return
            Holder.__name__ = "SoftwareIdentification_Holder"
            self.pyclass = Holder

    class ApolloLocationCode_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ApolloLocationCode")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequesterIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RequesterIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RequesterIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterName"), aname="_requesterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterCompany"), aname="_requesterCompany", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterEmail"), aname="_requesterEmail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterName = None
                    self._requesterCompany = None
                    self._requesterEmail = None
                    return
            Holder.__name__ = "RequesterIdentification_Holder"
            self.pyclass = Holder

    class Vaccine_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Vaccine")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Vaccine_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"vaccineIdentifier"), aname="_vaccineIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"valence"), aname="_valence", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccineIdentifier = None
                    self._valence = []
                    return
            Holder.__name__ = "Vaccine_Holder"
            self.pyclass = Holder

    class AgeGroupEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AgeGroupEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AgeGroupEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AgeRange",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"vaccineEfficacy"), aname="_vaccineEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._vaccineEfficacy = None
                    return
            Holder.__name__ = "AgeGroupEfficacy_Holder"
            self.pyclass = Holder

    class VaccineContraindications_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccineContraindications")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccineContraindications_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"infants"), aname="_infants", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"preschoolers"), aname="_preschoolers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"schoolAgeChildren"), aname="_schoolAgeChildren", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"youngAdults"), aname="_youngAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"olderAdults"), aname="_olderAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"elderly"), aname="_elderly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregnantAdultsRestricted"), aname="_pregnantAdultsRestricted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infants = None
                    self._preschoolers = None
                    self._schoolAgeChildren = None
                    self._youngAdults = None
                    self._olderAdults = None
                    self._elderly = None
                    self._pregnantAdultsRestricted = None
                    return
            Holder.__name__ = "VaccineContraindications_Holder"
            self.pyclass = Holder

    class Antiviral_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Antiviral")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Antiviral_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"antiviralId"), aname="_antiviralId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._antiviralId = None
                    return
            Holder.__name__ = "Antiviral_Holder"
            self.pyclass = Holder

    class RunSimulationsMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunSimulationsMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationsMessage_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"batchConfigurationFile"), aname="_batchConfigurationFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"acceptCachedResults"), aname="_acceptCachedResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._batchConfigurationFile = None
                    self._acceptCachedResults = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "RunSimulationsMessage_Holder"
            self.pyclass = Holder

    class RunSimulationsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunSimulationsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationsResult_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"completedFile"), aname="_completedFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._completedFile = None
                    self._runId = None
                    return
            Holder.__name__ = "RunSimulationsResult_Holder"
            self.pyclass = Holder

    class AntiviralTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AntiviralTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AntiviralTreatment_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Antiviral",lazy=True)(pname=(ns,"antiviral"), aname="_antiviral", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","AntiviralTreatmentEfficacy",lazy=True)(pname=(ns,"antiviralTreatmentEfficacy"), aname="_antiviralTreatmentEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Treatment_Def not in ns1.AntiviralTreatment_Def.__bases__:
                bases = list(ns1.AntiviralTreatment_Def.__bases__)
                bases.insert(0, ns1.Treatment_Def)
                ns1.AntiviralTreatment_Def.__bases__ = tuple(bases)

            ns1.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayDimensionsDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ArrayDimensionsDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ArrayDimensionsDefinition_Holder"
            self.pyclass = Holder

    class PopulationStrataDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationStrataDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationStrataDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AgeRange",lazy=True)(pname=(ns,"ageRanges"), aname="_ageRanges", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Gender",lazy=True)(pname=(ns,"genders"), aname="_genders", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","DiseaseOutcome",lazy=True)(pname=(ns,"diseaseOutcomes"), aname="_diseaseOutcomes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ArrayDimensionsDefinition_Def not in ns1.PopulationStrataDefinition_Def.__bases__:
                bases = list(ns1.PopulationStrataDefinition_Def.__bases__)
                bases.insert(0, ns1.ArrayDimensionsDefinition_Def)
                ns1.PopulationStrataDefinition_Def.__bases__ = tuple(bases)

            ns1.ArrayDimensionsDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationInfectionAndImmunityCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AgeRange",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Gender",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","InfectionState",lazy=True)(pname=(ns,"infectionState"), aname="_infectionState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionInInfectionState"), aname="_fractionInInfectionState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._infectionState = None
                    self._fractionInInfectionState = None
                    return
            Holder.__name__ = "PopulationInfectionAndImmunityCensusDataCell_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationTreatmentCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationTreatmentCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AgeRange",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Gender",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","TreatmentState",lazy=True)(pname=(ns,"treatmentState"), aname="_treatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionInInfectionState"), aname="_fractionInInfectionState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._treatmentState = None
                    self._fractionInInfectionState = None
                    return
            Holder.__name__ = "PopulationTreatmentCensusDataCell_Holder"
            self.pyclass = Holder

    class PopulationStrataArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationStrataArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationStrataArray_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PopulationStrataDefinition",lazy=True)(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"values"), aname="_values", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._values = []
                    return
            Holder.__name__ = "PopulationStrataArray_Holder"
            self.pyclass = Holder

    class TemporalArrayDimensionsDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TemporalArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TemporalArrayDimensionsDefinition_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ArrayDimensionsDefinition_Def not in ns1.TemporalArrayDimensionsDefinition_Def.__bases__:
                bases = list(ns1.TemporalArrayDimensionsDefinition_Def.__bases__)
                bases.insert(0, ns1.ArrayDimensionsDefinition_Def)
                ns1.TemporalArrayDimensionsDefinition_Def.__bases__ = tuple(bases)

            ns1.ArrayDimensionsDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectionState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "InfectionState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentState_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TreatmentState")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeRange_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AgeRange")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AgeRange_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.AgeRange_Def.__bases__:
                bases = list(ns1.AgeRange_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.AgeRange_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FacilityCategory_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "FacilityCategory")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.FacilityCategory_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","FacilityEnum",lazy=True)(pname=(ns,"facility"), aname="_facility", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.FacilityCategory_Def.__bases__:
                bases = list(ns1.FacilityCategory_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.FacilityCategory_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderCategory_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GenderCategory")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GenderCategory_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Gender",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.GenderCategory_Def.__bases__:
                bases = list(ns1.GenderCategory_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.GenderCategory_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SimulatorTimeRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SimulatorTimeRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorTimeRange_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lowerBound = None
                    self._upperBound = None
                    return
            Holder.__name__ = "SimulatorTimeRange_Holder"
            self.pyclass = Holder

    class TargetPriorityPopulation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TargetPriorityPopulation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetPriorityPopulation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionOfTargetPopulationToPrioritize"), aname="_fractionOfTargetPopulationToPrioritize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"priority"), aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationStrataDefinition",lazy=True)(pname=(ns,"targetPopulationDefinition"), aname="_targetPopulationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","TargetPopulationDefinitionEnum",lazy=True)(pname=(ns,"targetPopulationDefinitionEnum"), aname="_targetPopulationDefinitionEnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._fractionOfTargetPopulationToPrioritize = None
                    self._priority = None
                    self._targetPopulationDefinition = None
                    self._targetPopulationDefinitionEnum = None
                    return
            Holder.__name__ = "TargetPriorityPopulation_Holder"
            self.pyclass = Holder

    class ControlStrategyTargetPopulationsAndPrioritization_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ControlStrategyTargetPopulationsAndPrioritization")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ControlStrategyTargetPopulationsAndPrioritization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","TargetPriorityPopulation",lazy=True)(pname=(ns,"controlStrategyTargetPopulationsAndPrioritization"), aname="_controlStrategyTargetPopulationsAndPrioritization", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"controlStrategyNamedPrioritizationScheme"), aname="_controlStrategyNamedPrioritizationScheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlStrategyTargetPopulationsAndPrioritization = []
                    self._controlStrategyNamedPrioritizationScheme = None
                    return
            Holder.__name__ = "ControlStrategyTargetPopulationsAndPrioritization_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "InfectiousDiseaseControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDiseaseControlStrategy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ControlStrategyStartTime",lazy=True)(pname=(ns,"controlStrategyStartTime"), aname="_controlStrategyStartTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"controlStrategyResponseDelay"), aname="_controlStrategyResponseDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilisticParameterValue",lazy=True)(pname=(ns,"controlStrategyCompliance"), aname="_controlStrategyCompliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"controlStrategyReactiveEndPointFraction"), aname="_controlStrategyReactiveEndPointFraction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDiseaseControlStrategy_Def.__bases__:
                bases = list(ns1.InfectiousDiseaseControlStrategy_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDiseaseControlStrategy_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReactiveTriggersDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ReactiveTriggersDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ReactiveTriggersDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"ascertainmentFraction"), aname="_ascertainmentFraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ascertainmentDelay"), aname="_ascertainmentDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._reactiveControlStrategyTest = None
                    self._reactiveControlStrategyThreshold = None
                    self._ascertainmentFraction = None
                    self._ascertainmentDelay = None
                    return
            Holder.__name__ = "ReactiveTriggersDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationDefinitionEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TargetPopulationDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SchoolClosureControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SchoolClosureControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.SchoolClosureControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"schoolClosureDuration"), aname="_schoolClosureDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SchoolClosureTargetFacilities",lazy=True)(pname=(ns,"schoolClosureTargetFacilities"), aname="_schoolClosureTargetFacilities", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.SchoolClosureControlStrategy_Def.__bases__:
                bases = list(ns1.SchoolClosureControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.SchoolClosureControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApolloSoftwareType_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ApolloSoftwareType")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RunAndSoftwareIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunAndSoftwareIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunAndSoftwareIdentification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareId"), aname="_softwareId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._softwareId = None
                    return
            Holder.__name__ = "RunAndSoftwareIdentification_Holder"
            self.pyclass = Holder

    class SchoolClosureTargetFacilities_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SchoolClosureTargetFacilities")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VisualizerResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VisualizerResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisualizerResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UrlOutputResource",lazy=True)(pname=(ns,"visualizerOutputResource"), aname="_visualizerOutputResource", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._visualizerOutputResource = []
                    return
            Holder.__name__ = "VisualizerResult_Holder"
            self.pyclass = Holder

    class SyntheticPopulationGenerationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SyntheticPopulationGenerationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SyntheticPopulationGenerationResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UrlOutputResource",lazy=True)(pname=(ns,"syntheticPopulationOutputResource"), aname="_syntheticPopulationOutputResource", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._syntheticPopulationOutputResource = []
                    return
            Holder.__name__ = "SyntheticPopulationGenerationResult_Holder"
            self.pyclass = Holder

    class DiscreteNonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DiscreteNonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DiscreteNonparametricProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilityValuePair",lazy=True)(pname=(ns,"probabilityValuePairs"), aname="_probabilityValuePairs", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentContraindication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TreatmentContraindication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentContraindication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationStrataDefinition",lazy=True)(pname=(ns,"simulatorReferencablePopulation"), aname="_simulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionOfSimulatorReferencablePopulation"), aname="_fractionOfSimulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregnancy"), aname="_pregnancy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._simulatorReferencablePopulation = None
                    self._fractionOfSimulatorReferencablePopulation = None
                    self._pregnancy = None
                    return
            Holder.__name__ = "TreatmentContraindication_Holder"
            self.pyclass = Holder

    class ConditionalProbabilityTable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ConditionalProbabilityTable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditionalProbabilityTable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ArrayDimensionsDefinition",lazy=True)(pname=(ns,"axisDefinitions"), aname="_axisDefinitions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"pointProbabilities"), aname="_pointProbabilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"parametricDistribution"), aname="_parametricDistribution", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._axisDefinitions = None
                    self._pointProbabilities = []
                    self._parametricDistribution = []
                    return
            Holder.__name__ = "ConditionalProbabilityTable_Holder"
            self.pyclass = Holder

    class NumericParameterValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "NumericParameterValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.NumericParameterValue_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","UnitOfMeasure",lazy=True)(pname=(ns,"unitOfMeasure"), aname="_unitOfMeasure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"conditionalProbabilityDistribution"), aname="_conditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfMeasure = None
                    self._value = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditionalProbabilityDistribution = None
                    return
            Holder.__name__ = "NumericParameterValue_Holder"
            self.pyclass = Holder

    class ProbabilisticParameterValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ProbabilisticParameterValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilisticParameterValue_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"conditionalProbabilityDistribution"), aname="_conditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditionalProbabilityDistribution = None
                    return
            Holder.__name__ = "ProbabilisticParameterValue_Holder"
            self.pyclass = Holder

    class TreatmentEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentEfficacy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Treatment",lazy=True)(pname=(ns,"treatment"), aname="_treatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._treatment = None
                    return
            Holder.__name__ = "TreatmentEfficacy_Holder"
            self.pyclass = Holder

    class Treatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Treatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Treatment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfTreatedOrganisms"), aname="_speciesOfTreatedOrganisms", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numDosesInTreatmentCourse"), aname="_numDosesInTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","TreatmentContraindication",lazy=True)(pname=(ns,"treatmentContraindications"), aname="_treatmentContraindications", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Treatment_Def.__bases__:
                bases = list(ns1.Treatment_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Treatment_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BayesianNetworkDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "BayesianNetworkDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BayesianNetworkDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","BayesianNetworkStructureType",lazy=True)(pname=(ns,"networkStructure"), aname="_networkStructure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"CPTs"), aname="_CPTs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PrototypicalProbabilityFunction",lazy=True)(pname=(ns,"PPFs"), aname="_PPFs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","GeNIE_XMLType",lazy=True)(pname=(ns,"GeNIE_XML"), aname="_GeNIE_XML", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ProbabilityDistribution_Def not in ns1.BayesianNetworkDistribution_Def.__bases__:
                bases = list(ns1.BayesianNetworkDistribution_Def.__bases__)
                bases.insert(0, ns1.ProbabilityDistribution_Def)
                ns1.BayesianNetworkDistribution_Def.__bases__ = tuple(bases)

            ns1.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ControlStrategyStartTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ControlStrategyStartTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ControlStrategyStartTime_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ControlStrategyStartTime_Holder"
            self.pyclass = Holder

    class FixedStartTime_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "FixedStartTime")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.FixedStartTime_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"startTimeRelativeToScenarioDate"), aname="_startTimeRelativeToScenarioDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"stopTimeRelativeToScenarioDate"), aname="_stopTimeRelativeToScenarioDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ControlStrategyStartTime_Def not in ns1.FixedStartTime_Def.__bases__:
                bases = list(ns1.FixedStartTime_Def.__bases__)
                bases.insert(0, ns1.ControlStrategyStartTime_Def)
                ns1.FixedStartTime_Def.__bases__ = tuple(bases)

            ns1.ControlStrategyStartTime_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReactiveStartTime_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ReactiveStartTime")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ReactiveStartTime_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ReactiveTriggersDefinition",lazy=True)(pname=(ns,"trigger"), aname="_trigger", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ControlStrategyStartTime_Def not in ns1.ReactiveStartTime_Def.__bases__:
                bases = list(ns1.ReactiveStartTime_Def.__bases__)
                bases.insert(0, ns1.ControlStrategyStartTime_Def)
                ns1.ReactiveStartTime_Def.__bases__ = tuple(bases)

            ns1.ControlStrategyStartTime_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TimeDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorTime = None
                    self._dateTime = None
                    return
            Holder.__name__ = "TimeDefinition_Holder"
            self.pyclass = Holder

    class VaccinationPreventableOutcome_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationPreventableOutcome")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VaccinationEfficacy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacy_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"vaccineIdentifier"), aname="_vaccineIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"strainIdentifier"), aname="_strainIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"hostIdentifier"), aname="_hostIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationPreventableOutcome",lazy=True)(pname=(ns,"forVaccinationPreventableOutcome"), aname="_forVaccinationPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.VaccinationEfficacy_Def.__bases__:
                bases = list(ns1.VaccinationEfficacy_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.VaccinationEfficacy_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AntiviralTreatmentEfficacy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AntiviralTreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AntiviralTreatmentEfficacy_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"antiviralTreatmentIdentifier"), aname="_antiviralTreatmentIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.AntiviralTreatmentEfficacy_Def.__bases__:
                bases = list(ns1.AntiviralTreatmentEfficacy_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.AntiviralTreatmentEfficacy_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ecosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Ecosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Ecosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","BioticEcosystem",lazy=True)(pname=(ns,"bioticEcosystem"), aname="_bioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","AbioticEcosystem",lazy=True)(pname=(ns,"abioticEcosystem"), aname="_abioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._bioticEcosystem = None
                    self._abioticEcosystem = None
                    return
            Holder.__name__ = "Ecosystem_Holder"
            self.pyclass = Holder

    class BioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "BioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BioticEcosystem_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"communities"), aname="_communities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communities = []
                    return
            Holder.__name__ = "BioticEcosystem_Holder"
            self.pyclass = Holder

    class AbioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AbioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AbioticEcosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"homes"), aname="_homes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"schools"), aname="_schools", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"workplaces"), aname="_workplaces", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._homes = []
                    self._schools = []
                    self._workplaces = []
                    return
            Holder.__name__ = "AbioticEcosystem_Holder"
            self.pyclass = Holder

    class BayesianNetworkStructureType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "BayesianNetworkStructureType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BayesianNetworkStructureType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BayesianNetworkStructureType_Holder"
            self.pyclass = Holder

    class TreatmentEfficacyValueType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TreatmentEfficacyValueType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentEfficacyValueType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "TreatmentEfficacyValueType_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationEfficacyValue_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "VaccinationEfficacyValue_Holder"
            self.pyclass = Holder

    class PrototypicalProbabilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PrototypicalProbabilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PrototypicalProbabilityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PrototypicalProbabilityFunction_Holder"
            self.pyclass = Holder

    class GeNIE_XMLType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GeNIE_XMLType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GeNIE_XMLType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theXML"), aname="_theXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theXML = None
                    return
            Holder.__name__ = "GeNIE_XMLType_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"averageVaccinationEfficacy"), aname="_averageVaccinationEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilisticParameterValue",lazy=True)(pname=(ns,"vaccinationEfficacybyAgeRange"), aname="_vaccinationEfficacybyAgeRange", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationEfficacyByTimeSinceDose",lazy=True)(pname=(ns,"vaccinationEfficaciesByTimeSinceMostRecentDose"), aname="_vaccinationEfficaciesByTimeSinceMostRecentDose", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.VaccinationEfficacy_Def not in ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns1.VaccinationEfficacy_Def)
                ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns1.VaccinationEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AntiviralEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AntiviralEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AntiviralEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"averageAntiviralTreatmentEfficacy"), aname="_averageAntiviralTreatmentEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.AntiviralTreatmentEfficacy_Def not in ns1.AntiviralEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns1.AntiviralEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns1.AntiviralTreatmentEfficacy_Def)
                ns1.AntiviralEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns1.AntiviralTreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeAxisCategoryLabels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "TimeAxisCategoryLabels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeAxisCategoryLabels_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeEarliest"), aname="_simulatorTimeEarliest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeLatest"), aname="_simulatorTimeLatest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._simulatorTimeEarliest = None
                    self._simulatorTimeLatest = None
                    return
            Holder.__name__ = "TimeAxisCategoryLabels_Holder"
            self.pyclass = Holder

    class LocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "LocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.LocationDefinition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsIncluded"), aname="_locationsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsExcluded"), aname="_locationsExcluded", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._locationsIncluded = []
                    self._locationsExcluded = []
                    return
            Holder.__name__ = "LocationDefinition_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyByTimeSinceDose_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyByTimeSinceDose")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationEfficacyByTimeSinceDose_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfDosesAdministered"), aname="_numberOfDosesAdministered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","TimeAxisCategoryLabels",lazy=True)(pname=(ns,"timeIntervalLabelDefinitions"), aname="_timeIntervalLabelDefinitions", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"vaccinationEfficacyByTimeSinceMostRecentDose"), aname="_vaccinationEfficacyByTimeSinceMostRecentDose", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numberOfDosesAdministered = None
                    self._timeIntervalLabelDefinitions = []
                    self._vaccinationEfficacyByTimeSinceMostRecentDose = []
                    return
            Holder.__name__ = "VaccinationEfficacyByTimeSinceDose_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyInferred_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyInferred")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyInferred_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationEfficacyStudy",lazy=True)(pname=(ns,"inferredFromTheseStudies"), aname="_inferredFromTheseStudies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","BayesianNetworkDistribution",lazy=True)(pname=(ns,"vaccinationEfficacyModel"), aname="_vaccinationEfficacyModel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.VaccinationEfficacy_Def not in ns1.VaccinationEfficacyInferred_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyInferred_Def.__bases__)
                bases.insert(0, ns1.VaccinationEfficacy_Def)
                ns1.VaccinationEfficacyInferred_Def.__bases__ = tuple(bases)

            ns1.VaccinationEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CatalogEntryForApolloLibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "CatalogEntryForApolloLibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CatalogEntryForApolloLibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"itemDescription"), aname="_itemDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"itemSource"), aname="_itemSource", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"itemType"), aname="_itemType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"itemUuid"), aname="_itemUuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"itemIndexingLabels"), aname="_itemIndexingLabels", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"itemCreationTime"), aname="_itemCreationTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._itemDescription = None
                    self._itemSource = None
                    self._itemType = None
                    self._itemUuid = None
                    self._itemIndexingLabels = []
                    self._itemCreationTime = None
                    return
            Holder.__name__ = "CatalogEntryForApolloLibraryItem_Holder"
            self.pyclass = Holder

    class LibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "LibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.LibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"base_type"), aname="_base_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._base_type = None
                    return
            Holder.__name__ = "LibraryItem_Holder"
            self.pyclass = Holder

    class DecisionAlternative_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DecisionAlternative")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DecisionAlternative_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"singleStrategy"), aname="_singleStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"combinationStrategy"), aname="_combinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SequentialCombinationStrategy"), aname="_SequentialCombinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._singleStrategy = None
                    self._combinationStrategy = None
                    self._SequentialCombinationStrategy = None
                    return
            Holder.__name__ = "DecisionAlternative_Holder"
            self.pyclass = Holder

    class UtilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "UtilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UtilityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lambdaFunction"), aname="_lambdaFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textDescription"), aname="_textDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lambdaFunction = None
                    self._textDescription = None
                    return
            Holder.__name__ = "UtilityFunction_Holder"
            self.pyclass = Holder

    class SensitivityAnalysis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SensitivityAnalysis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SensitivityAnalysis_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysis_Holder"
            self.pyclass = Holder

    class SensitivityAnalysisResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SensitivityAnalysisResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SensitivityAnalysisResult_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysisResult_Holder"
            self.pyclass = Holder

    class DecisionModel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DecisionModel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DecisionModel_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","DecisionAlternative",lazy=True)(pname=(ns,"decisionAlternatives"), aname="_decisionAlternatives", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","RunSimulationMessage",lazy=True)(pname=(ns,"simulatorConfiguration "), aname="_simulatorConfiguration_", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UtilityFunction",lazy=True)(pname=(ns,"utilityFunction"), aname="_utilityFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.DecisionModel_Def.__bases__:
                bases = list(ns1.DecisionModel_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.DecisionModel_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DecisionAnalysis_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DecisionAnalysis")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DecisionAnalysis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","DecisionModel",lazy=True)(pname=(ns,"decisionModel"), aname="_decisionModel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","BaseCaseResult",lazy=True)(pname=(ns,"baseCaseResult "), aname="_baseCaseResult_", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SensitivityAnalysis",lazy=True)(pname=(ns,"sensitivityAnalyses"), aname="_sensitivityAnalyses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.DecisionAnalysis_Def.__bases__:
                bases = list(ns1.DecisionAnalysis_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.DecisionAnalysis_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExpectedUtility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ExpectedUtility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ExpectedUtility_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ExpectedUtility_Holder"
            self.pyclass = Holder

    class BaseCaseResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "BaseCaseResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BaseCaseResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","DecisionAlternative",lazy=True)(pname=(ns,"decisionAlternatives"), aname="_decisionAlternatives", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"expectedUtilities"), aname="_expectedUtilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._decisionAlternatives = []
                    self._expectedUtilities = []
                    return
            Holder.__name__ = "BaseCaseResult_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyMeasured_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyMeasured")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyMeasured_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"measuredEfficacyValue"), aname="_measuredEfficacyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.VaccinationEfficacy_Def not in ns1.VaccinationEfficacyMeasured_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyMeasured_Def.__bases__)
                bases.insert(0, ns1.VaccinationEfficacy_Def)
                ns1.VaccinationEfficacyMeasured_Def.__bases__ = tuple(bases)

            ns1.VaccinationEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyStudy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "VaccinationEfficacyStudy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationEfficacyStudy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationPreventableOutcome",lazy=True)(pname=(ns,"vaccinationPreventableOutcome"), aname="_vaccinationPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","VaccinationEfficacyMeasured",lazy=True)(pname=(ns,"vaccinationEfficacyMeasured"), aname="_vaccinationEfficacyMeasured", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSets"), aname="_dataSets", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccinationPreventableOutcome = None
                    self._vaccinationEfficacyMeasured = []
                    self._dataSets = []
                    self._references = []
                    return
            Holder.__name__ = "VaccinationEfficacyStudy_Holder"
            self.pyclass = Holder

    class CuratedLibraryItemContainer_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "CuratedLibraryItemContainer")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CuratedLibraryItemContainer_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","CatalogEntryForApolloLibraryItem",lazy=True)(pname=(ns,"curatedLibraryItem"), aname="_curatedLibraryItem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloIndexableItem",lazy=True)(pname=(ns,"apolloIndexableItem"), aname="_apolloIndexableItem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._curatedLibraryItem = None
                    self._apolloIndexableItem = None
                    return
            Holder.__name__ = "CuratedLibraryItemContainer_Holder"
            self.pyclass = Holder

    class ApolloIndexableItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ApolloIndexableItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ApolloIndexableItem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ApolloIndexableItem_Holder"
            self.pyclass = Holder

    class PathogenTaxonID_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PathogenTaxonID")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcome_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DiseaseOutcome")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class FacilityEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "FacilityEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectionAcquisition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "InfectionAcquisition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectionAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonID"), aname="_pathogenTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"susceptibleHostTaxonID"), aname="_susceptibleHostTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostTaxonID"), aname="_infectiousHostTaxonID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contaminatedMaterialID"), aname="_contaminatedMaterialID", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"basicReproductionNumber"), aname="_basicReproductionNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ImperialReproductionNumber",lazy=True)(pname=(ns,"imperialReproductionNumber"), aname="_imperialReproductionNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilisticParameterValue",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NumericParameterValue",lazy=True)(pname=(ns,"transmissionCoefficient"), aname="_transmissionCoefficient", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectionAcquisition_Def.__bases__:
                bases = list(ns1.InfectionAcquisition_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectionAcquisition_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RunSimulationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunSimulationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationMessage_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","SoftwareIdentification",lazy=True)(pname=(ns,"simulatorIdentification"), aname="_simulatorIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SimulatorTimeSpecification",lazy=True)(pname=(ns,"simulatorTimeSpecification"), aname="_simulatorTimeSpecification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"infectiousDiseaseScenario"), aname="_infectiousDiseaseScenario", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorIdentification = None
                    self._authentication = None
                    self._simulatorTimeSpecification = None
                    self._infectiousDiseaseScenario = None
                    return
            Holder.__name__ = "RunSimulationMessage_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseScenario_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "InfectiousDiseaseScenario")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDiseaseScenario_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"scenarioDate"), aname="_scenarioDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","InfectiousDisease",lazy=True)(pname=(ns,"diseases"), aname="_diseases", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Contamination",lazy=True)(pname=(ns,"contaminations"), aname="_contaminations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Treatment",lazy=True)(pname=(ns,"treatments"), aname="_treatments", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"populationInfectionAndImmunityCensuses"), aname="_populationInfectionAndImmunityCensuses", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationTreatmentCensus",lazy=True)(pname=(ns,"populationTreatmentCensuses"), aname="_populationTreatmentCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ContaminatedThingCensus",lazy=True)(pname=(ns,"contaminatedThingCensuses"), aname="_contaminatedThingCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDiseaseScenario_Def.__bases__:
                bases = list(ns1.InfectiousDiseaseScenario_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDiseaseScenario_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CompartmentalModelPopulationAndEnvironmentCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "CompartmentalModelPopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CompartmentalModelPopulationAndEnvironmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"bioticEcosystemParts"), aname="_bioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","abioticEcosystemPartCensus",lazy=True)(pname=(ns,"abioticEcosystemParts"), aname="_abioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bioticEcosystemParts = []
                    self._abioticEcosystemParts = []
                    return
            Holder.__name__ = "CompartmentalModelPopulationAndEnvironmentCensus_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationTreatmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationTreatmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Treatment",lazy=True)(pname=(ns,"treatment"), aname="_treatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"treatmentCensusData"), aname="_treatmentCensusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationTreatmentCensus_Def.__bases__:
                bases = list(ns1.PopulationTreatmentCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationTreatmentCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminationAcquisition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ContaminationAcquisition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ContaminationAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonID"), aname="_pathogenTaxonID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostSource"), aname="_infectiousHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contaminatedSource"), aname="_contaminatedSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilisticParameterValue",lazy=True)(pname=(ns,"contaminationProbability"), aname="_contaminationProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._pathogenTaxonID = None
                    self._infectiousHostSource = None
                    self._contaminatedSource = None
                    self._contaminationProbability = None
                    return
            Holder.__name__ = "ContaminationAcquisition_Holder"
            self.pyclass = Holder

    class PopulationCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationCensusDescription_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Location",lazy=True)(pname=(ns,"locations"), aname="_locations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationSpecies = None
                    self._characteristics = []
                    self._locations = []
                    return
            Holder.__name__ = "PopulationCensusDescription_Holder"
            self.pyclass = Holder

    class AbioticEcosystemElementCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AbioticEcosystemElementCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AbioticEcosystemElementCensusDescription_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticElementID"), aname="_abioticElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticElementID = None
                    self._characteristics = []
                    return
            Holder.__name__ = "AbioticEcosystemElementCensusDescription_Holder"
            self.pyclass = Holder

    class ContaminatedThingCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ContaminatedThingCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContaminatedThingCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"kindOfThing"), aname="_kindOfThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.ContaminatedThingCensus_Def.__bases__:
                bases = list(ns1.ContaminatedThingCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.ContaminatedThingCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminatedThingCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ContaminatedThingCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContaminatedThingCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionContaminated"), aname="_fractionContaminated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"exceptionSublocations"), aname="_exceptionSublocations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.ContaminatedThingCensusData_Def.__bases__:
                bases = list(ns1.ContaminatedThingCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.ContaminatedThingCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminatedThingCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ContaminatedThingCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ContaminatedThingCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AgeRange",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Gender",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fractionContaminated"), aname="_fractionContaminated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._fractionContaminated = None
                    return
            Holder.__name__ = "ContaminatedThingCensusDataCell_Holder"
            self.pyclass = Holder

    class abioticEcosystemPartCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "abioticEcosystemPartCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.abioticEcosystemPartCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticEcosystemElementID"), aname="_abioticEcosystemElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElementID = None
                    return
            Holder.__name__ = "abioticEcosystemPartCensus_Holder"
            self.pyclass = Holder

    class PopulationAndEnvironmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "PopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationAndEnvironmentCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"nameOfAdministativeUnit"), aname="_nameOfAdministativeUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationAndEnvironmentCensus_Def.__bases__:
                bases = list(ns1.PopulationAndEnvironmentCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationAndEnvironmentCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDisease_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "InfectiousDisease")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDisease_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"diseaseID"), aname="_diseaseID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesWithDisease"), aname="_speciesWithDisease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogen"), aname="_causalPathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","DiseaseOutcomeAndProbability",lazy=True)(pname=(ns,"diseaseOutcomes"), aname="_diseaseOutcomes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDisease_Def.__bases__:
                bases = list(ns1.InfectiousDisease_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDisease_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FractionOfThingContaminated_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "FractionOfThingContaminated")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.FractionOfThingContaminated_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Fraction",lazy=True)(pname=(ns,"fraction"), aname="_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._fraction = None
                    return
            Holder.__name__ = "FractionOfThingContaminated_Holder"
            self.pyclass = Holder

    class ApolloPathogenCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ApolloPathogenCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ApolloPathogenCode_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","NcbiTaxonId",lazy=True)(pname=(ns,"ncbiTaxonId"), aname="_ncbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"gisrnCladeName"), aname="_gisrnCladeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ncbiTaxonId = None
                    self._gisrnCladeName = None
                    return
            Holder.__name__ = "ApolloPathogenCode_Holder"
            self.pyclass = Holder

    class NcbiTaxonId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "NcbiTaxonId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProbabilityValuePair_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ProbabilityValuePair")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilityValuePair_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._probability = None
                    return
            Holder.__name__ = "ProbabilityValuePair_Holder"
            self.pyclass = Holder

    class ProbabilityDistribution_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilityDistribution_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ProbabilityDistribution_Holder"
            self.pyclass = Holder

    class UnconditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "UnconditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.UnconditionalProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ProbabilityDistribution_Def not in ns1.UnconditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns1.UnconditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ProbabilityDistribution_Def)
                ns1.UnconditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NonparametricDiscreteProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "NonparametricDiscreteProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.NonparametricDiscreteProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__:
                bases = list(ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.ParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.ParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.ParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiscreteParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DiscreteParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DiscreteParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ParametricProbabilityDistribution_Def not in ns1.DiscreteParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.DiscreteParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ParametricProbabilityDistribution_Def)
                ns1.DiscreteParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ContinuousParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContinuousParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ParametricProbabilityDistribution_Def not in ns1.ContinuousParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.ContinuousParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ParametricProbabilityDistribution_Def)
                ns1.ContinuousParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LogNormalDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "LogNormalDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LogNormalDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.LogNormalDistribution_Def.__bases__:
                bases = list(ns1.LogNormalDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.LogNormalDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GammaDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GammaDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GammaDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"theta-scale"), aname="_theta_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.GammaDistribution_Def.__bases__:
                bases = list(ns1.GammaDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.GammaDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WeibullDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "WeibullDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.WeibullDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"lambda-scale"), aname="_lambda_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.WeibullDistribution_Def.__bases__:
                bases = list(ns1.WeibullDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.WeibullDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditionalProbabilityDistribution_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ConditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditionalProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ConditioningVariable",lazy=True)(pname=(ns,"firstConditioningVariable"), aname="_firstConditioningVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._firstConditioningVariable = None
                    return
            Holder.__name__ = "ConditionalProbabilityDistribution_Holder"
            self.pyclass = Holder

    class ConditioningVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ConditioningVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditioningVariable_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"variableName"), aname="_variableName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Category",lazy=True)(pname=(ns,"values"), aname="_values", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variableName = None
                    self._values = []
                    return
            Holder.__name__ = "ConditioningVariable_Holder"
            self.pyclass = Holder

    class Category_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Category")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Category_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ConditioningVariable",lazy=True)(pname=(ns,"conditioningVariable"), aname="_conditioningVariable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditioningVariable = None
                    return
            Holder.__name__ = "Category_Holder"
            self.pyclass = Holder

    class CategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "CategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CategoryDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CategoryDefinition_Holder"
            self.pyclass = Holder

    class AbioticEcosystemEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AbioticEcosystemEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfMeasure_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "UnitOfMeasure")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeAndProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "DiseaseOutcomeAndProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DiseaseOutcomeAndProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","DiseaseOutcome",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ProbabilisticParameterValue",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseOutcome = None
                    self._probability = None
                    return
            Holder.__name__ = "DiseaseOutcomeAndProbability_Holder"
            self.pyclass = Holder

    class ImperialReproductionNumber_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ImperialReproductionNumber")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ImperialReproductionNumber_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"averageCommunityImperialReproductionNumber"), aname="_averageCommunityImperialReproductionNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"averageHouseholdImperialReproductionNumber"), aname="_averageHouseholdImperialReproductionNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ImperialReproductionNumberForPlace",lazy=True)(pname=(ns,"imperialReproductionNumberForPlace"), aname="_imperialReproductionNumberForPlace", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SeasonalityFunctionParameters",lazy=True)(pname=(ns,"seasonalityFunctionParameters"), aname="_seasonalityFunctionParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"probSymptomaticInfectionClinicallyDetected"), aname="_probSymptomaticInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticInfectionMultiplier"), aname="_symptomaticInfectionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"probSevereInfectionClinicallyDetected"), aname="_probSevereInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"severeInfectionMultiplier"), aname="_severeInfectionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._averageCommunityImperialReproductionNumber = None
                    self._averageHouseholdImperialReproductionNumber = None
                    self._imperialReproductionNumberForPlace = []
                    self._seasonalityFunctionParameters = None
                    self._probSymptomaticInfectionClinicallyDetected = None
                    self._symptomaticInfectionMultiplier = None
                    self._probSevereInfectionClinicallyDetected = None
                    self._severeInfectionMultiplier = None
                    return
            Holder.__name__ = "ImperialReproductionNumber_Holder"
            self.pyclass = Holder

    class ImperialReproductionNumberForPlace_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "ImperialReproductionNumberForPlace")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ImperialReproductionNumberForPlace_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","FacilityEnum",lazy=True)(pname=(ns,"placeType"), aname="_placeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"averageImperialReproductionNumber"), aname="_averageImperialReproductionNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"withinGroupTransmissionProbability"), aname="_withinGroupTransmissionProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"probSymptomaticIndividualAbsent"), aname="_probSymptomaticIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticAbsenteeMultiplier"), aname="_symptomaticAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Probability",lazy=True)(pname=(ns,"probSeverelyInfectedIndividualAbsent"), aname="_probSeverelyInfectedIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PositiveDouble",lazy=True)(pname=(ns,"severelyInfectedAbsenteeMultiplier"), aname="_severelyInfectedAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","SpatialKernelFunctionParameters",lazy=True)(pname=(ns,"spatialKernelFunctionParameters"), aname="_spatialKernelFunctionParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._placeType = None
                    self._averageImperialReproductionNumber = None
                    self._withinGroupTransmissionProbability = None
                    self._probSymptomaticIndividualAbsent = None
                    self._symptomaticAbsenteeMultiplier = None
                    self._probSeverelyInfectedIndividualAbsent = None
                    self._severelyInfectedAbsenteeMultiplier = None
                    self._spatialKernelFunctionParameters = None
                    return
            Holder.__name__ = "ImperialReproductionNumberForPlace_Holder"
            self.pyclass = Holder

    class SeasonalityFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SeasonalityFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SeasonalityFunctionParameters_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"maximumSeasonalLatitude"), aname="_maximumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumSeasonalLatitude"), aname="_minimumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"seasonalTemporalOffset"), aname="_seasonalTemporalOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maximumSeasonalLatitude = None
                    self._minimumSeasonalLatitude = None
                    self._seasonalTemporalOffset = None
                    return
            Holder.__name__ = "SeasonalityFunctionParameters_Holder"
            self.pyclass = Holder

    class SpatialKernelFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "SpatialKernelFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SpatialKernelFunctionParameters_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a0"), aname="_a0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a1"), aname="_a1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b0"), aname="_b0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b1"), aname="_b1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"c1"), aname="_c1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"cutoff"), aname="_cutoff", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._a0 = None
                    self._a1 = None
                    self._b0 = None
                    self._b1 = None
                    self._c1 = None
                    self._cutoff = None
                    return
            Holder.__name__ = "SpatialKernelFunctionParameters_Holder"
            self.pyclass = Holder

    class GetScenarioLocationCodesSupportedBySimulatorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GetScenarioLocationCodesSupportedBySimulatorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetScenarioLocationCodesSupportedBySimulatorResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationCodes"), aname="_locationCodes", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._locationCodes = []
                    return
            Holder.__name__ = "GetScenarioLocationCodesSupportedBySimulatorResult_Holder"
            self.pyclass = Holder

    class GetPopulationAndEnvironmentCensusResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GetPopulationAndEnvironmentCensusResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetPopulationAndEnvironmentCensusResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"populationAndEnvironmentCensus"), aname="_populationAndEnvironmentCensus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._populationAndEnvironmentCensus = None
                    return
            Holder.__name__ = "GetPopulationAndEnvironmentCensusResult_Holder"
            self.pyclass = Holder

    class GetConfigurationFileForSimulationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GetConfigurationFileForSimulationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetConfigurationFileForSimulationResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFile"), aname="_configurationFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFileInHtmlFormat"), aname="_configurationFileInHtmlFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._configurationFile = None
                    self._configurationFileInHtmlFormat = None
                    return
            Holder.__name__ = "GetConfigurationFileForSimulationResult_Holder"
            self.pyclass = Holder

    class AddLibraryItemResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "AddLibraryItemResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AddLibraryItemResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"uuid"), aname="_uuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._uuid = None
                    return
            Holder.__name__ = "AddLibraryItemResult_Holder"
            self.pyclass = Holder

    class GetLibraryItemResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GetLibraryItemResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetLibraryItemResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","CuratedLibraryItemContainer",lazy=True)(pname=(ns,"curatedLibraryItemContainer"), aname="_curatedLibraryItemContainer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._curatedLibraryItemContainer = None
                    return
            Holder.__name__ = "GetLibraryItemResult_Holder"
            self.pyclass = Holder

    class GetLibraryItemUuidsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "GetLibraryItemUuidsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetLibraryItemUuidsResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"Uuids"), aname="_Uuids", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._Uuids = []
                    return
            Holder.__name__ = "GetLibraryItemUuidsResult_Holder"
            self.pyclass = Holder

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Location_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationCode"), aname="_locationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","LocationDefinition",lazy=True)(pname=(ns,"locationDefinition"), aname="_locationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._locationCode = None
                    self._locationDefinition = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class CensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "CensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CensusData_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.CensusData_Def.__bases__:
                bases = list(ns1.CensusData_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.CensusData_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Census_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "Census")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Census_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Census_Def.__bases__:
                bases = list(ns1.Census_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Census_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RunSyntheticPopulationGenerationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0/"
        type = (schema, "RunSyntheticPopulationGenerationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSyntheticPopulationGenerationMessage_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "RunSyntheticPopulationGenerationMessage_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://types.apollo.pitt.edu/v2_0/)

##############################
# targetNamespace
# http://service.apollo.pitt.edu/visualizerservice/v2_0/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/visualizerservice/v2_0/"

    class runVisualization_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualization"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0/"
        def __init__(self, **kw):
            ns = ns0.runVisualization_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","RunVisualizationMessage",lazy=True)(pname="runVisualizationMessage", aname="_runVisualizationMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0/","runVisualization")
            kw["aname"] = "_runVisualization"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runVisualizationMessage = None
                    return
            Holder.__name__ = "runVisualization_Holder"
            self.pyclass = Holder

    class runVisualizationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualizationResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0/"
        def __init__(self, **kw):
            ns = ns0.runVisualizationResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","VisualizerResult",lazy=True)(pname="visualizationResult", aname="_visualizationResult", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0/","runVisualizationResponse")
            kw["aname"] = "_runVisualizationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizationResult = None
                    return
            Holder.__name__ = "runVisualizationResponse_Holder"
            self.pyclass = Holder

    class getRunStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatus"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0/"
        def __init__(self, **kw):
            ns = ns0.getRunStatus_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","RunIdentification",lazy=True)(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0/","getRunStatus")
            kw["aname"] = "_getRunStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getRunStatus_Holder"
            self.pyclass = Holder

    class getRunStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatusResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0/"
        def __init__(self, **kw):
            ns = ns0.getRunStatusResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0/","MethodCallStatus",lazy=True)(pname="runStatus", aname="_runStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0/","getRunStatusResponse")
            kw["aname"] = "_getRunStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runStatus = None
                    return
            Holder.__name__ = "getRunStatusResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/visualizerservice/v2_0/)
