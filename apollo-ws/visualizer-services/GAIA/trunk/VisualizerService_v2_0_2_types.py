##################################################
# file: VisualizerService_v2_0_2_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py --complexType --lazy visualizerservice202.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://service.apollo.pitt.edu/visualizerservice/v2_0_2/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/visualizerservice/v2_0_2/"

    class runVisualization_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualization"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0_2/"
        def __init__(self, **kw):
            ns = ns0.runVisualization_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname="visualizationRunId", aname="_visualizationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","RunVisualizationMessage",lazy=True)(pname="runVisualizationMessage", aname="_runVisualizationMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0_2/","runVisualization")
            kw["aname"] = "_runVisualization"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizationRunId = None
                    self._runVisualizationMessage = None
                    return
            Holder.__name__ = "runVisualization_Holder"
            self.pyclass = Holder

    class runVisualizationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualizationResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v2_0_2/"
        def __init__(self, **kw):
            ns = ns0.runVisualizationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v2_0_2/","runVisualizationResponse")
            kw["aname"] = "_runVisualizationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "runVisualizationResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/visualizerservice/v2_0_2/)

##############################
# targetNamespace
# http://types.apollo.pitt.edu/v2_0_2/
##############################

class ns1:
    targetNamespace = "http://types.apollo.pitt.edu/v2_0_2/"

    class Probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Fraction_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Fraction")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class PositiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PositiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class NonNegativeDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "NonNegativeDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class SimulatorTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SimulatorTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfTimeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UnitOfTimeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "MethodCallStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "MethodCallStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.MethodCallStatus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "MethodCallStatus_Holder"
            self.pyclass = Holder

    class GenderEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GenderEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Authentication_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterId"), aname="_requesterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterPassword"), aname="_requesterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterId = None
                    self._requesterPassword = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class RunVisualizationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunVisualizationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunVisualizationMessage_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"visualizerIdentification"), aname="_visualizerIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentificationAndLabel",lazy=True)(pname=(ns,"simulationRunIds"), aname="_simulationRunIds", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerIdentification = None
                    self._authentication = None
                    self._simulationRunIds = []
                    return
            Holder.__name__ = "RunVisualizationMessage_Holder"
            self.pyclass = Holder

    class RunVisualizationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunVisualizationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunVisualizationResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname=(ns,"visualizationRunId"), aname="_visualizationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizationRunId = None
                    return
            Holder.__name__ = "RunVisualizationResult_Holder"
            self.pyclass = Holder

    class RunIdentification_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunIdentification")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, pyclass=None, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class SimulatorTimeSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SimulatorTimeSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorTimeSpecification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForSimulatorTimeStep"), aname="_unitOfTimeForSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"numberOfUnitsOfTimeInOneSimulatorTimeStep"), aname="_numberOfUnitsOfTimeInOneSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"runLength"), aname="_runLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfTimeForSimulatorTimeStep = None
                    self._numberOfUnitsOfTimeInOneSimulatorTimeStep = None
                    self._runLength = None
                    return
            Holder.__name__ = "SimulatorTimeSpecification_Holder"
            self.pyclass = Holder

    class IndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "IndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.IndividualTreatmentControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Treatment",lazy=True)(pname=(ns,"individualTreatment"), aname="_individualTreatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationTreatmentCensus",lazy=True)(pname=(ns,"populationTreatmentCensus"), aname="_populationTreatmentCensus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"delayFromSymptomsToTreatment"), aname="_delayFromSymptomsToTreatment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentSystemLogistics",lazy=True)(pname=(ns,"treatmentSystemLogistics"), aname="_treatmentSystemLogistics", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ControlStrategyTargetPopulationsAndPrioritization",lazy=True)(pname=(ns,"targetPopulationsAndPrioritizations"), aname="_targetPopulationsAndPrioritizations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.IndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns1.IndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.IndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vaccination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Vaccination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Vaccination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","vaccineOntologyId",lazy=True)(pname=(ns,"vaccineId"), aname="_vaccineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","VaccinationEfficacyForSimulatorConfiguration",lazy=True)(pname=(ns,"vaccinationEfficacies"), aname="_vaccinationEfficacies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Treatment_Def not in ns1.Vaccination_Def.__bases__:
                bases = list(ns1.Vaccination_Def.__bases__)
                bases.insert(0, ns1.Treatment_Def)
                ns1.Vaccination_Def.__bases__ = tuple(bases)

            ns1.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RingIndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RingIndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.RingIndividualTreatmentControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ringDiameterInMeters"), aname="_ringDiameterInMeters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.IndividualTreatmentControlStrategy_Def not in ns1.RingIndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns1.RingIndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns1.IndividualTreatmentControlStrategy_Def)
                ns1.RingIndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns1.IndividualTreatmentControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Infection_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Infection")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Infection_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonId"), aname="_pathogenTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"hostTaxonId"), aname="_hostTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"incubationPeriodDuration"), aname="_incubationPeriodDuration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectionAcquisitionFromInfectiousHost",lazy=True)(pname=(ns,"infectionAcquisitionsFromInfectiousHosts"), aname="_infectionAcquisitionsFromInfectiousHosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectionAcquisitionFromContaminatedThing",lazy=True)(pname=(ns,"infectionAcquisitionsFromContaminatedThings"), aname="_infectionAcquisitionsFromContaminatedThings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Infection_Def.__bases__:
                bases = list(ns1.Infection_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Infection_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Contamination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Contamination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Contamination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonId"), aname="_pathogenTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"contaminationDuration"), aname="_contaminationDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ContaminationAcquisition",lazy=True)(pname=(ns,"contaminationAcquisition"), aname="_contaminationAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Contamination_Def.__bases__:
                bases = list(ns1.Contamination_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Contamination_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationInfectionAndImmunityCensus_Def.__bases__:
                bases = list(ns1.PopulationInfectionAndImmunityCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationInfectionAndImmunityCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensusDataCell",lazy=True)(pname=(ns,"censusDataCells"), aname="_censusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__:
                bases = list(ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.PopulationInfectionAndImmunityCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationTreatmentCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationTreatmentCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationTreatmentCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationTreatmentCensusDataCell",lazy=True)(pname=(ns,"treatmentCensusDataCells"), aname="_treatmentCensusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.PopulationTreatmentCensusData_Def.__bases__:
                bases = list(ns1.PopulationTreatmentCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.PopulationTreatmentCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UrlOutputResource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UrlOutputResource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UrlOutputResource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "UrlOutputResource_Holder"
            self.pyclass = Holder

    class ServiceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ServiceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "ServiceResult_Holder"
            self.pyclass = Holder

    class SoftwareIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SoftwareIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SoftwareIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"softwareDeveloper"), aname="_softwareDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareName"), aname="_softwareName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareVersion"), aname="_softwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloSoftwareTypeEnum",lazy=True)(pname=(ns,"softwareType"), aname="_softwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareDeveloper = None
                    self._softwareName = None
                    self._softwareVersion = None
                    self._softwareType = None
                    return
            Holder.__name__ = "SoftwareIdentification_Holder"
            self.pyclass = Holder

    class ApolloLocationCode_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ApolloLocationCode")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequesterIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RequesterIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RequesterIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterName"), aname="_requesterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterCompany"), aname="_requesterCompany", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterEmail"), aname="_requesterEmail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterName = None
                    self._requesterCompany = None
                    self._requesterEmail = None
                    return
            Holder.__name__ = "RequesterIdentification_Holder"
            self.pyclass = Holder

    class Vaccine_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Vaccine")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Vaccine_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"vaccineIdentifier"), aname="_vaccineIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"valence"), aname="_valence", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccineIdentifier = None
                    self._valence = []
                    return
            Holder.__name__ = "Vaccine_Holder"
            self.pyclass = Holder

    class AgeGroupEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AgeGroupEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AgeGroupEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"vaccineEfficacy"), aname="_vaccineEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._vaccineEfficacy = None
                    return
            Holder.__name__ = "AgeGroupEfficacy_Holder"
            self.pyclass = Holder

    class VaccineContraindications_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccineContraindications")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccineContraindications_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"infants"), aname="_infants", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"preschoolers"), aname="_preschoolers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"schoolAgeChildren"), aname="_schoolAgeChildren", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"youngAdults"), aname="_youngAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"olderAdults"), aname="_olderAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"elderly"), aname="_elderly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregnantAdultsRestricted"), aname="_pregnantAdultsRestricted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infants = None
                    self._preschoolers = None
                    self._schoolAgeChildren = None
                    self._youngAdults = None
                    self._olderAdults = None
                    self._elderly = None
                    self._pregnantAdultsRestricted = None
                    return
            Holder.__name__ = "VaccineContraindications_Holder"
            self.pyclass = Holder

    class Antiviral_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Antiviral")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Antiviral_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"antiviralId"), aname="_antiviralId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._antiviralId = None
                    return
            Holder.__name__ = "Antiviral_Holder"
            self.pyclass = Holder

    class RunSimulationsMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunSimulationsMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationsMessage_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"batchConfigurationFile"), aname="_batchConfigurationFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"acceptCachedResults"), aname="_acceptCachedResults", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._batchConfigurationFile = None
                    self._acceptCachedResults = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "RunSimulationsMessage_Holder"
            self.pyclass = Holder

    class RunSimulationsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunSimulationsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationsResult_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"completedFile"), aname="_completedFile", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._completedFile = None
                    self._runId = None
                    return
            Holder.__name__ = "RunSimulationsResult_Holder"
            self.pyclass = Holder

    class AntiviralTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AntiviralTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AntiviralTreatment_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"antiviralId"), aname="_antiviralId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","AntiviralTreatmentEfficacy",lazy=True)(pname=(ns,"antiviralTreatmentEfficacy"), aname="_antiviralTreatmentEfficacy", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Treatment_Def not in ns1.AntiviralTreatment_Def.__bases__:
                bases = list(ns1.AntiviralTreatment_Def.__bases__)
                bases.insert(0, ns1.Treatment_Def)
                ns1.AntiviralTreatment_Def.__bases__ = tuple(bases)

            ns1.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayDimensionsDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ArrayDimensionsDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ArrayDimensionsDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TargetPopulationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetPopulationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationStratificationEnum",lazy=True)(pname=(ns,"otherStratification"), aname="_otherStratification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._diseaseOutcome = None
                    self._otherStratification = None
                    return
            Holder.__name__ = "TargetPopulationDefinition_Holder"
            self.pyclass = Holder

    class PopulationInfectionAndImmunityCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationInfectionAndImmunityCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationInfectionAndImmunityCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectionStateEnum",lazy=True)(pname=(ns,"infectionState"), aname="_infectionState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fractionInInfectionState"), aname="_fractionInInfectionState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._infectionState = None
                    self._fractionInInfectionState = None
                    return
            Holder.__name__ = "PopulationInfectionAndImmunityCensusDataCell_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationTreatmentCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationTreatmentCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentStateEnum",lazy=True)(pname=(ns,"treatmentState"), aname="_treatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fractionInTreatmentState"), aname="_fractionInTreatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._treatmentState = None
                    self._fractionInTreatmentState = None
                    return
            Holder.__name__ = "PopulationTreatmentCensusDataCell_Holder"
            self.pyclass = Holder

    class TemporalArrayDimensionsDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TemporalArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TemporalArrayDimensionsDefinition_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ArrayDimensionsDefinition_Def not in ns1.TemporalArrayDimensionsDefinition_Def.__bases__:
                bases = list(ns1.TemporalArrayDimensionsDefinition_Def.__bases__)
                bases.insert(0, ns1.ArrayDimensionsDefinition_Def)
                ns1.TemporalArrayDimensionsDefinition_Def.__bases__ = tuple(bases)

            ns1.ArrayDimensionsDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectionStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectionStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualTreatmentEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "IndividualTreatmentEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeRangeCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AgeRangeCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AgeRangeCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForLowerBound"), aname="_unitOfTimeForLowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForUpperBound"), aname="_unitOfTimeForUpperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.AgeRangeCategoryDefinition_Def.__bases__:
                bases = list(ns1.AgeRangeCategoryDefinition_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.AgeRangeCategoryDefinition_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TimeSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TimeSpanCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TimeScaleEnum",lazy=True)(pname=(ns,"timeZeroReference"), aname="_timeZeroReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"startOfTimeSpan"), aname="_startOfTimeSpan", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"durationInTimeUnits"), aname="_durationInTimeUnits", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.TimeSpanCategoryDefinition_Def.__bases__:
                bases = list(ns1.TimeSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.TimeSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeScaleEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TimeScaleEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PlaceCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlaceCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.PlaceCategoryDefinition_Def.__bases__:
                bases = list(ns1.PlaceCategoryDefinition_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.PlaceCategoryDefinition_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GenderCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GenderCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CategoryDefinition_Def not in ns1.GenderCategoryDefinition_Def.__bases__:
                bases = list(ns1.GenderCategoryDefinition_Def.__bases__)
                bases.insert(0, ns1.CategoryDefinition_Def)
                ns1.GenderCategoryDefinition_Def.__bases__ = tuple(bases)

            ns1.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SimulatorTimeRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SimulatorTimeRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorTimeRange_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lowerBound = None
                    self._upperBound = None
                    return
            Holder.__name__ = "SimulatorTimeRange_Holder"
            self.pyclass = Holder

    class TargetPriorityPopulation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TargetPriorityPopulation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TargetPriorityPopulation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TargetPopulationDefinition",lazy=True)(pname=(ns,"targetPopulationDefinition"), aname="_targetPopulationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TargetPopulationEnum",lazy=True)(pname=(ns,"targetPopulationEnum"), aname="_targetPopulationEnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfTargetPopulationToPrioritize"), aname="_fractionOfTargetPopulationToPrioritize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"priority"), aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._targetPopulationDefinition = None
                    self._targetPopulationEnum = None
                    self._fractionOfTargetPopulationToPrioritize = None
                    self._priority = None
                    return
            Holder.__name__ = "TargetPriorityPopulation_Holder"
            self.pyclass = Holder

    class ControlStrategyTargetPopulationsAndPrioritization_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ControlStrategyTargetPopulationsAndPrioritization")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ControlStrategyTargetPopulationsAndPrioritization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NamedPrioritizationSchemeEnum",lazy=True)(pname=(ns,"controlStrategyNamedPrioritizationScheme"), aname="_controlStrategyNamedPrioritizationScheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TargetPriorityPopulation",lazy=True)(pname=(ns,"controlStrategyTargetPopulationsAndPrioritization"), aname="_controlStrategyTargetPopulationsAndPrioritization", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlStrategyNamedPrioritizationScheme = None
                    self._controlStrategyTargetPopulationsAndPrioritization = []
                    return
            Holder.__name__ = "ControlStrategyTargetPopulationsAndPrioritization_Holder"
            self.pyclass = Holder

    class NamedPrioritizationSchemeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "NamedPrioritizationSchemeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectiousDiseaseControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectiousDiseaseControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDiseaseControlStrategy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStartTime"), aname="_controlStrategyStartTime", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStopTime"), aname="_controlStrategyStopTime", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"controlStrategyResponseDelay"), aname="_controlStrategyResponseDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"controlStrategyStandDownDelay"), aname="_controlStrategyStandDownDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDiseaseControlStrategy_Def.__bases__:
                bases = list(ns1.InfectiousDiseaseControlStrategy_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDiseaseControlStrategy_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiseaseSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DiseaseSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","DiseaseSurveillanceCapability",lazy=True)(pname=(ns,"diseaseSurveillanceCapability"), aname="_diseaseSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TriggerDefinition_Def not in ns1.DiseaseSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns1.DiseaseSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns1.TriggerDefinition_Def)
                ns1.DiseaseSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns1.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemporalTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TemporalTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TemporalTriggerDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","TimeScaleEnum",lazy=True)(pname=(ns,"timeScale"), aname="_timeScale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","FixedDuration",lazy=True)(pname=(ns,"timeSinceTimeScaleZero"), aname="_timeSinceTimeScaleZero", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TriggerDefinition_Def not in ns1.TemporalTriggerDefinition_Def.__bases__:
                bases = list(ns1.TemporalTriggerDefinition_Def.__bases__)
                bases.insert(0, ns1.TriggerDefinition_Def)
                ns1.TemporalTriggerDefinition_Def.__bases__ = tuple(bases)

            ns1.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TreatmentSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentSurveillanceCapability",lazy=True)(pname=(ns,"treatmentSurveillanceCapability"), aname="_treatmentSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TriggerDefinition_Def not in ns1.TreatmentSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns1.TreatmentSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns1.TriggerDefinition_Def)
                ns1.TreatmentSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns1.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TriggerDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TriggerDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TriggerDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "TriggerDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TargetPopulationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PopulationStratificationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationStratificationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApolloSoftwareTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ApolloSoftwareTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GetVisualizerOutputResourcesResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetVisualizerOutputResourcesResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetVisualizerOutputResourcesResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UrlOutputResource",lazy=True)(pname=(ns,"urlOutputResources"), aname="_urlOutputResources", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._urlOutputResources = []
                    return
            Holder.__name__ = "GetVisualizerOutputResourcesResult_Holder"
            self.pyclass = Holder

    class SyntheticPopulationGenerationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SyntheticPopulationGenerationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SyntheticPopulationGenerationResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UrlOutputResource",lazy=True)(pname=(ns,"syntheticPopulationOutputResource"), aname="_syntheticPopulationOutputResource", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._syntheticPopulationOutputResource = []
                    return
            Holder.__name__ = "SyntheticPopulationGenerationResult_Holder"
            self.pyclass = Holder

    class DiscreteNonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiscreteNonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DiscreteNonparametricProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilityValuePair",lazy=True)(pname=(ns,"probabilityValuePairs"), aname="_probabilityValuePairs", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.DiscreteNonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentContraindication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentContraindication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentContraindication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TargetPopulationDefinition",lazy=True)(pname=(ns,"simulatorReferencablePopulation"), aname="_simulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fractionOfSimulatorReferencablePopulation"), aname="_fractionOfSimulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._simulatorReferencablePopulation = None
                    self._fractionOfSimulatorReferencablePopulation = None
                    return
            Holder.__name__ = "TreatmentContraindication_Holder"
            self.pyclass = Holder

    class ConditionalProbabilityTable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ConditionalProbabilityTable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditionalProbabilityTable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ArrayDimensionsDefinition",lazy=True)(pname=(ns,"axisDefinitions"), aname="_axisDefinitions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"pointProbabilities"), aname="_pointProbabilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"parametricDistribution"), aname="_parametricDistribution", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._axisDefinitions = None
                    self._pointProbabilities = []
                    self._parametricDistribution = []
                    return
            Holder.__name__ = "ConditionalProbabilityTable_Holder"
            self.pyclass = Holder

    class Duration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Duration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Duration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfTime = None
                    return
            Holder.__name__ = "Duration_Holder"
            self.pyclass = Holder

    class FixedDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "FixedDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.FixedDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Duration_Def not in ns1.FixedDuration_Def.__bases__:
                bases = list(ns1.FixedDuration_Def.__bases__)
                bases.insert(0, ns1.Duration_Def)
                ns1.FixedDuration_Def.__bases__ = tuple(bases)

            ns1.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UncertainDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UncertainDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.UncertainDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Duration_Def not in ns1.UncertainDuration_Def.__bases__:
                bases = list(ns1.UncertainDuration_Def.__bases__)
                bases.insert(0, ns1.Duration_Def)
                ns1.UncertainDuration_Def.__bases__ = tuple(bases)

            ns1.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProbabilisticParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ProbabilisticParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilisticParameter_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._probability = None
                    self._probabilityDistribution = None
                    return
            Holder.__name__ = "ProbabilisticParameter_Holder"
            self.pyclass = Holder

    class Treatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Treatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Treatment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfTreatedOrganism"), aname="_speciesOfTreatedOrganism", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numDosesInTreatmentCourse"), aname="_numDosesInTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"durationOfTreatmentCourse"), aname="_durationOfTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentContraindication",lazy=True)(pname=(ns,"treatmentContraindications"), aname="_treatmentContraindications", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Treatment_Def.__bases__:
                bases = list(ns1.Treatment_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Treatment_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BayesianNetwork_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BayesianNetwork")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BayesianNetwork_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","BayesianNetworkStructureType",lazy=True)(pname=(ns,"networkStructure"), aname="_networkStructure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"CPTs"), aname="_CPTs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PrototypicalProbabilityFunction",lazy=True)(pname=(ns,"PPFs"), aname="_PPFs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","GeNIE_XMLType",lazy=True)(pname=(ns,"GeNIE_XML"), aname="_GeNIE_XML", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ProbabilityDistribution_Def not in ns1.BayesianNetwork_Def.__bases__:
                bases = list(ns1.BayesianNetwork_Def.__bases__)
                bases.insert(0, ns1.ProbabilityDistribution_Def)
                ns1.BayesianNetwork_Def.__bases__ = tuple(bases)

            ns1.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TimeDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorTime = None
                    self._dateTime = None
                    return
            Holder.__name__ = "TimeDefinition_Holder"
            self.pyclass = Holder

    class TreatmentPreventableOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentPreventableOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"hostIdentifier"), aname="_hostIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"strainIdentifier"), aname="_strainIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"forTreatmentPreventableOutcome"), aname="_forTreatmentPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostIdentifier = None
                    self._strainIdentifier = None
                    self._forTreatmentPreventableOutcome = None
                    return
            Holder.__name__ = "TreatmentEfficacy_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccinationEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"averageVaccinationEfficacy"), aname="_averageVaccinationEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnAgeRange"), aname="_vaccinationEfficacyConditionedOnAgeRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","VaccinationEfficacyConditionedOnTimeSinceDose",lazy=True)(pname=(ns,"vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyConditionedOnTimeSinceDose_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccinationEfficacyConditionedOnTimeSinceDose")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationEfficacyConditionedOnTimeSinceDose_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfDosesAdministered"), aname="_numberOfDosesAdministered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TimeAxisCategoryLabels",lazy=True)(pname=(ns,"timeIntervalLabelDefinitions"), aname="_timeIntervalLabelDefinitions", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficacyConditionedOnTimeSinceMostRecentDose", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numberOfDosesAdministered = None
                    self._timeIntervalLabelDefinitions = []
                    self._vaccinationEfficacyConditionedOnTimeSinceMostRecentDose = []
                    return
            Holder.__name__ = "VaccinationEfficacyConditionedOnTimeSinceDose_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyInferred_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccinationEfficacyInferred")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyInferred_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","VaccinationEfficacyStudy",lazy=True)(pname=(ns,"inferredFromTheseStudies"), aname="_inferredFromTheseStudies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","BayesianNetwork",lazy=True)(pname=(ns,"vaccinationEfficacyModel"), aname="_vaccinationEfficacyModel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.VaccinationEfficacyInferred_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyInferred_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.VaccinationEfficacyInferred_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyMeasured_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccinationEfficacyMeasured")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.VaccinationEfficacyMeasured_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"measuredEfficacyValue"), aname="_measuredEfficacyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.VaccinationEfficacyMeasured_Def.__bases__:
                bases = list(ns1.VaccinationEfficacyMeasured_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.VaccinationEfficacyMeasured_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyStudy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VaccinationEfficacyStudy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationEfficacyStudy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"vaccinationPreventableOutcome"), aname="_vaccinationPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","VaccinationEfficacyMeasured",lazy=True)(pname=(ns,"vaccinationEfficacyMeasured"), aname="_vaccinationEfficacyMeasured", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSets"), aname="_dataSets", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccinationPreventableOutcome = None
                    self._vaccinationEfficacyMeasured = []
                    self._dataSets = []
                    self._references = []
                    return
            Holder.__name__ = "VaccinationEfficacyStudy_Holder"
            self.pyclass = Holder

    class AntiviralTreatmentEfficacy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AntiviralTreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.AntiviralTreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"efficacy"), aname="_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.TreatmentEfficacy_Def not in ns1.AntiviralTreatmentEfficacy_Def.__bases__:
                bases = list(ns1.AntiviralTreatmentEfficacy_Def.__bases__)
                bases.insert(0, ns1.TreatmentEfficacy_Def)
                ns1.AntiviralTreatmentEfficacy_Def.__bases__ = tuple(bases)

            ns1.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ecosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Ecosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Ecosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","BioticEcosystem",lazy=True)(pname=(ns,"bioticEcosystem"), aname="_bioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystem",lazy=True)(pname=(ns,"abioticEcosystem"), aname="_abioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._bioticEcosystem = None
                    self._abioticEcosystem = None
                    return
            Holder.__name__ = "Ecosystem_Holder"
            self.pyclass = Holder

    class BioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BioticEcosystem_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"communities"), aname="_communities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communities = []
                    return
            Holder.__name__ = "BioticEcosystem_Holder"
            self.pyclass = Holder

    class AbioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AbioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AbioticEcosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"homes"), aname="_homes", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"schools"), aname="_schools", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"workplaces"), aname="_workplaces", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._homes = []
                    self._schools = []
                    self._workplaces = []
                    return
            Holder.__name__ = "AbioticEcosystem_Holder"
            self.pyclass = Holder

    class BayesianNetworkStructureType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BayesianNetworkStructureType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BayesianNetworkStructureType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BayesianNetworkStructureType_Holder"
            self.pyclass = Holder

    class PrototypicalProbabilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PrototypicalProbabilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PrototypicalProbabilityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PrototypicalProbabilityFunction_Holder"
            self.pyclass = Holder

    class GeNIE_XMLType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GeNIE_XMLType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GeNIE_XMLType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theXML"), aname="_theXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theXML = None
                    return
            Holder.__name__ = "GeNIE_XMLType_Holder"
            self.pyclass = Holder

    class TimeAxisCategoryLabels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TimeAxisCategoryLabels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TimeAxisCategoryLabels_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeEarliest"), aname="_simulatorTimeEarliest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeLatest"), aname="_simulatorTimeLatest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._simulatorTimeEarliest = None
                    self._simulatorTimeLatest = None
                    return
            Holder.__name__ = "TimeAxisCategoryLabels_Holder"
            self.pyclass = Holder

    class LocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "LocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.LocationDefinition_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsIncluded"), aname="_locationsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsExcluded"), aname="_locationsExcluded", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._locationsIncluded = []
                    self._locationsExcluded = []
                    return
            Holder.__name__ = "LocationDefinition_Holder"
            self.pyclass = Holder

    class CatalogEntryForApolloLibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CatalogEntryForApolloLibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CatalogEntryForApolloLibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"itemDescription"), aname="_itemDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"itemSource"), aname="_itemSource", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloIndexableItemTypeEnum",lazy=True)(pname=(ns,"itemType"), aname="_itemType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"itemUuid"), aname="_itemUuid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"itemIndexingLabels"), aname="_itemIndexingLabels", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"itemCreationTime"), aname="_itemCreationTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._itemDescription = None
                    self._itemSource = None
                    self._itemType = None
                    self._itemUuid = None
                    self._itemIndexingLabels = []
                    self._itemCreationTime = None
                    return
            Holder.__name__ = "CatalogEntryForApolloLibraryItem_Holder"
            self.pyclass = Holder

    class LibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "LibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.LibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"base_type"), aname="_base_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._base_type = None
                    return
            Holder.__name__ = "LibraryItem_Holder"
            self.pyclass = Holder

    class DecisionAlternative_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DecisionAlternative")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DecisionAlternative_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"singleStrategy"), aname="_singleStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"combinationStrategy"), aname="_combinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SequentialCombinationStrategy"), aname="_SequentialCombinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._singleStrategy = None
                    self._combinationStrategy = None
                    self._SequentialCombinationStrategy = None
                    return
            Holder.__name__ = "DecisionAlternative_Holder"
            self.pyclass = Holder

    class UtilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UtilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.UtilityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lambdaFunction"), aname="_lambdaFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textDescription"), aname="_textDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lambdaFunction = None
                    self._textDescription = None
                    return
            Holder.__name__ = "UtilityFunction_Holder"
            self.pyclass = Holder

    class SensitivityAnalysis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SensitivityAnalysis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SensitivityAnalysis_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysis_Holder"
            self.pyclass = Holder

    class SensitivityAnalysisResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SensitivityAnalysisResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SensitivityAnalysisResult_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysisResult_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseDecisionModel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectiousDiseaseDecisionModel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDiseaseDecisionModel_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"controlStrategies"), aname="_controlStrategies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"simulatorConfiguration "), aname="_simulatorConfiguration_", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UtilityFunction",lazy=True)(pname=(ns,"utilityFunction"), aname="_utilityFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDiseaseDecisionModel_Def.__bases__:
                bases = list(ns1.InfectiousDiseaseDecisionModel_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDiseaseDecisionModel_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DecisionAnalysis_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DecisionAnalysis")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DecisionAnalysis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDiseaseDecisionModel",lazy=True)(pname=(ns,"decisionModel"), aname="_decisionModel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","BaseCaseResult",lazy=True)(pname=(ns,"baseCaseResult "), aname="_baseCaseResult_", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","SensitivityAnalysis",lazy=True)(pname=(ns,"sensitivityAnalyses"), aname="_sensitivityAnalyses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.DecisionAnalysis_Def.__bases__:
                bases = list(ns1.DecisionAnalysis_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.DecisionAnalysis_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExpectedUtility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ExpectedUtility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ExpectedUtility_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ExpectedUtility_Holder"
            self.pyclass = Holder

    class BaseCaseResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BaseCaseResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.BaseCaseResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","DecisionAlternative",lazy=True)(pname=(ns,"decisionAlternatives"), aname="_decisionAlternatives", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"expectedUtilities"), aname="_expectedUtilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._decisionAlternatives = []
                    self._expectedUtilities = []
                    return
            Holder.__name__ = "BaseCaseResult_Holder"
            self.pyclass = Holder

    class CuratedLibraryItemContainer_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CuratedLibraryItemContainer")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CuratedLibraryItemContainer_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","CatalogEntryForApolloLibraryItem",lazy=True)(pname=(ns,"curatedLibraryItem"), aname="_curatedLibraryItem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloIndexableItem",lazy=True)(pname=(ns,"apolloIndexableItem"), aname="_apolloIndexableItem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._curatedLibraryItem = None
                    self._apolloIndexableItem = None
                    return
            Holder.__name__ = "CuratedLibraryItemContainer_Holder"
            self.pyclass = Holder

    class ApolloIndexableItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ApolloIndexableItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ApolloIndexableItem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ApolloIndexableItem_Holder"
            self.pyclass = Holder

    class PathogenTaxonID_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PathogenTaxonID")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiseaseOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PlaceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectionAcquisitionFromContaminatedThing_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectionAcquisitionFromContaminatedThing")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.InfectionAcquisitionFromContaminatedThing_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemType"), aname="_abioticEcosystemType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemType = None
                    self._transmissionProbability = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromContaminatedThing_Holder"
            self.pyclass = Holder

    class InfectionAcquisitionFromInfectiousHost_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectionAcquisitionFromInfectiousHost")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.InfectionAcquisitionFromInfectiousHost_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostTaxonId"), aname="_infectiousHostTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"latentPeriodDuration"), aname="_latentPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"infectiousPeriodDuration"), aname="_infectiousPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"basicReproductionNumber"), aname="_basicReproductionNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Rate",lazy=True)(pname=(ns,"beta"), aname="_beta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousHostTaxonId = None
                    self._latentPeriodDuration = None
                    self._infectiousPeriodDuration = None
                    self._basicReproductionNumber = None
                    self._beta = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromInfectiousHost_Holder"
            self.pyclass = Holder

    class GesParametersForContactAndTransmission_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GesParametersForContactAndTransmission")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GesParametersForContactAndTransmission_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","SeasonalityFunctionParameters",lazy=True)(pname=(ns,"seasonalityFunctionParameters"), aname="_seasonalityFunctionParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","GesInfectiousnessParameterSet",lazy=True)(pname=(ns,"infectiousnessParameterSet"), aname="_infectiousnessParameterSet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ContactModelForSetting",lazy=True)(pname=(ns,"contactModelsForSettings"), aname="_contactModelsForSettings", minOccurs=6, maxOccurs=6, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._seasonalityFunctionParameters = None
                    self._infectiousnessParameterSet = None
                    self._contactModelsForSettings = []
                    return
            Holder.__name__ = "GesParametersForContactAndTransmission_Holder"
            self.pyclass = Holder

    class GesInfectiousnessParameterSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GesInfectiousnessParameterSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GesInfectiousnessParameterSet_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ContinuousParametricProbabilityDistribution",lazy=True)(pname=(ns,"infectiousnessProfile"), aname="_infectiousnessProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"treat_inf"), aname="_treat_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"prophylaxis_inf"), aname="_prophylaxis_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"vacc_inf"), aname="_vacc_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"relative_inf_symptomatic_multiplier"), aname="_relative_inf_symptomatic_multiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousnessProfile = None
                    self._treat_inf = None
                    self._prophylaxis_inf = None
                    self._vacc_inf = None
                    self._relative_inf_symptomatic_multiplier = None
                    return
            Holder.__name__ = "GesInfectiousnessParameterSet_Holder"
            self.pyclass = Holder

    class ContactModelForSetting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContactModelForSetting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ContactModelForSetting_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","SpatialKernelFunctionParameters",lazy=True)(pname=(ns,"spatialKernelParametersForSetting"), aname="_spatialKernelParametersForSetting", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probSymptomaticInfectionClinicallyDetected"), aname="_probSymptomaticInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticInfectionMultiplier"), aname="_symptomaticInfectionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probSevereInfectionClinicallyDetected"), aname="_probSevereInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._spatialKernelParametersForSetting = None
                    self._probSymptomaticInfectionClinicallyDetected = None
                    self._symptomaticInfectionMultiplier = None
                    self._probSevereInfectionClinicallyDetected = None
                    return
            Holder.__name__ = "ContactModelForSetting_Holder"
            self.pyclass = Holder

    class ContactModelForCommunity_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContactModelForCommunity")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContactModelForCommunity_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Rate",lazy=True)(pname=(ns,"r_community"), aname="_r_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"c_community"), aname="_c_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_community"), aname="_q_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContactModelForSetting_Def not in ns1.ContactModelForCommunity_Def.__bases__:
                bases = list(ns1.ContactModelForCommunity_Def.__bases__)
                bases.insert(0, ns1.ContactModelForSetting_Def)
                ns1.ContactModelForCommunity_Def.__bases__ = tuple(bases)

            ns1.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForHousehold_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContactModelForHousehold")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContactModelForHousehold_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Rate",lazy=True)(pname=(ns,"r_household"), aname="_r_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"c_household"), aname="_c_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_household"), aname="_q_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContactModelForSetting_Def not in ns1.ContactModelForHousehold_Def.__bases__:
                bases = list(ns1.ContactModelForHousehold_Def.__bases__)
                bases.insert(0, ns1.ContactModelForSetting_Def)
                ns1.ContactModelForHousehold_Def.__bases__ = tuple(bases)

            ns1.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForPlace_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContactModelForPlace")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContactModelForPlace_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"placeType"), aname="_placeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Rate",lazy=True)(pname=(ns,"r_place"), aname="_r_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","WithinGroupTransmissionProbability",lazy=True)(pname=(ns,"P_Pn_group"), aname="_P_Pn_group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probSymptomaticIndividualAbsent"), aname="_probSymptomaticIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticAbsenteeMultiplier"), aname="_symptomaticAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probSeverelyInfectedIndividualAbsent"), aname="_probSeverelyInfectedIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"severelyInfectedAbsenteeMultiplier"), aname="_severelyInfectedAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"q_social"), aname="_q_social", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContactModelForSetting_Def not in ns1.ContactModelForPlace_Def.__bases__:
                bases = list(ns1.ContactModelForPlace_Def.__bases__)
                bases.insert(0, ns1.ContactModelForSetting_Def)
                ns1.ContactModelForPlace_Def.__bases__ = tuple(bases)

            ns1.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RunSimulationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunSimulationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSimulationMessage_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"simulatorIdentification"), aname="_simulatorIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","SimulatorTimeSpecification",lazy=True)(pname=(ns,"simulatorTimeSpecification"), aname="_simulatorTimeSpecification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"infectiousDiseaseScenario"), aname="_infectiousDiseaseScenario", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorIdentification = None
                    self._authentication = None
                    self._simulatorTimeSpecification = None
                    self._infectiousDiseaseScenario = None
                    return
            Holder.__name__ = "RunSimulationMessage_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseScenario_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectiousDiseaseScenario")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDiseaseScenario_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"scenarioDate"), aname="_scenarioDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDisease",lazy=True)(pname=(ns,"diseases"), aname="_diseases", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Contamination",lazy=True)(pname=(ns,"contaminations"), aname="_contaminations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"populationInfectionAndImmunityCensuses"), aname="_populationInfectionAndImmunityCensuses", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ContaminatedThingCensus",lazy=True)(pname=(ns,"contaminatedThingCensuses"), aname="_contaminatedThingCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonApolloParameter",lazy=True)(pname=(ns,"nonApolloParameters"), aname="_nonApolloParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDiseaseScenario_Def.__bases__:
                bases = list(ns1.InfectiousDiseaseScenario_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDiseaseScenario_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CompartmentalModelPopulationAndEnvironmentCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CompartmentalModelPopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CompartmentalModelPopulationAndEnvironmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"bioticEcosystemParts"), aname="_bioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemPartCensus",lazy=True)(pname=(ns,"abioticEcosystemParts"), aname="_abioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bioticEcosystemParts = []
                    self._abioticEcosystemParts = []
                    return
            Holder.__name__ = "CompartmentalModelPopulationAndEnvironmentCensus_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationTreatmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationTreatmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"treatmentCensusData"), aname="_treatmentCensusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationTreatmentCensus_Def.__bases__:
                bases = list(ns1.PopulationTreatmentCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationTreatmentCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminationAcquisition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContaminationAcquisition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ContaminationAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonId"), aname="_pathogenTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostSource"), aname="_infectiousHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contaminatedSource"), aname="_contaminatedSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"contaminationProbability"), aname="_contaminationProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._pathogenTaxonId = None
                    self._infectiousHostSource = None
                    self._contaminatedSource = None
                    self._contaminationProbability = None
                    return
            Holder.__name__ = "ContaminationAcquisition_Holder"
            self.pyclass = Holder

    class PopulationCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationCensusDescription_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"locations"), aname="_locations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationSpecies = None
                    self._characteristics = []
                    self._locations = []
                    return
            Holder.__name__ = "PopulationCensusDescription_Holder"
            self.pyclass = Holder

    class AbioticEcosystemElementCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AbioticEcosystemElementCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AbioticEcosystemElementCensusDescription_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticElementID"), aname="_abioticElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticElementID = None
                    self._characteristics = []
                    return
            Holder.__name__ = "AbioticEcosystemElementCensusDescription_Holder"
            self.pyclass = Holder

    class ContaminatedThingCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContaminatedThingCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContaminatedThingCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"kindOfThing"), aname="_kindOfThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.ContaminatedThingCensus_Def.__bases__:
                bases = list(ns1.ContaminatedThingCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.ContaminatedThingCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminatedThingCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContaminatedThingCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContaminatedThingCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fractionContaminated"), aname="_fractionContaminated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"exceptionSublocations"), aname="_exceptionSublocations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.CensusData_Def not in ns1.ContaminatedThingCensusData_Def.__bases__:
                bases = list(ns1.ContaminatedThingCensusData_Def.__bases__)
                bases.insert(0, ns1.CensusData_Def)
                ns1.ContaminatedThingCensusData_Def.__bases__ = tuple(bases)

            ns1.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AbioticEcosystemPartCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AbioticEcosystemPartCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AbioticEcosystemPartCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticEcosystemElementID"), aname="_abioticEcosystemElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElementID = None
                    return
            Holder.__name__ = "AbioticEcosystemPartCensus_Holder"
            self.pyclass = Holder

    class PopulationAndEnvironmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PopulationAndEnvironmentCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"nameOfAdministativeUnit"), aname="_nameOfAdministativeUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.Census_Def not in ns1.PopulationAndEnvironmentCensus_Def.__bases__:
                bases = list(ns1.PopulationAndEnvironmentCensus_Def.__bases__)
                bases.insert(0, ns1.Census_Def)
                ns1.PopulationAndEnvironmentCensus_Def.__bases__ = tuple(bases)

            ns1.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDisease_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "InfectiousDisease")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.InfectiousDisease_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"diseaseId"), aname="_diseaseId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesWithDisease"), aname="_speciesWithDisease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogen"), aname="_causalPathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","DiseaseOutcomeWithProbability",lazy=True)(pname=(ns,"diseaseOutcomesWithProbabilities"), aname="_diseaseOutcomesWithProbabilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.InfectiousDisease_Def.__bases__:
                bases = list(ns1.InfectiousDisease_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.InfectiousDisease_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FractionOfThingContaminated_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "FractionOfThingContaminated")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.FractionOfThingContaminated_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Fraction",lazy=True)(pname=(ns,"fraction"), aname="_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._fraction = None
                    return
            Holder.__name__ = "FractionOfThingContaminated_Holder"
            self.pyclass = Holder

    class ApolloPathogenCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ApolloPathogenCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ApolloPathogenCode_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"ncbiTaxonId"), aname="_ncbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"cladeName"), aname="_cladeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ncbiTaxonId = None
                    self._cladeName = None
                    return
            Holder.__name__ = "ApolloPathogenCode_Holder"
            self.pyclass = Holder

    class NcbiTaxonId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "NcbiTaxonId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vaccineOntologyId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "vaccineOntologyId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProbabilityValuePair_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ProbabilityValuePair")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilityValuePair_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._probability = None
                    return
            Holder.__name__ = "ProbabilityValuePair_Holder"
            self.pyclass = Holder

    class ProbabilityDistribution_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilityDistribution_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ProbabilityDistribution_Holder"
            self.pyclass = Holder

    class UnconditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UnconditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.UnconditionalProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ProbabilityDistribution_Def not in ns1.UnconditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns1.UnconditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ProbabilityDistribution_Def)
                ns1.UnconditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NonparametricDiscreteProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "NonparametricDiscreteProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.NonparametricDiscreteProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__:
                bases = list(ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.NonparametricDiscreteProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.UnconditionalProbabilityDistribution_Def not in ns1.ParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.ParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.UnconditionalProbabilityDistribution_Def)
                ns1.ParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiscreteParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiscreteParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.DiscreteParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ParametricProbabilityDistribution_Def not in ns1.DiscreteParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.DiscreteParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ParametricProbabilityDistribution_Def)
                ns1.DiscreteParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContinuousParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContinuousParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ParametricProbabilityDistribution_Def not in ns1.ContinuousParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns1.ContinuousParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ParametricProbabilityDistribution_Def)
                ns1.ContinuousParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LogNormalDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "LogNormalDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.LogNormalDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.LogNormalDistribution_Def.__bases__:
                bases = list(ns1.LogNormalDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.LogNormalDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GammaDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GammaDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.GammaDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"theta-scale"), aname="_theta_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.GammaDistribution_Def.__bases__:
                bases = list(ns1.GammaDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.GammaDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WeibullDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "WeibullDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.WeibullDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"lambda-scale"), aname="_lambda_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.WeibullDistribution_Def.__bases__:
                bases = list(ns1.WeibullDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.WeibullDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousUniformDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ContinuousUniformDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ContinuousUniformDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"minimumValue"), aname="_minimumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"maximumValue"), aname="_maximumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ContinuousParametricProbabilityDistribution_Def not in ns1.ContinuousUniformDistribution_Def.__bases__:
                bases = list(ns1.ContinuousUniformDistribution_Def.__bases__)
                bases.insert(0, ns1.ContinuousParametricProbabilityDistribution_Def)
                ns1.ContinuousUniformDistribution_Def.__bases__ = tuple(bases)

            ns1.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ConditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ConditionalProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditioningVariable",lazy=True)(pname=(ns,"firstConditioningVariable"), aname="_firstConditioningVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ProbabilityDistribution_Def not in ns1.ConditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns1.ConditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns1.ProbabilityDistribution_Def)
                ns1.ConditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns1.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditioningVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ConditioningVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditioningVariable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditioningVariableEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Category",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._categories = []
                    return
            Holder.__name__ = "ConditioningVariable_Holder"
            self.pyclass = Holder

    class Category_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Category")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Category_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditioningVariable",lazy=True)(pname=(ns,"conditioningVariable"), aname="_conditioningVariable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditioningVariable = None
                    return
            Holder.__name__ = "Category_Holder"
            self.pyclass = Holder

    class VariableCategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "VariableCategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VariableCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","CategoryDefinition",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = []
                    return
            Holder.__name__ = "VariableCategoryDefinition_Holder"
            self.pyclass = Holder

    class CategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.CategoryDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CategoryDefinition_Holder"
            self.pyclass = Holder

    class AbioticEcosystemEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AbioticEcosystemEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConditioningVariableEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ConditioningVariableEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApolloIndexableItemTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ApolloIndexableItemTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfMeasureEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "UnitOfMeasureEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeWithProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiseaseOutcomeWithProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DiseaseOutcomeWithProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseOutcome = None
                    self._probability = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithProbability_Holder"
            self.pyclass = Holder

    class SeasonalityFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SeasonalityFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SeasonalityFunctionParameters_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"maximumSeasonalLatitude"), aname="_maximumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumSeasonalLatitude"), aname="_minimumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"seasonalTemporalOffset"), aname="_seasonalTemporalOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maximumSeasonalLatitude = None
                    self._minimumSeasonalLatitude = None
                    self._seasonalTemporalOffset = None
                    return
            Holder.__name__ = "SeasonalityFunctionParameters_Holder"
            self.pyclass = Holder

    class SpatialKernelFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "SpatialKernelFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SpatialKernelFunctionParameters_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a0"), aname="_a0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a1"), aname="_a1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b0"), aname="_b0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b1"), aname="_b1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"c1"), aname="_c1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"cutoff"), aname="_cutoff", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._a0 = None
                    self._a1 = None
                    self._b0 = None
                    self._b1 = None
                    self._c1 = None
                    self._cutoff = None
                    return
            Holder.__name__ = "SpatialKernelFunctionParameters_Holder"
            self.pyclass = Holder

    class GetScenarioLocationCodesSupportedBySimulatorResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetScenarioLocationCodesSupportedBySimulatorResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetScenarioLocationCodesSupportedBySimulatorResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"locationCodes"), aname="_locationCodes", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._locationCodes = []
                    return
            Holder.__name__ = "GetScenarioLocationCodesSupportedBySimulatorResult_Holder"
            self.pyclass = Holder

    class GetPopulationAndEnvironmentCensusResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetPopulationAndEnvironmentCensusResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetPopulationAndEnvironmentCensusResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"populationAndEnvironmentCensus"), aname="_populationAndEnvironmentCensus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._populationAndEnvironmentCensus = None
                    return
            Holder.__name__ = "GetPopulationAndEnvironmentCensusResult_Holder"
            self.pyclass = Holder

    class GetConfigurationFileForSimulationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetConfigurationFileForSimulationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetConfigurationFileForSimulationResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFile"), aname="_configurationFile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"configurationFileInHtmlFormat"), aname="_configurationFileInHtmlFormat", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._configurationFile = None
                    self._configurationFileInHtmlFormat = None
                    return
            Holder.__name__ = "GetConfigurationFileForSimulationResult_Holder"
            self.pyclass = Holder

    class AddLibraryItemResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AddLibraryItemResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AddLibraryItemResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"uuid"), aname="_uuid", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._uuid = None
                    return
            Holder.__name__ = "AddLibraryItemResult_Holder"
            self.pyclass = Holder

    class GetLibraryItemResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetLibraryItemResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetLibraryItemResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","CuratedLibraryItemContainer",lazy=True)(pname=(ns,"curatedLibraryItemContainer"), aname="_curatedLibraryItemContainer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._curatedLibraryItemContainer = None
                    return
            Holder.__name__ = "GetLibraryItemResult_Holder"
            self.pyclass = Holder

    class GetLibraryItemUuidsResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "GetLibraryItemUuidsResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetLibraryItemUuidsResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"Uuids"), aname="_Uuids", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._Uuids = []
                    return
            Holder.__name__ = "GetLibraryItemUuidsResult_Holder"
            self.pyclass = Holder

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Location_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloLocationCode",lazy=True)(pname=(ns,"apolloLocationCode"), aname="_apolloLocationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","LocationDefinition",lazy=True)(pname=(ns,"locationDefinition"), aname="_locationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apolloLocationCode = None
                    self._locationDefinition = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class CensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CensusData_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.CensusData_Def.__bases__:
                bases = list(ns1.CensusData_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.CensusData_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Census_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Census")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.Census_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"referenceDate"), aname="_referenceDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ApolloIndexableItem_Def not in ns1.Census_Def.__bases__:
                bases = list(ns1.Census_Def.__bases__)
                bases.insert(0, ns1.ApolloIndexableItem_Def)
                ns1.Census_Def.__bases__ = tuple(bases)

            ns1.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RunSyntheticPopulationGenerationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunSyntheticPopulationGenerationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunSyntheticPopulationGenerationMessage_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "RunSyntheticPopulationGenerationMessage_Holder"
            self.pyclass = Holder

    class Population_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Population")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Population_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"census"), aname="_census", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._census = None
                    return
            Holder.__name__ = "Population_Holder"
            self.pyclass = Holder

    class Individual_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Individual")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Individual_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditionalIndividualBehavior",lazy=True)(pname=(ns,"conditionalBehaviors"), aname="_conditionalBehaviors", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._conditionalBehaviors = []
                    return
            Holder.__name__ = "Individual_Holder"
            self.pyclass = Holder

    class ConditionalIndividualBehavior_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ConditionalIndividualBehavior")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ConditionalIndividualBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","BehaviorEnum",lazy=True)(pname=(ns,"behavior"), aname="_behavior", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"conditionalProbability"), aname="_conditionalProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._behavior = None
                    self._conditionalProbability = None
                    return
            Holder.__name__ = "ConditionalIndividualBehavior_Holder"
            self.pyclass = Holder

    class BehaviorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BehaviorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceClosureControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "PlaceClosureControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.PlaceClosureControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","PlaceEnum",lazy=True)(pname=(ns,"placeClass"), aname="_placeClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"closeIndividualPlacesIndependently"), aname="_closeIndividualPlacesIndependently", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"closurePeriod"), aname="_closurePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"communityTransmissionMultiplier"), aname="_communityTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.PlaceClosureControlStrategy_Def.__bases__:
                bases = list(ns1.PlaceClosureControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.PlaceClosureControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseQuarantineControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "CaseQuarantineControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.CaseQuarantineControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"quarantinePeriod"), aname="_quarantinePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"schoolTransmissionMultiplier"), aname="_schoolTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"workplaceTransmissionMultiplier"), aname="_workplaceTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.CaseQuarantineControlStrategy_Def.__bases__:
                bases = list(ns1.CaseQuarantineControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.CaseQuarantineControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BorderControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "BorderControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.BorderControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probabilityEntryDenied"), aname="_probabilityEntryDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probabilityExitDenied"), aname="_probabilityExitDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.BorderControlStrategy_Def.__bases__:
                bases = list(ns1.BorderControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.BorderControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TravelRestrictionControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TravelRestrictionControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.TravelRestrictionControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","NonNegativeDouble",lazy=True)(pname=(ns,"maximumTravelDistanceInKm"), aname="_maximumTravelDistanceInKm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.InfectiousDiseaseControlStrategy_Def not in ns1.TravelRestrictionControlStrategy_Def.__bases__:
                bases = list(ns1.TravelRestrictionControlStrategy_Def.__bases__)
                bases.insert(0, ns1.InfectiousDiseaseControlStrategy_Def)
                ns1.TravelRestrictionControlStrategy_Def.__bases__ = tuple(bases)

            ns1.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "DiseaseSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.DiseaseSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfCase"), aname="_speciesOfCase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"caseDefinition"), aname="_caseDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"sensitivityOfCaseDetection"), aname="_sensitivityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"specificityOfCaseDetection"), aname="_specificityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"timeDelayOfCaseDetection"), aname="_timeDelayOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._pathogen = None
                    self._speciesOfCase = None
                    self._caseDefinition = None
                    self._sensitivityOfCaseDetection = None
                    self._specificityOfCaseDetection = None
                    self._timeDelayOfCaseDetection = None
                    return
            Holder.__name__ = "DiseaseSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","IndividualTreatmentEnum",lazy=True)(pname=(ns,"treatment"), aname="_treatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"sensitivityOfTreatmentDetection"), aname="_sensitivityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"specificityOfTreatmentDetection"), aname="_specificityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Duration",lazy=True)(pname=(ns,"timeDelayOfTreatmentDetection"), aname="_timeDelayOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._treatment = None
                    self._sensitivityOfTreatmentDetection = None
                    self._specificityOfTreatmentDetection = None
                    self._timeDelayOfTreatmentDetection = None
                    return
            Holder.__name__ = "TreatmentSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSystemLogistics_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TreatmentSystemLogistics")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TreatmentSystemLogistics_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"supplySchedulePerDay"), aname="_supplySchedulePerDay", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"supplyScheduleUnits"), aname="_supplyScheduleUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"administrationCapacityPerDay"), aname="_administrationCapacityPerDay", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"administrationCapacityUnits"), aname="_administrationCapacityUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._location = None
                    self._supplySchedulePerDay = []
                    self._supplyScheduleUnits = None
                    self._administrationCapacityPerDay = []
                    self._administrationCapacityUnits = None
                    return
            Holder.__name__ = "TreatmentSystemLogistics_Holder"
            self.pyclass = Holder

    class Rate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Rate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Rate_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"numeratorUnitOfMeasure"), aname="_numeratorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"denominatorUnitOfMeasure"), aname="_denominatorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numeratorUnitOfMeasure = None
                    self._denominatorUnitOfMeasure = None
                    self._value = None
                    self._probabilityDistribution = None
                    return
            Holder.__name__ = "Rate_Holder"
            self.pyclass = Holder

    class NonApolloParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "NonApolloParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.NonApolloParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parameterName"), aname="_parameterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"parameterValue"), aname="_parameterValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._parameterName = None
                    self._parameterValue = None
                    return
            Holder.__name__ = "NonApolloParameter_Holder"
            self.pyclass = Holder

    class WithinGroupTransmissionProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "WithinGroupTransmissionProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.WithinGroupTransmissionProbability_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"groupType"), aname="_groupType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupType = None
                    self._probability = None
                    return
            Holder.__name__ = "WithinGroupTransmissionProbability_Holder"
            self.pyclass = Holder

    class OperatorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "OperatorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Role_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "Role")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Role_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_run"), aname="_can_run", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_view_cached_results"), aname="_can_view_cached_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareIdentification = None
                    self._can_run = None
                    self._can_view_cached_results = None
                    return
            Holder.__name__ = "Role_Holder"
            self.pyclass = Holder

    class ServiceRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ServiceRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceRecord_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "ServiceRecord_Holder"
            self.pyclass = Holder

    class ServiceRegistrationRecord_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "ServiceRegistrationRecord")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns1.ServiceRegistrationRecord_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns1.ServiceRecord_Def not in ns1.ServiceRegistrationRecord_Def.__bases__:
                bases = list(ns1.ServiceRegistrationRecord_Def.__bases__)
                bases.insert(0, ns1.ServiceRecord_Def)
                ns1.ServiceRegistrationRecord_Def.__bases__ = tuple(bases)

            ns1.ServiceRecord_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AaaDummyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "AaaDummyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AaaDummyType_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","TreatmentEfficacy",lazy=True)(pname=(ns,"elementIWantToScreenSnapWithoutArrows"), aname="_elementIWantToScreenSnapWithoutArrows", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._elementIWantToScreenSnapWithoutArrows = None
                    return
            Holder.__name__ = "AaaDummyType_Holder"
            self.pyclass = Holder

    class RunIdentificationAndLabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "RunIdentificationAndLabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunIdentificationAndLabel_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runLabel"), aname="_runLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._runLabel = None
                    return
            Holder.__name__ = "RunIdentificationAndLabel_Holder"
            self.pyclass = Holder

    class TerminateRunRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TerminateRunRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TerminateRunRequest_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v2_0_2/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._authentication = None
                    return
            Holder.__name__ = "TerminateRunRequest_Holder"
            self.pyclass = Holder

    class TerminteRunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v2_0_2/"
        type = (schema, "TerminteRunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.TerminteRunResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v2_0_2/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "TerminteRunResult_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://types.apollo.pitt.edu/v2_0_2/)
