################################################## 
# VisualizerService_services_types.py 
# generated by ZSI.generate.wsdl2python
##################################################


import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED

##############################
# targetNamespace
# http://service.apollo.pitt.edu/visualizerservice/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/visualizerservice/"

    class run_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "run"
        schema = "http://service.apollo.pitt.edu/visualizerservice/"
        def __init__(self, **kw):
            ns = ns0.run_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","VisualizerConfiguration",lazy=True)(pname="visualizerConfiguration", aname="_visualizerConfiguration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/","run")
            kw["aname"] = "_run"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerConfiguration = None
                    return
            Holder.__name__ = "run_Holder"
            self.pyclass = Holder

    class runResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/"
        def __init__(self, **kw):
            ns = ns0.runResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","RunId",lazy=True)(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","VisulaizerResultResource",lazy=True)(pname="visualizerResultResource", aname="_visualizerResultResource", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/","runResponse")
            kw["aname"] = "_runResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._visualizerResultResource = []
                    return
            Holder.__name__ = "runResponse_Holder"
            self.pyclass = Holder

    class getRunStatus_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatus"
        schema = "http://service.apollo.pitt.edu/visualizerservice/"
        def __init__(self, **kw):
            ns = ns0.getRunStatus_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","RunId",lazy=True)(pname="runId", aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/","getRunStatus")
            kw["aname"] = "_getRunStatus"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    return
            Holder.__name__ = "getRunStatus_Holder"
            self.pyclass = Holder

    class getRunStatusResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "getRunStatusResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/"
        def __init__(self, **kw):
            ns = ns0.getRunStatusResponse_Dec.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","RunStatus",lazy=True)(pname="runStatus", aname="_runStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/","getRunStatusResponse")
            kw["aname"] = "_getRunStatusResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runStatus = None
                    return
            Holder.__name__ = "getRunStatusResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/visualizerservice/)

##############################
# targetNamespace
# http://types.apollo.pitt.edu/
##############################

class ns1:
    targetNamespace = "http://types.apollo.pitt.edu/"

    class Probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "Probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class ProbabilityArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "ProbabilityArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ProbabilityArray_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = []
                    return
            Holder.__name__ = "ProbabilityArray_Holder"
            self.pyclass = Holder

    class PositiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "PositiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class NonNegativeDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "NonNegativeDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class TimeStepUnit_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "TimeStepUnit")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RunStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "RunStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RunStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "RunStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunStatus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","RunStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "RunStatus_Holder"
            self.pyclass = Holder

    class AgeRange_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "AgeRange")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class Gender_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "Gender")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SupportedPopulationLocation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "SupportedPopulationLocation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SupportedPopulationLocation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"populationLocation"), aname="_populationLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"populationLocationDescription"), aname="_populationLocationDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationLocation = None
                    self._populationLocationDescription = None
                    return
            Holder.__name__ = "SupportedPopulationLocation_Holder"
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Authentication_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterId"), aname="_requesterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterPassword"), aname="_requesterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterId = None
                    self._requesterPassword = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class VisualizationOptions_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "VisualizationOptions")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisualizationOptions_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"outputFormat"), aname="_outputFormat", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._location = None
                    self._outputFormat = None
                    return
            Holder.__name__ = "VisualizationOptions_Holder"
            self.pyclass = Holder

    class MovieFormat_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "MovieFormat")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class VisualizerIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "VisualizerIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisualizerIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"visualizerDeveloper"), aname="_visualizerDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"visualizerName"), aname="_visualizerName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"visualizerVersion"), aname="_visualizerVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerDeveloper = None
                    self._visualizerName = None
                    self._visualizerVersion = None
                    return
            Holder.__name__ = "VisualizerIdentification_Holder"
            self.pyclass = Holder

    class VisualizerConfiguration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "VisualizerConfiguration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisualizerConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","VisualizerIdentification",lazy=True)(pname=(ns,"visualizerIdentification"), aname="_visualizerIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","VisualizationOptions",lazy=True)(pname=(ns,"visualizationOptions"), aname="_visualizationOptions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerIdentification = None
                    self._authentication = None
                    self._visualizationOptions = None
                    return
            Holder.__name__ = "VisualizerConfiguration_Holder"
            self.pyclass = Holder

    class RunId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "RunId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ServiceRegistrationRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "ServiceRegistrationRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceRegistrationRecord_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","ServiceRecord",lazy=True)(pname=(ns,"serviceRecord"), aname="_serviceRecord", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._authentication = None
                    self._url = None
                    self._serviceRecord = None
                    return
            Holder.__name__ = "ServiceRegistrationRecord_Holder"
            self.pyclass = Holder

    class ServiceRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "ServiceRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.ServiceRecord_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","SimulatorIdentification",lazy=True)(pname=(ns,"simulatorIdentification"), aname="_simulatorIdentification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","VisualizerIdentification",lazy=True)(pname=(ns,"visualizerIdentification"), aname="_visualizerIdentification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorIdentification = None
                    self._visualizerIdentification = None
                    return
            Holder.__name__ = "ServiceRecord_Holder"
            self.pyclass = Holder

    class SimulatorIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "SimulatorIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"simulatorDeveloper"), aname="_simulatorDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"simulatorName"), aname="_simulatorName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"simulatorVersion"), aname="_simulatorVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorDeveloper = None
                    self._simulatorName = None
                    self._simulatorVersion = None
                    return
            Holder.__name__ = "SimulatorIdentification_Holder"
            self.pyclass = Holder

    class SimulatorTimeSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "SimulatorTimeSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorTimeSpecification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","TimeStepUnit",lazy=True)(pname=(ns,"timeStepUnit"), aname="_timeStepUnit", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","PositiveDouble",lazy=True)(pname=(ns,"timeStepValue"), aname="_timeStepValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"runLength"), aname="_runLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._timeStepUnit = None
                    self._timeStepValue = None
                    self._runLength = None
                    return
            Holder.__name__ = "SimulatorTimeSpecification_Holder"
            self.pyclass = Holder

    class AntiviralControlMeasure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "AntiviralControlMeasure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.AntiviralControlMeasure_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"antiviralCmCompliance"), aname="_antiviralCmCompliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"antiviralSupplySchedule"), aname="_antiviralSupplySchedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"antiviralAdminSchedule"), aname="_antiviralAdminSchedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"antiviralEfficacy"), aname="_antiviralEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"antiviralEfficacyDelay"), aname="_antiviralEfficacyDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._antiviralCmCompliance = None
                    self._antiviralSupplySchedule = []
                    self._antiviralAdminSchedule = []
                    self._antiviralEfficacy = None
                    self._antiviralEfficacyDelay = None
                    return
            Holder.__name__ = "AntiviralControlMeasure_Holder"
            self.pyclass = Holder

    class VaccinationControlMeasure_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "VaccinationControlMeasure")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VaccinationControlMeasure_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"vaccineCmCompliance"), aname="_vaccineCmCompliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"vaccineSupplySchedule"), aname="_vaccineSupplySchedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"vaccinationAdminSchedule"), aname="_vaccinationAdminSchedule", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"vaccineEfficacy"), aname="_vaccineEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"vaccineEfficacyDelay"), aname="_vaccineEfficacyDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._vaccineCmCompliance = None
                    self._vaccineSupplySchedule = []
                    self._vaccinationAdminSchedule = []
                    self._vaccineEfficacy = None
                    self._vaccineEfficacyDelay = None
                    return
            Holder.__name__ = "VaccinationControlMeasure_Holder"
            self.pyclass = Holder

    class Disease_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "Disease")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.Disease_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"diseaseName"), aname="_diseaseName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"infectiousPeriod"), aname="_infectiousPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"latentPeriod"), aname="_latentPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","NonNegativeDouble",lazy=True)(pname=(ns,"reproductionNumber"), aname="_reproductionNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Probability",lazy=True)(pname=(ns,"asymptomaticInfectionFraction"), aname="_asymptomaticInfectionFraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseName = None
                    self._infectiousPeriod = None
                    self._latentPeriod = None
                    self._reproductionNumber = None
                    self._asymptomaticInfectionFraction = None
                    return
            Holder.__name__ = "Disease_Holder"
            self.pyclass = Holder

    class PopulationDiseaseState_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "PopulationDiseaseState")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.PopulationDiseaseState_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"diseaseState"), aname="_diseaseState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"popCount"), aname="_popCount", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseState = None
                    self._popCount = None
                    return
            Holder.__name__ = "PopulationDiseaseState_Holder"
            self.pyclass = Holder

    class SimulatedPopulation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "SimulatedPopulation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatedPopulation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"populationLocation"), aname="_populationLocation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Gender",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","AgeRange",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","PopulationDiseaseState",lazy=True)(pname=(ns,"populationDiseaseState"), aname="_populationDiseaseState", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","SimulatedPopulation",lazy=True)(pname=(ns,"subpopulation"), aname="_subpopulation", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationLocation = None
                    self._gender = None
                    self._ageRange = None
                    self._populationDiseaseState = []
                    self._subpopulation = []
                    return
            Holder.__name__ = "SimulatedPopulation_Holder"
            self.pyclass = Holder

    class SimulatorConfiguration_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "SimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.SimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/","SimulatorIdentification",lazy=True)(pname=(ns,"simulatorIdentification"), aname="_simulatorIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","SimulatorTimeSpecification",lazy=True)(pname=(ns,"simulatorTimeSpecification"), aname="_simulatorTimeSpecification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","SimulatedPopulation",lazy=True)(pname=(ns,"populationInitialization"), aname="_populationInitialization", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","Disease",lazy=True)(pname=(ns,"disease"), aname="_disease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","AntiviralControlMeasure",lazy=True)(pname=(ns,"antiviralControlMeasure"), aname="_antiviralControlMeasure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/","VaccinationControlMeasure",lazy=True)(pname=(ns,"vaccinationControlMeasure"), aname="_vaccinationControlMeasure", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorIdentification = None
                    self._authentication = None
                    self._simulatorTimeSpecification = None
                    self._populationInitialization = None
                    self._disease = None
                    self._antiviralControlMeasure = None
                    self._vaccinationControlMeasure = None
                    return
            Holder.__name__ = "SimulatorConfiguration_Holder"
            self.pyclass = Holder

    class VisulaizerResultResource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/"
        type = (schema, "VisulaizerResultResource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.VisulaizerResultResource_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.AnyType(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "VisulaizerResultResource_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://types.apollo.pitt.edu/)
