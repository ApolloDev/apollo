##################################################
# file: VisualizerService_v3_0_0_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    /usr/local/bin/wsdl2py --complexType --lazy visualizerservice300.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# http://visualizer-service-types.apollo.pitt.edu/v3_0_0/
##############################

class ns1:
    targetNamespace = "http://visualizer-service-types.apollo.pitt.edu/v3_0_0/"

    class RunVisualizationMessage_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://visualizer-service-types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunVisualizationMessage")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunVisualizationMessage_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","SoftwareIdentification",lazy=True)(pname=(ns,"visualizerIdentification"), aname="_visualizerIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentificationAndLabel",lazy=True)(pname=(ns,"simulationRunIds"), aname="_simulationRunIds", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizerIdentification = None
                    self._authentication = None
                    self._simulationRunIds = []
                    return
            Holder.__name__ = "RunVisualizationMessage_Holder"
            self.pyclass = Holder

    class RunVisualizationResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://visualizer-service-types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunVisualizationResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.RunVisualizationResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname=(ns,"visualizationRunId"), aname="_visualizationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizationRunId = None
                    return
            Holder.__name__ = "RunVisualizationResult_Holder"
            self.pyclass = Holder

    class GetVisualizerOutputResourcesResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://visualizer-service-types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GetVisualizerOutputResourcesResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns1.GetVisualizerOutputResourcesResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","UrlOutputResource",lazy=True)(pname=(ns,"urlOutputResources"), aname="_urlOutputResources", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    self._urlOutputResources = []
                    return
            Holder.__name__ = "GetVisualizerOutputResourcesResult_Holder"
            self.pyclass = Holder

# end class ns1 (tns: http://visualizer-service-types.apollo.pitt.edu/v3_0_0/)

##############################
# targetNamespace
# http://service.apollo.pitt.edu/visualizerservice/v3_0_0/
##############################

class ns0:
    targetNamespace = "http://service.apollo.pitt.edu/visualizerservice/v3_0_0/"

    class runVisualization_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualization"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v3_0_0/"
        def __init__(self, **kw):
            ns = ns0.runVisualization_Dec.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname="visualizationRunId", aname="_visualizationRunId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://visualizer-service-types.apollo.pitt.edu/v3_0_0/","RunVisualizationMessage",lazy=True)(pname="runVisualizationMessage", aname="_runVisualizationMessage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v3_0_0/","runVisualization")
            kw["aname"] = "_runVisualization"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._visualizationRunId = None
                    self._runVisualizationMessage = None
                    return
            Holder.__name__ = "runVisualization_Holder"
            self.pyclass = Holder

    class runVisualizationResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "runVisualizationResponse"
        schema = "http://service.apollo.pitt.edu/visualizerservice/v3_0_0/"
        def __init__(self, **kw):
            ns = ns0.runVisualizationResponse_Dec.schema
            TClist = []
            kw["pname"] = ("http://service.apollo.pitt.edu/visualizerservice/v3_0_0/","runVisualizationResponse")
            kw["aname"] = "_runVisualizationResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "runVisualizationResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: http://service.apollo.pitt.edu/visualizerservice/v3_0_0/)

##############################
# targetNamespace
# http://services-common.apollo.pitt.edu/v3_0_0/
##############################

class ns2:
    targetNamespace = "http://services-common.apollo.pitt.edu/v3_0_0/"

    class ApolloSoftwareTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ApolloSoftwareTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SoftwareIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SoftwareIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.SoftwareIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"softwareDeveloper"), aname="_softwareDeveloper", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareName"), aname="_softwareName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"softwareVersion"), aname="_softwareVersion", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","ApolloSoftwareTypeEnum",lazy=True)(pname=(ns,"softwareType"), aname="_softwareType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareDeveloper = None
                    self._softwareName = None
                    self._softwareVersion = None
                    self._softwareType = None
                    return
            Holder.__name__ = "SoftwareIdentification_Holder"
            self.pyclass = Holder

    class RunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RunResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "RunResult_Holder"
            self.pyclass = Holder

    class RunStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RunStatus_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname=(ns,"runId"), aname="_runId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runId = None
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "RunStatus_Holder"
            self.pyclass = Holder

    class RunIdentificationAndLabel_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunIdentificationAndLabel")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.RunIdentificationAndLabel_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"runLabel"), aname="_runLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._runLabel = None
                    return
            Holder.__name__ = "RunIdentificationAndLabel_Holder"
            self.pyclass = Holder

    class TerminateRunRequest_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TerminateRunRequest")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TerminateRunRequest_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","RunIdentification",lazy=True)(pname=(ns,"runIdentification"), aname="_runIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._runIdentification = None
                    self._authentication = None
                    return
            Holder.__name__ = "TerminateRunRequest_Holder"
            self.pyclass = Holder

    class ServiceRegistrationRecord_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ServiceRegistrationRecord")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns2.ServiceRegistrationRecord_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","Authentication",lazy=True)(pname=(ns,"authentication"), aname="_authentication", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns2.ServiceRecord_Def not in ns2.ServiceRegistrationRecord_Def.__bases__:
                bases = list(ns2.ServiceRegistrationRecord_Def.__bases__)
                bases.insert(0, ns2.ServiceRecord_Def)
                ns2.ServiceRegistrationRecord_Def.__bases__ = tuple(bases)

            ns2.ServiceRecord_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UrlOutputResource_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UrlOutputResource")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.UrlOutputResource_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "UrlOutputResource_Holder"
            self.pyclass = Holder

    class ServiceResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ServiceResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ServiceResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.URI(pname=(ns,"URL"), aname="_URL", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._URL = None
                    return
            Holder.__name__ = "ServiceResult_Holder"
            self.pyclass = Holder

    class TerminteRunResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TerminteRunResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.TerminteRunResult_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","MethodCallStatus",lazy=True)(pname=(ns,"methodCallStatus"), aname="_methodCallStatus", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._methodCallStatus = None
                    return
            Holder.__name__ = "TerminteRunResult_Holder"
            self.pyclass = Holder

    class Role_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Role")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Role_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_run"), aname="_can_run", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"can_view_cached_results"), aname="_can_view_cached_results", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._softwareIdentification = None
                    self._can_run = None
                    self._can_view_cached_results = None
                    return
            Holder.__name__ = "Role_Holder"
            self.pyclass = Holder

    class ServiceRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ServiceRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.ServiceRecord_Def.schema
            TClist = [ZSI.TC.URI(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://services-common.apollo.pitt.edu/v3_0_0/","SoftwareIdentification",lazy=True)(pname=(ns,"softwareIdentification"), aname="_softwareIdentification", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._url = None
                    self._softwareIdentification = None
                    return
            Holder.__name__ = "ServiceRecord_Holder"
            self.pyclass = Holder

    class RunIdentification_Def(ZSI.TCnumbers.IunsignedLong, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RunIdentification")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IunsignedLong.__init__(self, pname, pyclass=None, **kw)
            class Holder(long):
                typecode = self
            self.pyclass = Holder

    class Authentication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Authentication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.Authentication_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterId"), aname="_requesterId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterPassword"), aname="_requesterPassword", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterId = None
                    self._requesterPassword = None
                    return
            Holder.__name__ = "Authentication_Holder"
            self.pyclass = Holder

    class MethodCallStatusEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MethodCallStatusEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class MethodCallStatus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://services-common.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MethodCallStatus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns2.MethodCallStatus_Def.schema
            TClist = [GTD("http://services-common.apollo.pitt.edu/v3_0_0/","MethodCallStatusEnum",lazy=True)(pname=(ns,"status"), aname="_status", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"message"), aname="_message", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._status = None
                    self._message = None
                    return
            Holder.__name__ = "MethodCallStatus_Holder"
            self.pyclass = Holder

# end class ns2 (tns: http://services-common.apollo.pitt.edu/v3_0_0/)

##############################
# targetNamespace
# http://types.apollo.pitt.edu/v3_0_0/
##############################

class ns3:
    targetNamespace = "http://types.apollo.pitt.edu/v3_0_0/"

    class Probability_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Probability")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Fraction_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Fraction")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class PositiveDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PositiveDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class NonNegativeDouble_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NonNegativeDouble")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class SimulatorTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SimulatorTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfTimeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UnitOfTimeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class GenderEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GenderEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SourceOfInfectionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SourceOfInfectionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SimulatorTimeSpecification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SimulatorTimeSpecification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SimulatorTimeSpecification_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForSimulatorTimeStep"), aname="_unitOfTimeForSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"numberOfUnitsOfTimeInOneSimulatorTimeStep"), aname="_numberOfUnitsOfTimeInOneSimulatorTimeStep", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"runLength"), aname="_runLength", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._unitOfTimeForSimulatorTimeStep = None
                    self._numberOfUnitsOfTimeInOneSimulatorTimeStep = None
                    self._runLength = None
                    return
            Holder.__name__ = "SimulatorTimeSpecification_Holder"
            self.pyclass = Holder

    class IndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.IndividualTreatmentControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Treatment",lazy=True)(pname=(ns,"individualTreatment"), aname="_individualTreatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationTreatmentCensus",lazy=True)(pname=(ns,"populationTreatmentCensus"), aname="_populationTreatmentCensus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"delayFromSymptomsToTreatment"), aname="_delayFromSymptomsToTreatment", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentSystemLogistics",lazy=True)(pname=(ns,"treatmentSystemLogistics"), aname="_treatmentSystemLogistics", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ControlStrategyTargetPopulationsAndPrioritization",lazy=True)(pname=(ns,"targetPopulationsAndPrioritizations"), aname="_targetPopulationsAndPrioritizations", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.IndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns3.IndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.IndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Vaccination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Vaccination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Vaccination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","vaccineOntologyId",lazy=True)(pname=(ns,"vaccineId"), aname="_vaccineId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","VaccinationEfficacyForSimulatorConfiguration",lazy=True)(pname=(ns,"vaccinationEfficacies"), aname="_vaccinationEfficacies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Treatment_Def not in ns3.Vaccination_Def.__bases__:
                bases = list(ns3.Vaccination_Def.__bases__)
                bases.insert(0, ns3.Treatment_Def)
                ns3.Vaccination_Def.__bases__ = tuple(bases)

            ns3.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RingIndividualTreatmentControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RingIndividualTreatmentControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.RingIndividualTreatmentControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ringDiameterInMeters"), aname="_ringDiameterInMeters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.IndividualTreatmentControlStrategy_Def not in ns3.RingIndividualTreatmentControlStrategy_Def.__bases__:
                bases = list(ns3.RingIndividualTreatmentControlStrategy_Def.__bases__)
                bases.insert(0, ns3.IndividualTreatmentControlStrategy_Def)
                ns3.RingIndividualTreatmentControlStrategy_Def.__bases__ = tuple(bases)

            ns3.IndividualTreatmentControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Infection_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Infection")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Infection_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"hostTaxonId"), aname="_hostTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDisease",lazy=True)(pname=(ns,"infectiousDiseases"), aname="_infectiousDiseases", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectionAcquisitionFromInfectiousHost",lazy=True)(pname=(ns,"infectionAcquisitionsFromInfectiousHosts"), aname="_infectionAcquisitionsFromInfectiousHosts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectionAcquisitionFromContaminatedThing",lazy=True)(pname=(ns,"infectionAcquisitionsFromContaminatedThings"), aname="_infectionAcquisitionsFromContaminatedThings", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.Infection_Def.__bases__:
                bases = list(ns3.Infection_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.Infection_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Contamination_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Contamination")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Contamination_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonId"), aname="_pathogenTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"contaminationDuration"), aname="_contaminationDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ContaminationAcquisition",lazy=True)(pname=(ns,"contaminationAcquisition"), aname="_contaminationAcquisition", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.Contamination_Def.__bases__:
                bases = list(ns3.Contamination_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.Contamination_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationInfectionAndImmunityCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PopulationInfectionAndImmunityCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Census_Def not in ns3.PopulationInfectionAndImmunityCensus_Def.__bases__:
                bases = list(ns3.PopulationInfectionAndImmunityCensus_Def.__bases__)
                bases.insert(0, ns3.Census_Def)
                ns3.PopulationInfectionAndImmunityCensus_Def.__bases__ = tuple(bases)

            ns3.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationInfectionAndImmunityCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationInfectionAndImmunityCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PopulationInfectionAndImmunityCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensusDataCell",lazy=True)(pname=(ns,"censusDataCells"), aname="_censusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CensusData_Def not in ns3.PopulationInfectionAndImmunityCensusData_Def.__bases__:
                bases = list(ns3.PopulationInfectionAndImmunityCensusData_Def.__bases__)
                bases.insert(0, ns3.CensusData_Def)
                ns3.PopulationInfectionAndImmunityCensusData_Def.__bases__ = tuple(bases)

            ns3.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PopulationTreatmentCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationTreatmentCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PopulationTreatmentCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationTreatmentCensusDataCell",lazy=True)(pname=(ns,"treatmentCensusDataCells"), aname="_treatmentCensusDataCells", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"exceptionSubpopulations"), aname="_exceptionSubpopulations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CensusData_Def not in ns3.PopulationTreatmentCensusData_Def.__bases__:
                bases = list(ns3.PopulationTreatmentCensusData_Def.__bases__)
                bases.insert(0, ns3.CensusData_Def)
                ns3.PopulationTreatmentCensusData_Def.__bases__ = tuple(bases)

            ns3.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ApolloLocationCode_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ApolloLocationCode")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RequesterIdentification_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RequesterIdentification")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.RequesterIdentification_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"requesterName"), aname="_requesterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterCompany"), aname="_requesterCompany", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"requesterEmail"), aname="_requesterEmail", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._requesterName = None
                    self._requesterCompany = None
                    self._requesterEmail = None
                    return
            Holder.__name__ = "RequesterIdentification_Holder"
            self.pyclass = Holder

    class Vaccine_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Vaccine")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Vaccine_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"vaccineIdentifier"), aname="_vaccineIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"valence"), aname="_valence", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccineIdentifier = None
                    self._valence = []
                    return
            Holder.__name__ = "Vaccine_Holder"
            self.pyclass = Holder

    class AgeGroupEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AgeGroupEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.AgeGroupEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"vaccineEfficacy"), aname="_vaccineEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._vaccineEfficacy = None
                    return
            Holder.__name__ = "AgeGroupEfficacy_Holder"
            self.pyclass = Holder

    class VaccineContraindications_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccineContraindications")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.VaccineContraindications_Def.schema
            TClist = [ZSI.TC.Boolean(pname=(ns,"infants"), aname="_infants", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"preschoolers"), aname="_preschoolers", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"schoolAgeChildren"), aname="_schoolAgeChildren", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"youngAdults"), aname="_youngAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"olderAdults"), aname="_olderAdults", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"elderly"), aname="_elderly", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"pregnantAdultsRestricted"), aname="_pregnantAdultsRestricted", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infants = None
                    self._preschoolers = None
                    self._schoolAgeChildren = None
                    self._youngAdults = None
                    self._olderAdults = None
                    self._elderly = None
                    self._pregnantAdultsRestricted = None
                    return
            Holder.__name__ = "VaccineContraindications_Holder"
            self.pyclass = Holder

    class AntiviralTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AntiviralTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.AntiviralTreatment_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"antiviralId"), aname="_antiviralId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","AntiviralTreatmentEfficacy",lazy=True)(pname=(ns,"antiviralTreatmentEfficacy"), aname="_antiviralTreatmentEfficacy", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Treatment_Def not in ns3.AntiviralTreatment_Def.__bases__:
                bases = list(ns3.AntiviralTreatment_Def.__bases__)
                bases.insert(0, ns3.Treatment_Def)
                ns3.AntiviralTreatment_Def.__bases__ = tuple(bases)

            ns3.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DrugTreatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DrugTreatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DrugTreatment_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"drugId"), aname="_drugId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DrugTreatmentEfficacyForSimulatorConfiguration",lazy=True)(pname=(ns,"drugTreatmentEfficacy"), aname="_drugTreatmentEfficacy", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Treatment_Def not in ns3.DrugTreatment_Def.__bases__:
                bases = list(ns3.DrugTreatment_Def.__bases__)
                bases.insert(0, ns3.Treatment_Def)
                ns3.DrugTreatment_Def.__bases__ = tuple(bases)

            ns3.Treatment_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ArrayDimensionsDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ArrayDimensionsDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ArrayDimensionsDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TargetPopulationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TargetPopulationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationStratificationEnum",lazy=True)(pname=(ns,"otherStratification"), aname="_otherStratification", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._diseaseOutcome = None
                    self._otherStratification = None
                    return
            Holder.__name__ = "TargetPopulationDefinition_Holder"
            self.pyclass = Holder

    class PopulationInfectionAndImmunityCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationInfectionAndImmunityCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PopulationInfectionAndImmunityCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectionStateEnum",lazy=True)(pname=(ns,"infectionState"), aname="_infectionState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseState"), aname="_diseaseState", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionInState"), aname="_fractionInState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._infectionState = None
                    self._diseaseState = None
                    self._fractionInState = None
                    return
            Holder.__name__ = "PopulationInfectionAndImmunityCensusDataCell_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensusDataCell_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationTreatmentCensusDataCell")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PopulationTreatmentCensusDataCell_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AgeRangeCategoryDefinition",lazy=True)(pname=(ns,"ageRange"), aname="_ageRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentStateEnum",lazy=True)(pname=(ns,"treatmentState"), aname="_treatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionInTreatmentState"), aname="_fractionInTreatmentState", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ageRange = None
                    self._gender = None
                    self._treatmentState = None
                    self._fractionInTreatmentState = None
                    return
            Holder.__name__ = "PopulationTreatmentCensusDataCell_Holder"
            self.pyclass = Holder

    class TemporalArrayDimensionsDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TemporalArrayDimensionsDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.TemporalArrayDimensionsDefinition_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"time"), aname="_time", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ArrayDimensionsDefinition_Def not in ns3.TemporalArrayDimensionsDefinition_Def.__bases__:
                bases = list(ns3.TemporalArrayDimensionsDefinition_Def.__bases__)
                bases.insert(0, ns3.ArrayDimensionsDefinition_Def)
                ns3.TemporalArrayDimensionsDefinition_Def.__bases__ = tuple(bases)

            ns3.ArrayDimensionsDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectionStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectionStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentStateEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentStateEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualTreatmentEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualTreatmentEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class AgeRangeCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AgeRangeCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.AgeRangeCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForLowerBound"), aname="_unitOfTimeForLowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTimeForUpperBound"), aname="_unitOfTimeForUpperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.AgeRangeCategoryDefinition_Def.__bases__:
                bases = list(ns3.AgeRangeCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.AgeRangeCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseOutcomeCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseOutcomeCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DiseaseOutcomeCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.DiseaseOutcomeCategoryDefinition_Def.__bases__:
                bases = list(ns3.DiseaseOutcomeCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.DiseaseOutcomeCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TimeSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.TimeSpanCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TimeScaleEnum",lazy=True)(pname=(ns,"timeZeroReference"), aname="_timeZeroReference", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"startOfTimeSpan"), aname="_startOfTimeSpan", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"durationInTimeUnits"), aname="_durationInTimeUnits", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.TimeSpanCategoryDefinition_Def.__bases__:
                bases = list(ns3.TimeSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.TimeSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealTimeSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RealTimeSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.RealTimeSpanCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"beginningTime"), aname="_beginningTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"endingTime"), aname="_endingTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.RealTimeSpanCategoryDefinition_Def.__bases__:
                bases = list(ns3.RealTimeSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.RealTimeSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealDateSpanCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RealDateSpanCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.RealDateSpanCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"firstDay"), aname="_firstDay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"lastDay"), aname="_lastDay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.RealDateSpanCategoryDefinition_Def.__bases__:
                bases = list(ns3.RealDateSpanCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.RealDateSpanCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class RealTimePointCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RealTimePointCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.RealTimePointCategoryDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"offsetFromUtcInHours"), aname="_offsetFromUtcInHours", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"date"), aname="_date", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.RealTimePointCategoryDefinition_Def.__bases__:
                bases = list(ns3.RealTimePointCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.RealTimePointCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeScaleEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TimeScaleEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PlaceCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PlaceCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.PlaceCategoryDefinition_Def.__bases__:
                bases = list(ns3.PlaceCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.PlaceCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GenderCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GenderCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.GenderCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","GenderEnum",lazy=True)(pname=(ns,"gender"), aname="_gender", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.GenderCategoryDefinition_Def.__bases__:
                bases = list(ns3.GenderCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.GenderCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SourceOfInfectionCategoryDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SourceOfInfectionCategoryDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.SourceOfInfectionCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","SourceOfInfectionEnum",lazy=True)(pname=(ns,"sourceOfInfection"), aname="_sourceOfInfection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.SourceOfInfectionCategoryDefinition_Def.__bases__:
                bases = list(ns3.SourceOfInfectionCategoryDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.SourceOfInfectionCategoryDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class SimulatorTimeRange_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SimulatorTimeRange")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SimulatorTimeRange_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lowerBound = None
                    self._upperBound = None
                    return
            Holder.__name__ = "SimulatorTimeRange_Holder"
            self.pyclass = Holder

    class TargetPriorityPopulation_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TargetPriorityPopulation")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TargetPriorityPopulation_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TargetPopulationDefinition",lazy=True)(pname=(ns,"targetPopulationDefinition"), aname="_targetPopulationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TargetPopulationEnum",lazy=True)(pname=(ns,"targetPopulationEnum"), aname="_targetPopulationEnum", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionOfTargetPopulationToPrioritize"), aname="_fractionOfTargetPopulationToPrioritize", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"priority"), aname="_priority", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._targetPopulationDefinition = None
                    self._targetPopulationEnum = None
                    self._fractionOfTargetPopulationToPrioritize = None
                    self._priority = None
                    return
            Holder.__name__ = "TargetPriorityPopulation_Holder"
            self.pyclass = Holder

    class ControlStrategyTargetPopulationsAndPrioritization_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ControlStrategyTargetPopulationsAndPrioritization")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ControlStrategyTargetPopulationsAndPrioritization_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NamedPrioritizationSchemeEnum",lazy=True)(pname=(ns,"controlStrategyNamedPrioritizationScheme"), aname="_controlStrategyNamedPrioritizationScheme", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TargetPriorityPopulation",lazy=True)(pname=(ns,"controlStrategyTargetPopulationsAndPrioritization"), aname="_controlStrategyTargetPopulationsAndPrioritization", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._controlStrategyNamedPrioritizationScheme = None
                    self._controlStrategyTargetPopulationsAndPrioritization = []
                    return
            Holder.__name__ = "ControlStrategyTargetPopulationsAndPrioritization_Holder"
            self.pyclass = Holder

    class NamedPrioritizationSchemeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NamedPrioritizationSchemeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectiousDiseaseControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectiousDiseaseControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.InfectiousDiseaseControlStrategy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStartTime"), aname="_controlStrategyStartTime", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TriggerDefinition",lazy=True)(pname=(ns,"controlStrategyStopTime"), aname="_controlStrategyStopTime", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"controlStrategyResponseDelay"), aname="_controlStrategyResponseDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"controlStrategyStandDownDelay"), aname="_controlStrategyStandDownDelay", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.InfectiousDiseaseControlStrategy_Def.__bases__:
                bases = list(ns3.InfectiousDiseaseControlStrategy_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.InfectiousDiseaseControlStrategy_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DiseaseSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseSurveillanceCapability",lazy=True)(pname=(ns,"diseaseSurveillanceCapability"), aname="_diseaseSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TriggerDefinition_Def not in ns3.DiseaseSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns3.DiseaseSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns3.TriggerDefinition_Def)
                ns3.DiseaseSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns3.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TemporalTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TemporalTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.TemporalTriggerDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","TimeScaleEnum",lazy=True)(pname=(ns,"timeScale"), aname="_timeScale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","FixedDuration",lazy=True)(pname=(ns,"timeSinceTimeScaleZero"), aname="_timeSinceTimeScaleZero", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TriggerDefinition_Def not in ns3.TemporalTriggerDefinition_Def.__bases__:
                bases = list(ns3.TemporalTriggerDefinition_Def.__bases__)
                bases.insert(0, ns3.TriggerDefinition_Def)
                ns3.TemporalTriggerDefinition_Def.__bases__ = tuple(bases)

            ns3.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentSurveillanceTriggerDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentSurveillanceTriggerDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.TreatmentSurveillanceTriggerDefinition_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"reactiveControlStrategyTest"), aname="_reactiveControlStrategyTest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"reactiveControlStrategyThreshold"), aname="_reactiveControlStrategyThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","OperatorEnum",lazy=True)(pname=(ns,"reactiveControlStrategyOperator"), aname="_reactiveControlStrategyOperator", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"unitOfMeasureForThreshold"), aname="_unitOfMeasureForThreshold", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentSurveillanceCapability",lazy=True)(pname=(ns,"treatmentSurveillanceCapability"), aname="_treatmentSurveillanceCapability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TriggerDefinition_Def not in ns3.TreatmentSurveillanceTriggerDefinition_Def.__bases__:
                bases = list(ns3.TreatmentSurveillanceTriggerDefinition_Def.__bases__)
                bases.insert(0, ns3.TriggerDefinition_Def)
                ns3.TreatmentSurveillanceTriggerDefinition_Def.__bases__ = tuple(bases)

            ns3.TriggerDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TriggerDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TriggerDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TriggerDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "TriggerDefinition_Holder"
            self.pyclass = Holder

    class TargetPopulationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TargetPopulationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PopulationStratificationEnum_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationStratificationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiscreteNonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiscreteNonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DiscreteNonparametricProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilityValuePair",lazy=True)(pname=(ns,"probabilityValuePairs"), aname="_probabilityValuePairs", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.NonparametricProbabilityDistribution_Def not in ns3.DiscreteNonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns3.DiscreteNonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.NonparametricProbabilityDistribution_Def)
                ns3.DiscreteNonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.NonparametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TreatmentContraindication_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentContraindication")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatmentContraindication_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TargetPopulationDefinition",lazy=True)(pname=(ns,"simulatorReferencablePopulation"), aname="_simulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionOfSimulatorReferencablePopulation"), aname="_fractionOfSimulatorReferencablePopulation", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._simulatorReferencablePopulation = None
                    self._fractionOfSimulatorReferencablePopulation = None
                    return
            Holder.__name__ = "TreatmentContraindication_Holder"
            self.pyclass = Holder

    class ConditionalProbabilityTable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ConditionalProbabilityTable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ConditionalProbabilityTable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ArrayDimensionsDefinition",lazy=True)(pname=(ns,"axisDefinitions"), aname="_axisDefinitions", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"pointProbabilities"), aname="_pointProbabilities", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"parametricDistribution"), aname="_parametricDistribution", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._axisDefinitions = None
                    self._pointProbabilities = []
                    self._parametricDistribution = []
                    return
            Holder.__name__ = "ConditionalProbabilityTable_Holder"
            self.pyclass = Holder

    class Duration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Duration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Duration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfTimeEnum",lazy=True)(pname=(ns,"unitOfTime"), aname="_unitOfTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ParameterValue_Def not in ns3.Duration_Def.__bases__:
                bases = list(ns3.Duration_Def.__bases__)
                bases.insert(0, ns3.ParameterValue_Def)
                ns3.Duration_Def.__bases__ = tuple(bases)

            ns3.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FixedDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "FixedDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.FixedDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Duration_Def not in ns3.FixedDuration_Def.__bases__:
                bases = list(ns3.FixedDuration_Def.__bases__)
                bases.insert(0, ns3.Duration_Def)
                ns3.FixedDuration_Def.__bases__ = tuple(bases)

            ns3.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class UncertainDuration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UncertainDuration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.UncertainDuration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Duration_Def not in ns3.UncertainDuration_Def.__bases__:
                bases = list(ns3.UncertainDuration_Def.__bases__)
                bases.insert(0, ns3.Duration_Def)
                ns3.UncertainDuration_Def.__bases__ = tuple(bases)

            ns3.Duration_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ProbabilisticParameter_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ProbabilisticParameter")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ProbabilisticParameter_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ParameterValue_Def not in ns3.ProbabilisticParameter_Def.__bases__:
                bases = list(ns3.ProbabilisticParameter_Def.__bases__)
                bases.insert(0, ns3.ParameterValue_Def)
                ns3.ProbabilisticParameter_Def.__bases__ = tuple(bases)

            ns3.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Treatment_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Treatment")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Treatment_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfTreatedOrganism"), aname="_speciesOfTreatedOrganism", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numDosesInTreatmentCourse"), aname="_numDosesInTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"durationOfTreatmentCourse"), aname="_durationOfTreatmentCourse", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentContraindication",lazy=True)(pname=(ns,"treatmentContraindications"), aname="_treatmentContraindications", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.Treatment_Def.__bases__:
                bases = list(ns3.Treatment_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.Treatment_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BayesianNetwork_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BayesianNetwork")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.BayesianNetwork_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","BayesianNetworkStructureType",lazy=True)(pname=(ns,"networkStructure"), aname="_networkStructure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"CPTs"), aname="_CPTs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PrototypicalProbabilityFunction",lazy=True)(pname=(ns,"PPFs"), aname="_PPFs", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","GeNIE_XMLType",lazy=True)(pname=(ns,"GeNIE_XML"), aname="_GeNIE_XML", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.BayesianNetwork_Def.__bases__:
                bases = list(ns3.BayesianNetwork_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.BayesianNetwork_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class TimeDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TimeDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TimeDefinition_Def.schema
            TClist = [ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._simulatorTime = None
                    self._dateTime = None
                    return
            Holder.__name__ = "TimeDefinition_Holder"
            self.pyclass = Holder

    class TreatmentPreventableOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentPreventableOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class TreatmentEfficacy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"hostIdentifier"), aname="_hostIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"strainIdentifier"), aname="_strainIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"forTreatmentPreventableOutcome"), aname="_forTreatmentPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._hostIdentifier = None
                    self._strainIdentifier = None
                    self._forTreatmentPreventableOutcome = None
                    return
            Holder.__name__ = "TreatmentEfficacy_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccinationEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.VaccinationEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"averageVaccinationEfficacy"), aname="_averageVaccinationEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnAgeRange"), aname="_vaccinationEfficacyConditionedOnAgeRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","VaccinationEfficacyConditionedOnTimeSinceDose",lazy=True)(pname=(ns,"vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficaciesConditionedOnTimeSinceMostRecentDose", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TreatmentEfficacy_Def not in ns3.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns3.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns3.TreatmentEfficacy_Def)
                ns3.VaccinationEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns3.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyConditionedOnTimeSinceDose_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccinationEfficacyConditionedOnTimeSinceDose")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.VaccinationEfficacyConditionedOnTimeSinceDose_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberOfDosesAdministered"), aname="_numberOfDosesAdministered", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TimeAxisCategoryLabels",lazy=True)(pname=(ns,"timeIntervalLabelDefinitions"), aname="_timeIntervalLabelDefinitions", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"vaccinationEfficacyConditionedOnTimeSinceMostRecentDose"), aname="_vaccinationEfficacyConditionedOnTimeSinceMostRecentDose", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numberOfDosesAdministered = None
                    self._timeIntervalLabelDefinitions = []
                    self._vaccinationEfficacyConditionedOnTimeSinceMostRecentDose = []
                    return
            Holder.__name__ = "VaccinationEfficacyConditionedOnTimeSinceDose_Holder"
            self.pyclass = Holder

    class VaccinationEfficacyInferred_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccinationEfficacyInferred")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.VaccinationEfficacyInferred_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","VaccinationEfficacyStudy",lazy=True)(pname=(ns,"inferredFromTheseStudies"), aname="_inferredFromTheseStudies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","BayesianNetwork",lazy=True)(pname=(ns,"vaccinationEfficacyModel"), aname="_vaccinationEfficacyModel", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TreatmentEfficacy_Def not in ns3.VaccinationEfficacyInferred_Def.__bases__:
                bases = list(ns3.VaccinationEfficacyInferred_Def.__bases__)
                bases.insert(0, ns3.TreatmentEfficacy_Def)
                ns3.VaccinationEfficacyInferred_Def.__bases__ = tuple(bases)

            ns3.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyMeasured_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccinationEfficacyMeasured")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.VaccinationEfficacyMeasured_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityTable",lazy=True)(pname=(ns,"measuredEfficacyValue"), aname="_measuredEfficacyValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TreatmentEfficacy_Def not in ns3.VaccinationEfficacyMeasured_Def.__bases__:
                bases = list(ns3.VaccinationEfficacyMeasured_Def.__bases__)
                bases.insert(0, ns3.TreatmentEfficacy_Def)
                ns3.VaccinationEfficacyMeasured_Def.__bases__ = tuple(bases)

            ns3.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VaccinationEfficacyStudy_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VaccinationEfficacyStudy")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.VaccinationEfficacyStudy_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentPreventableOutcomeEnum",lazy=True)(pname=(ns,"vaccinationPreventableOutcome"), aname="_vaccinationPreventableOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","VaccinationEfficacyMeasured",lazy=True)(pname=(ns,"vaccinationEfficacyMeasured"), aname="_vaccinationEfficacyMeasured", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"dataSets"), aname="_dataSets", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._vaccinationPreventableOutcome = None
                    self._vaccinationEfficacyMeasured = []
                    self._dataSets = []
                    self._references = []
                    return
            Holder.__name__ = "VaccinationEfficacyStudy_Holder"
            self.pyclass = Holder

    class AntiviralTreatmentEfficacy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AntiviralTreatmentEfficacy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.AntiviralTreatmentEfficacy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"efficacy"), aname="_efficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TreatmentEfficacy_Def not in ns3.AntiviralTreatmentEfficacy_Def.__bases__:
                bases = list(ns3.AntiviralTreatmentEfficacy_Def.__bases__)
                bases.insert(0, ns3.TreatmentEfficacy_Def)
                ns3.AntiviralTreatmentEfficacy_Def.__bases__ = tuple(bases)

            ns3.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DrugTreatmentEfficacyForSimulatorConfiguration_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DrugTreatmentEfficacyForSimulatorConfiguration")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DrugTreatmentEfficacyForSimulatorConfiguration_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"averageDrugEfficacy"), aname="_averageDrugEfficacy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"drugEfficacyConditionedOnAgeRange"), aname="_drugEfficacyConditionedOnAgeRange", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"drugEfficaciesConditionedOnCurrentDiseaseOutcome"), aname="_drugEfficaciesConditionedOnCurrentDiseaseOutcome", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.TreatmentEfficacy_Def not in ns3.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__:
                bases = list(ns3.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__)
                bases.insert(0, ns3.TreatmentEfficacy_Def)
                ns3.DrugTreatmentEfficacyForSimulatorConfiguration_Def.__bases__ = tuple(bases)

            ns3.TreatmentEfficacy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Ecosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Ecosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Ecosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","BioticEcosystem",lazy=True)(pname=(ns,"bioticEcosystem"), aname="_bioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystem",lazy=True)(pname=(ns,"abioticEcosystem"), aname="_abioticEcosystem", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._bioticEcosystem = None
                    self._abioticEcosystem = None
                    return
            Holder.__name__ = "Ecosystem_Holder"
            self.pyclass = Holder

    class BioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.BioticEcosystem_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"communities"), aname="_communities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._communities = []
                    return
            Holder.__name__ = "BioticEcosystem_Holder"
            self.pyclass = Holder

    class AbioticEcosystem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AbioticEcosystem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.AbioticEcosystem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"houses"), aname="_houses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"schools"), aname="_schools", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"workplaces"), aname="_workplaces", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._houses = []
                    self._schools = []
                    self._workplaces = []
                    return
            Holder.__name__ = "AbioticEcosystem_Holder"
            self.pyclass = Holder

    class BayesianNetworkStructureType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BayesianNetworkStructureType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.BayesianNetworkStructureType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "BayesianNetworkStructureType_Holder"
            self.pyclass = Holder

    class PrototypicalProbabilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PrototypicalProbabilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PrototypicalProbabilityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "PrototypicalProbabilityFunction_Holder"
            self.pyclass = Holder

    class GeNIE_XMLType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GeNIE_XMLType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GeNIE_XMLType_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"theXML"), aname="_theXML", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._theXML = None
                    return
            Holder.__name__ = "GeNIE_XMLType_Holder"
            self.pyclass = Holder

    class TimeAxisCategoryLabels_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TimeAxisCategoryLabels")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TimeAxisCategoryLabels_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"label"), aname="_label", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeEarliest"), aname="_simulatorTimeEarliest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"simulatorTimeLatest"), aname="_simulatorTimeLatest", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._label = None
                    self._simulatorTimeEarliest = None
                    self._simulatorTimeLatest = None
                    return
            Holder.__name__ = "TimeAxisCategoryLabels_Holder"
            self.pyclass = Holder

    class LocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LocationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsIncluded"), aname="_locationsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloLocationCode",lazy=True)(pname=(ns,"locationsExcluded"), aname="_locationsExcluded", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","MultiGeometry",lazy=True)(pname=(ns,"multiGeometries"), aname="_multiGeometries", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._locationsIncluded = []
                    self._locationsExcluded = []
                    self._multiGeometries = []
                    return
            Holder.__name__ = "LocationDefinition_Holder"
            self.pyclass = Holder

    class LibraryItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LibraryItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LibraryItem_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"base_type"), aname="_base_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._base_type = None
                    return
            Holder.__name__ = "LibraryItem_Holder"
            self.pyclass = Holder

    class DecisionAlternative_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DecisionAlternative")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.DecisionAlternative_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"singleStrategy"), aname="_singleStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"combinationStrategy"), aname="_combinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"SequentialCombinationStrategy"), aname="_SequentialCombinationStrategy", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._singleStrategy = None
                    self._combinationStrategy = None
                    self._SequentialCombinationStrategy = None
                    return
            Holder.__name__ = "DecisionAlternative_Holder"
            self.pyclass = Holder

    class UtilityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UtilityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.UtilityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"lambdaFunction"), aname="_lambdaFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textDescription"), aname="_textDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._lambdaFunction = None
                    self._textDescription = None
                    return
            Holder.__name__ = "UtilityFunction_Holder"
            self.pyclass = Holder

    class SensitivityAnalysis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SensitivityAnalysis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SensitivityAnalysis_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysis_Holder"
            self.pyclass = Holder

    class SensitivityAnalysisResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SensitivityAnalysisResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SensitivityAnalysisResult_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "SensitivityAnalysisResult_Holder"
            self.pyclass = Holder

    class InfectiousDiseaseDecisionModel_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectiousDiseaseDecisionModel")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.InfectiousDiseaseDecisionModel_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"controlStrategies"), aname="_controlStrategies", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDiseaseScenario",lazy=True)(pname=(ns,"simulatorConfiguration "), aname="_simulatorConfiguration_", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UtilityFunction",lazy=True)(pname=(ns,"utilityFunction"), aname="_utilityFunction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.InfectiousDiseaseDecisionModel_Def.__bases__:
                bases = list(ns3.InfectiousDiseaseDecisionModel_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.InfectiousDiseaseDecisionModel_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DecisionAnalysis_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DecisionAnalysis")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DecisionAnalysis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDiseaseDecisionModel",lazy=True)(pname=(ns,"decisionModel"), aname="_decisionModel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","BaseCaseResult",lazy=True)(pname=(ns,"baseCaseResult "), aname="_baseCaseResult_", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","SensitivityAnalysis",lazy=True)(pname=(ns,"sensitivityAnalyses"), aname="_sensitivityAnalyses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.DecisionAnalysis_Def.__bases__:
                bases = list(ns3.DecisionAnalysis_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.DecisionAnalysis_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ExpectedUtility_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ExpectedUtility")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ExpectedUtility_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ExpectedUtility_Holder"
            self.pyclass = Holder

    class BaseCaseResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BaseCaseResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.BaseCaseResult_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","DecisionAlternative",lazy=True)(pname=(ns,"decisionAlternatives"), aname="_decisionAlternatives", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"expectedUtilities"), aname="_expectedUtilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._decisionAlternatives = []
                    self._expectedUtilities = []
                    return
            Holder.__name__ = "BaseCaseResult_Holder"
            self.pyclass = Holder

    class ApolloIndexableItem_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ApolloIndexableItem")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ApolloIndexableItem_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ApolloIndexableItem_Holder"
            self.pyclass = Holder

    class PathogenTaxonID_Def(ZSI.TCnumbers.IpositiveInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PathogenTaxonID")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.IpositiveInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseOutcomeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PlaceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class InfectionAcquisitionFromContaminatedThing_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectionAcquisitionFromContaminatedThing")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.InfectionAcquisitionFromContaminatedThing_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemType"), aname="_abioticEcosystemType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemType = None
                    self._transmissionProbability = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromContaminatedThing_Holder"
            self.pyclass = Holder

    class InfectionAcquisitionFromInfectiousHost_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectionAcquisitionFromInfectiousHost")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.InfectionAcquisitionFromInfectiousHost_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostTaxonId"), aname="_infectiousHostTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"latentPeriodDuration"), aname="_latentPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"infectiousPeriodDuration"), aname="_infectiousPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ReproductionNumber",lazy=True)(pname=(ns,"basicReproductionNumbers"), aname="_basicReproductionNumbers", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"beta"), aname="_beta", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TransmissionProbability",lazy=True)(pname=(ns,"transmissionProbability"), aname="_transmissionProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousHostTaxonId = None
                    self._latentPeriodDuration = None
                    self._infectiousPeriodDuration = None
                    self._basicReproductionNumbers = []
                    self._beta = None
                    self._transmissionProbability = None
                    return
            Holder.__name__ = "InfectionAcquisitionFromInfectiousHost_Holder"
            self.pyclass = Holder

    class GesParametersForContactAndTransmission_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GesParametersForContactAndTransmission")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GesParametersForContactAndTransmission_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","SeasonalityFunctionParameters",lazy=True)(pname=(ns,"seasonalityFunctionParameters"), aname="_seasonalityFunctionParameters", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","GesInfectiousnessParameterSet",lazy=True)(pname=(ns,"infectiousnessParameterSet"), aname="_infectiousnessParameterSet", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ContactModelForSetting",lazy=True)(pname=(ns,"contactModelsForSettings"), aname="_contactModelsForSettings", minOccurs=6, maxOccurs=6, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._seasonalityFunctionParameters = None
                    self._infectiousnessParameterSet = None
                    self._contactModelsForSettings = []
                    return
            Holder.__name__ = "GesParametersForContactAndTransmission_Holder"
            self.pyclass = Holder

    class GesInfectiousnessParameterSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GesInfectiousnessParameterSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.GesInfectiousnessParameterSet_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ContinuousParametricProbabilityDistribution",lazy=True)(pname=(ns,"infectiousnessProfile"), aname="_infectiousnessProfile", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"treat_inf"), aname="_treat_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"prophylaxis_inf"), aname="_prophylaxis_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"vacc_inf"), aname="_vacc_inf", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"relative_inf_symptomatic_multiplier"), aname="_relative_inf_symptomatic_multiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._infectiousnessProfile = None
                    self._treat_inf = None
                    self._prophylaxis_inf = None
                    self._vacc_inf = None
                    self._relative_inf_symptomatic_multiplier = None
                    return
            Holder.__name__ = "GesInfectiousnessParameterSet_Holder"
            self.pyclass = Holder

    class ContactModelForSetting_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactModelForSetting")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ContactModelForSetting_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","SpatialKernelFunctionParameters",lazy=True)(pname=(ns,"spatialKernelParametersForSetting"), aname="_spatialKernelParametersForSetting", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probSymptomaticInfectionClinicallyDetected"), aname="_probSymptomaticInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticInfectionMultiplier"), aname="_symptomaticInfectionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probSevereInfectionClinicallyDetected"), aname="_probSevereInfectionClinicallyDetected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._spatialKernelParametersForSetting = None
                    self._probSymptomaticInfectionClinicallyDetected = None
                    self._symptomaticInfectionMultiplier = None
                    self._probSevereInfectionClinicallyDetected = None
                    return
            Holder.__name__ = "ContactModelForSetting_Holder"
            self.pyclass = Holder

    class ContactModelForCommunity_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactModelForCommunity")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContactModelForCommunity_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"r_community"), aname="_r_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"c_community"), aname="_c_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"q_community"), aname="_q_community", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContactModelForSetting_Def not in ns3.ContactModelForCommunity_Def.__bases__:
                bases = list(ns3.ContactModelForCommunity_Def.__bases__)
                bases.insert(0, ns3.ContactModelForSetting_Def)
                ns3.ContactModelForCommunity_Def.__bases__ = tuple(bases)

            ns3.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForHousehold_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactModelForHousehold")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContactModelForHousehold_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"r_household"), aname="_r_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"c_household"), aname="_c_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"q_household"), aname="_q_household", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContactModelForSetting_Def not in ns3.ContactModelForHousehold_Def.__bases__:
                bases = list(ns3.ContactModelForHousehold_Def.__bases__)
                bases.insert(0, ns3.ContactModelForSetting_Def)
                ns3.ContactModelForHousehold_Def.__bases__ = tuple(bases)

            ns3.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContactModelForPlace_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactModelForPlace")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContactModelForPlace_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"placeType"), aname="_placeType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"r_place"), aname="_r_place", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","WithinGroupTransmissionProbability",lazy=True)(pname=(ns,"P_Pn_group"), aname="_P_Pn_group", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probSymptomaticIndividualAbsent"), aname="_probSymptomaticIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"symptomaticAbsenteeMultiplier"), aname="_symptomaticAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probSeverelyInfectedIndividualAbsent"), aname="_probSeverelyInfectedIndividualAbsent", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"severelyInfectedAbsenteeMultiplier"), aname="_severelyInfectedAbsenteeMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"q_social"), aname="_q_social", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContactModelForSetting_Def not in ns3.ContactModelForPlace_Def.__bases__:
                bases = list(ns3.ContactModelForPlace_Def.__bases__)
                bases.insert(0, ns3.ContactModelForSetting_Def)
                ns3.ContactModelForPlace_Def.__bases__ = tuple(bases)

            ns3.ContactModelForSetting_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDiseaseScenario_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectiousDiseaseScenario")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.InfectiousDiseaseScenario_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"scenarioDate"), aname="_scenarioDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Contamination",lazy=True)(pname=(ns,"contaminations"), aname="_contaminations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensus",lazy=True)(pname=(ns,"populationInfectionAndImmunityCensuses"), aname="_populationInfectionAndImmunityCensuses", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","IndividualLifeCycle",lazy=True)(pname=(ns,"individualLifeCycles"), aname="_individualLifeCycles", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","IndividualBehavior",lazy=True)(pname=(ns,"individualBehaviors"), aname="_individualBehaviors", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","IndividualMosquitoReproduction",lazy=True)(pname=(ns,"individualReproductions"), aname="_individualReproductions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemCensus",lazy=True)(pname=(ns,"abioticEcosystemCensuses"), aname="_abioticEcosystemCensuses", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ScenarioCartesianOrigin",lazy=True)(pname=(ns,"scenarioCartesianOrigin"), aname="_scenarioCartesianOrigin", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonApolloParameter",lazy=True)(pname=(ns,"nonApolloParameters"), aname="_nonApolloParameters", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.InfectiousDiseaseScenario_Def.__bases__:
                bases = list(ns3.InfectiousDiseaseScenario_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.InfectiousDiseaseScenario_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Epidemic_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Epidemic")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Epidemic_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogens"), aname="_causalPathogens", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","EpidemicPeriod",lazy=True)(pname=(ns,"epidemicPeriod"), aname="_epidemicPeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"administrativeLocations"), aname="_administrativeLocations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NamedMultiGeometry",lazy=True)(pname=(ns,"epidemicZones"), aname="_epidemicZones", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Infection",lazy=True)(pname=(ns,"infections"), aname="_infections", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PreEpidemicEcosystemCensus",lazy=True)(pname=(ns,"preEpidemicCensus"), aname="_preEpidemicCensus", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationSerologySurvey",lazy=True)(pname=(ns,"populationSerologySurveys"), aname="_populationSerologySurveys", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionSurvey",lazy=True)(pname=(ns,"populationInfectionSurveys"), aname="_populationInfectionSurveys", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","InfectiousDiseaseControlStrategy",lazy=True)(pname=(ns,"infectiousDiseaseControlStrategies"), aname="_infectiousDiseaseControlStrategies", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseDefinition",lazy=True)(pname=(ns,"caseDefinitions"), aname="_caseDefinitions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ContactDefinition",lazy=True)(pname=(ns,"contactDefinitions"), aname="_contactDefinitions", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseList",lazy=True)(pname=(ns,"caseLists"), aname="_caseLists", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseCount",lazy=True)(pname=(ns,"caseCounts"), aname="_caseCounts", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TransmissionTree",lazy=True)(pname=(ns,"transmissionTrees"), aname="_transmissionTrees", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","RelativeRiskDataSet",lazy=True)(pname=(ns,"relativeRiskDataSets"), aname="_relativeRiskDataSets", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"causalPathogenIsolates"), aname="_causalPathogenIsolates", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Reference",lazy=True)(pname=(ns,"references"), aname="_references", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"curator"), aname="_curator", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"editHistory"), aname="_editHistory", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"reviewedBy"), aname="_reviewedBy", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"acknowledgements"), aname="_acknowledgements", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.Epidemic_Def.__bases__:
                bases = list(ns3.Epidemic_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.Epidemic_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class AbioticEcosystemCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AbioticEcosystemCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.AbioticEcosystemCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Census_Def not in ns3.AbioticEcosystemCensus_Def.__bases__:
                bases = list(ns3.AbioticEcosystemCensus_Def.__bases__)
                bases.insert(0, ns3.Census_Def)
                ns3.AbioticEcosystemCensus_Def.__bases__ = tuple(bases)

            ns3.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CompartmentalModelPopulationAndEnvironmentCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CompartmentalModelPopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CompartmentalModelPopulationAndEnvironmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationInfectionAndImmunityCensusData",lazy=True)(pname=(ns,"bioticEcosystemParts"), aname="_bioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemCensus",lazy=True)(pname=(ns,"abioticEcosystemParts"), aname="_abioticEcosystemParts", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._bioticEcosystemParts = []
                    self._abioticEcosystemParts = []
                    return
            Holder.__name__ = "CompartmentalModelPopulationAndEnvironmentCensus_Holder"
            self.pyclass = Holder

    class PopulationTreatmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationTreatmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PopulationTreatmentCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationTreatmentCensusData",lazy=True)(pname=(ns,"treatmentCensusData"), aname="_treatmentCensusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Census_Def not in ns3.PopulationTreatmentCensus_Def.__bases__:
                bases = list(ns3.PopulationTreatmentCensus_Def.__bases__)
                bases.insert(0, ns3.Census_Def)
                ns3.PopulationTreatmentCensus_Def.__bases__ = tuple(bases)

            ns3.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminationAcquisition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContaminationAcquisition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ContaminationAcquisition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogenTaxonId"), aname="_pathogenTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"infectiousHostSource"), aname="_infectiousHostSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contaminatedSource"), aname="_contaminatedSource", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"contaminationProbability"), aname="_contaminationProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._pathogenTaxonId = None
                    self._infectiousHostSource = None
                    self._contaminatedSource = None
                    self._contaminationProbability = None
                    return
            Holder.__name__ = "ContaminationAcquisition_Holder"
            self.pyclass = Holder

    class PopulationCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PopulationCensusDescription_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"populationSpecies"), aname="_populationSpecies", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"locations"), aname="_locations", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._populationSpecies = None
                    self._characteristics = []
                    self._locations = []
                    return
            Holder.__name__ = "PopulationCensusDescription_Holder"
            self.pyclass = Holder

    class AbioticEcosystemElementCensusDescription_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AbioticEcosystemElementCensusDescription")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.AbioticEcosystemElementCensusDescription_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"abioticElementID"), aname="_abioticElementID", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"characteristics"), aname="_characteristics", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticElementID = None
                    self._characteristics = []
                    return
            Holder.__name__ = "AbioticEcosystemElementCensusDescription_Holder"
            self.pyclass = Holder

    class ContaminatedThingCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContaminatedThingCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContaminatedThingCensus_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"kindOfThing"), aname="_kindOfThing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"censusData"), aname="_censusData", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Census_Def not in ns3.ContaminatedThingCensus_Def.__bases__:
                bases = list(ns3.ContaminatedThingCensus_Def.__bases__)
                bases.insert(0, ns3.Census_Def)
                ns3.ContaminatedThingCensus_Def.__bases__ = tuple(bases)

            ns3.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContaminatedThingCensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContaminatedThingCensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContaminatedThingCensusData_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionContaminated"), aname="_fractionContaminated", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ContaminatedThingCensusData",lazy=True)(pname=(ns,"exceptionSublocations"), aname="_exceptionSublocations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CensusData_Def not in ns3.ContaminatedThingCensusData_Def.__bases__:
                bases = list(ns3.ContaminatedThingCensusData_Def.__bases__)
                bases.insert(0, ns3.CensusData_Def)
                ns3.ContaminatedThingCensusData_Def.__bases__ = tuple(bases)

            ns3.CensusData_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class PreEpidemicEcosystemCensus_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PreEpidemicEcosystemCensus")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PreEpidemicEcosystemCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"nameOfAdministrativeUnit"), aname="_nameOfAdministrativeUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfHouseholds"), aname="_numberOfHouseholds", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"additionalDescription"), aname="_additionalDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PreEpidemicEcosystemCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nameOfAdministrativeUnit = None
                    self._numberOfPeople = None
                    self._numberOfHouseholds = None
                    self._numberOfSchools = None
                    self._numberOfWorkplaces = None
                    self._additionalDescription = None
                    self._subLocationCensuses = []
                    self._referenceId = None
                    return
            Holder.__name__ = "PreEpidemicEcosystemCensus_Holder"
            self.pyclass = Holder

    class PopulationAndEnvironmentCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationAndEnvironmentCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PopulationAndEnvironmentCensus_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"nameOfAdministativeUnit"), aname="_nameOfAdministativeUnit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfPeople"), aname="_numberOfPeople", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfSchools"), aname="_numberOfSchools", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iinteger(pname=(ns,"numberOfWorkplaces"), aname="_numberOfWorkplaces", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"subLocationCensuses"), aname="_subLocationCensuses", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.Census_Def not in ns3.PopulationAndEnvironmentCensus_Def.__bases__:
                bases = list(ns3.PopulationAndEnvironmentCensus_Def.__bases__)
                bases.insert(0, ns3.Census_Def)
                ns3.PopulationAndEnvironmentCensus_Def.__bases__ = tuple(bases)

            ns3.Census_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class InfectiousDisease_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "InfectiousDisease")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.InfectiousDisease_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","SnomedId",lazy=True)(pname=(ns,"diseaseId"), aname="_diseaseId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesWithDisease"), aname="_speciesWithDisease", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"causalPathogen"), aname="_causalPathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"incubationPeriod"), aname="_incubationPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"prodromalPeriod"), aname="_prodromalPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"fulminantPeriod"), aname="_fulminantPeriod", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Interval",lazy=True)(pname=(ns,"otherIntervals"), aname="_otherIntervals", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeWithProbability",lazy=True)(pname=(ns,"diseaseOutcomesWithProbabilities"), aname="_diseaseOutcomesWithProbabilities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.InfectiousDisease_Def.__bases__:
                bases = list(ns3.InfectiousDisease_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.InfectiousDisease_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class FractionOfThingContaminated_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "FractionOfThingContaminated")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.FractionOfThingContaminated_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","AbioticEcosystemEnum",lazy=True)(pname=(ns,"abioticEcosystemElement"), aname="_abioticEcosystemElement", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fraction"), aname="_fraction", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._abioticEcosystemElement = None
                    self._fraction = None
                    return
            Holder.__name__ = "FractionOfThingContaminated_Holder"
            self.pyclass = Holder

    class ApolloPathogenCode_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ApolloPathogenCode")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ApolloPathogenCode_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"ncbiTaxonId"), aname="_ncbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"cladeName"), aname="_cladeName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._ncbiTaxonId = None
                    self._cladeName = None
                    return
            Holder.__name__ = "ApolloPathogenCode_Holder"
            self.pyclass = Holder

    class NcbiTaxonId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NcbiTaxonId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class SnomedId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SnomedId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class vaccineOntologyId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "vaccineOntologyId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class RxNormId_Def(ZSI.TC.Token, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RxNormId")
        def __init__(self, pname, **kw):
            ZSI.TC.Token.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ProbabilityValuePair_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ProbabilityValuePair")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ProbabilityValuePair_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._value = None
                    self._probability = None
                    return
            Holder.__name__ = "ProbabilityValuePair_Holder"
            self.pyclass = Holder

    class ProbabilityDistribution_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ProbabilityDistribution_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._referenceId = None
                    return
            Holder.__name__ = "ProbabilityDistribution_Holder"
            self.pyclass = Holder

    class UnconditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UnconditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.UnconditionalProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.UnconditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns3.UnconditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.UnconditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class NonparametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NonparametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.NonparametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.UnconditionalProbabilityDistribution_Def not in ns3.NonparametricProbabilityDistribution_Def.__bases__:
                bases = list(ns3.NonparametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.UnconditionalProbabilityDistribution_Def)
                ns3.NonparametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.UnconditionalProbabilityDistribution_Def not in ns3.ParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns3.ParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.UnconditionalProbabilityDistribution_Def)
                ns3.ParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.UnconditionalProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiscreteParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiscreteParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DiscreteParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ParametricProbabilityDistribution_Def not in ns3.DiscreteParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns3.DiscreteParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.ParametricProbabilityDistribution_Def)
                ns3.DiscreteParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousParametricProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContinuousParametricProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContinuousParametricProbabilityDistribution_Def.schema
            TClist = []
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ParametricProbabilityDistribution_Def not in ns3.ContinuousParametricProbabilityDistribution_Def.__bases__:
                bases = list(ns3.ContinuousParametricProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.ParametricProbabilityDistribution_Def)
                ns3.ContinuousParametricProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.ParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class LogNormalDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LogNormalDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.LogNormalDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContinuousParametricProbabilityDistribution_Def not in ns3.LogNormalDistribution_Def.__bases__:
                bases = list(ns3.LogNormalDistribution_Def.__bases__)
                bases.insert(0, ns3.ContinuousParametricProbabilityDistribution_Def)
                ns3.LogNormalDistribution_Def.__bases__ = tuple(bases)

            ns3.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class GammaDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "GammaDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.GammaDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"theta-scale"), aname="_theta_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContinuousParametricProbabilityDistribution_Def not in ns3.GammaDistribution_Def.__bases__:
                bases = list(ns3.GammaDistribution_Def.__bases__)
                bases.insert(0, ns3.ContinuousParametricProbabilityDistribution_Def)
                ns3.GammaDistribution_Def.__bases__ = tuple(bases)

            ns3.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WeibullDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "WeibullDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.WeibullDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"k-shape"), aname="_k_shape", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"lambda-scale"), aname="_lambda_scale", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"shiftRight"), aname="_shiftRight", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PositiveDouble",lazy=True)(pname=(ns,"cutTailAt"), aname="_cutTailAt", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContinuousParametricProbabilityDistribution_Def not in ns3.WeibullDistribution_Def.__bases__:
                bases = list(ns3.WeibullDistribution_Def.__bases__)
                bases.insert(0, ns3.ContinuousParametricProbabilityDistribution_Def)
                ns3.WeibullDistribution_Def.__bases__ = tuple(bases)

            ns3.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContinuousUniformDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContinuousUniformDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContinuousUniformDistribution_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"minimumValue"), aname="_minimumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"maximumValue"), aname="_maximumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ContinuousParametricProbabilityDistribution_Def not in ns3.ContinuousUniformDistribution_Def.__bases__:
                bases = list(ns3.ContinuousUniformDistribution_Def.__bases__)
                bases.insert(0, ns3.ContinuousParametricProbabilityDistribution_Def)
                ns3.ContinuousUniformDistribution_Def.__bases__ = tuple(bases)

            ns3.ContinuousParametricProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanWithConfidenceInterval_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MeanWithConfidenceInterval")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.MeanWithConfidenceInterval_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"lowerBound"), aname="_lowerBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"upperBound"), aname="_upperBound", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Percent",lazy=True)(pname=(ns,"confidence"), aname="_confidence", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.MeanWithConfidenceInterval_Def.__bases__:
                bases = list(ns3.MeanWithConfidenceInterval_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.MeanWithConfidenceInterval_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanWithStandardDeviation_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MeanWithStandardDeviation")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.MeanWithStandardDeviation_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"standardDeviation"), aname="_standardDeviation", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.MeanWithStandardDeviation_Def.__bases__:
                bases = list(ns3.MeanWithStandardDeviation_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.MeanWithStandardDeviation_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class MeanMedianMinimumMaximum_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MeanMedianMinimumMaximum")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.MeanMedianMinimumMaximum_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"mean"), aname="_mean", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"median"), aname="_median", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumValue"), aname="_minimumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"maximumValue"), aname="_maximumValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"sampleSize"), aname="_sampleSize", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.MeanMedianMinimumMaximum_Def.__bases__:
                bases = list(ns3.MeanMedianMinimumMaximum_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.MeanMedianMinimumMaximum_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditionalProbabilityDistribution_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ConditionalProbabilityDistribution")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ConditionalProbabilityDistribution_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditioningVariable",lazy=True)(pname=(ns,"firstConditioningVariable"), aname="_firstConditioningVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ProbabilityDistribution_Def not in ns3.ConditionalProbabilityDistribution_Def.__bases__:
                bases = list(ns3.ConditionalProbabilityDistribution_Def.__bases__)
                bases.insert(0, ns3.ProbabilityDistribution_Def)
                ns3.ConditionalProbabilityDistribution_Def.__bases__ = tuple(bases)

            ns3.ProbabilityDistribution_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ConditioningVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ConditioningVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ConditioningVariable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditioningVariableEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Category",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._categories = []
                    return
            Holder.__name__ = "ConditioningVariable_Holder"
            self.pyclass = Holder

    class Category_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Category")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Category_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnconditionalProbabilityDistribution",lazy=True)(pname=(ns,"unconditionalProbabilityDistribution"), aname="_unconditionalProbabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditioningVariable",lazy=True)(pname=(ns,"conditioningVariable"), aname="_conditioningVariable", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._unconditionalProbabilityDistribution = None
                    self._conditioningVariable = None
                    return
            Holder.__name__ = "Category_Holder"
            self.pyclass = Holder

    class ArrayAxis_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ArrayAxis")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ArrayAxis_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditioningVariableEnum",lazy=True)(pname=(ns,"name"), aname="_name", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseCountCategory",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._name = None
                    self._categories = []
                    return
            Holder.__name__ = "ArrayAxis_Holder"
            self.pyclass = Holder

    class CaseCountCategory_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseCountCategory")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseCountCategory_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"count"), aname="_count", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ArrayAxis",lazy=True)(pname=(ns,"arrayAxis"), aname="_arrayAxis", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoryDefinition = None
                    self._count = None
                    self._arrayAxis = None
                    return
            Holder.__name__ = "CaseCountCategory_Holder"
            self.pyclass = Holder

    class VariableCategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VariableCategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.VariableCategoryDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","CategoryDefinition",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categories = []
                    return
            Holder.__name__ = "VariableCategoryDefinition_Holder"
            self.pyclass = Holder

    class CategoryDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CategoryDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CategoryDefinition_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CategoryDefinition_Holder"
            self.pyclass = Holder

    class AbioticEcosystemEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AbioticEcosystemEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ConditioningVariableEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ConditioningVariableEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class ApolloIndexableItemTypeEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ApolloIndexableItemTypeEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfMeasureEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UnitOfMeasureEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class UnitOfDistanceEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "UnitOfDistanceEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeWithProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseOutcomeWithProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.DiseaseOutcomeWithProbability_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._title = None
                    self._diseaseOutcome = None
                    self._probability = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithProbability_Holder"
            self.pyclass = Holder

    class SeasonalityFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SeasonalityFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SeasonalityFunctionParameters_Def.schema
            TClist = [ZSI.TCnumbers.FPdouble(pname=(ns,"maximumSeasonalLatitude"), aname="_maximumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"minimumSeasonalLatitude"), aname="_minimumSeasonalLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"seasonalTemporalOffset"), aname="_seasonalTemporalOffset", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._maximumSeasonalLatitude = None
                    self._minimumSeasonalLatitude = None
                    self._seasonalTemporalOffset = None
                    return
            Holder.__name__ = "SeasonalityFunctionParameters_Holder"
            self.pyclass = Holder

    class SpatialKernelFunctionParameters_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "SpatialKernelFunctionParameters")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.SpatialKernelFunctionParameters_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"type"), aname="_type", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a0"), aname="_a0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"a1"), aname="_a1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b0"), aname="_b0", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"b1"), aname="_b1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"c1"), aname="_c1", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"cutoff"), aname="_cutoff", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._type = None
                    self._a0 = None
                    self._a1 = None
                    self._b0 = None
                    self._b1 = None
                    self._c1 = None
                    self._cutoff = None
                    return
            Holder.__name__ = "SpatialKernelFunctionParameters_Holder"
            self.pyclass = Holder

    class Location_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Location")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Location_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloLocationCode",lazy=True)(pname=(ns,"apolloLocationCode"), aname="_apolloLocationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LocationDefinition",lazy=True)(pname=(ns,"locationDefinition"), aname="_locationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NamedMultiGeometry",lazy=True)(pname=(ns,"namedMultiGeometry"), aname="_namedMultiGeometry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CartesianCircleLocationDefinition",lazy=True)(pname=(ns,"cartesianCircleLocationDefinition"), aname="_cartesianCircleLocationDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apolloLocationCode = None
                    self._locationDefinition = None
                    self._namedMultiGeometry = None
                    self._cartesianCircleLocationDefinition = None
                    self._textualDescription = None
                    return
            Holder.__name__ = "Location_Holder"
            self.pyclass = Holder

    class CensusData_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CensusData")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.CensusData_Def.schema
            TClist = [ZSI.TCtimes.gDateTime(pname=(ns,"date"), aname="_date", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.CensusData_Def.__bases__:
                bases = list(ns3.CensusData_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.CensusData_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Census_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Census")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Census_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.Iint(pname=(ns,"simulatorTime"), aname="_simulatorTime", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"referenceDate"), aname="_referenceDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ApolloIndexableItem_Def not in ns3.Census_Def.__bases__:
                bases = list(ns3.Census_Def.__bases__)
                bases.insert(0, ns3.ApolloIndexableItem_Def)
                ns3.Census_Def.__bases__ = tuple(bases)

            ns3.ApolloIndexableItem_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Population_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Population")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Population_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PopulationAndEnvironmentCensus",lazy=True)(pname=(ns,"census"), aname="_census", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._census = None
                    return
            Holder.__name__ = "Population_Holder"
            self.pyclass = Holder

    class Individual_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Individual")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Individual_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalIndividualBehavior",lazy=True)(pname=(ns,"conditionalBehaviors"), aname="_conditionalBehaviors", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._conditionalBehaviors = []
                    return
            Holder.__name__ = "Individual_Holder"
            self.pyclass = Holder

    class ConditionalIndividualBehavior_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ConditionalIndividualBehavior")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ConditionalIndividualBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","BehaviorEnum",lazy=True)(pname=(ns,"behavior"), aname="_behavior", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditionalProbabilityDistribution",lazy=True)(pname=(ns,"conditionalProbability"), aname="_conditionalProbability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._behavior = None
                    self._conditionalProbability = None
                    return
            Holder.__name__ = "ConditionalIndividualBehavior_Holder"
            self.pyclass = Holder

    class BehaviorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BehaviorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceClosureControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PlaceClosureControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.PlaceClosureControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PlaceEnum",lazy=True)(pname=(ns,"placeClass"), aname="_placeClass", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"closeIndividualPlacesIndependently"), aname="_closeIndividualPlacesIndependently", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"closurePeriod"), aname="_closurePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"communityTransmissionMultiplier"), aname="_communityTransmissionMultiplier", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.PlaceClosureControlStrategy_Def.__bases__:
                bases = list(ns3.PlaceClosureControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.PlaceClosureControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseQuarantineControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseQuarantineControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.CaseQuarantineControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"quarantinePeriod"), aname="_quarantinePeriod", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"householdTransmissionMultiplier"), aname="_householdTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"schoolTransmissionMultiplier"), aname="_schoolTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"workplaceTransmissionMultiplier"), aname="_workplaceTransmissionMultiplier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.CaseQuarantineControlStrategy_Def.__bases__:
                bases = list(ns3.CaseQuarantineControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.CaseQuarantineControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class BorderControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "BorderControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.BorderControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probabilityEntryDenied"), aname="_probabilityEntryDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probabilityExitDenied"), aname="_probabilityExitDenied", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.BorderControlStrategy_Def.__bases__:
                bases = list(ns3.BorderControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.BorderControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class VectorControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "VectorControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.VectorControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"vectorTaxonId"), aname="_vectorTaxonId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.VectorControlStrategy_Def.__bases__:
                bases = list(ns3.VectorControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.VectorControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WolbachiaControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "WolbachiaControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.WolbachiaControlStrategy_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"wolbachiaSitesEveryNth"), aname="_wolbachiaSitesEveryNth", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"wolbachiaSeedAdultsPerHouse"), aname="_wolbachiaSeedAdultsPerHouse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"clearWolbachiaOnMigration"), aname="_clearWolbachiaOnMigration", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","FixedDuration",lazy=True)(pname=(ns,"wolbachiaReleaseInterval"), aname="_wolbachiaReleaseInterval", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","WolbachiaReleaseSiteEnum",lazy=True)(pname=(ns,"wolbachiaReleaseSites"), aname="_wolbachiaReleaseSites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnEggMortalityRate"), aname="_wolbachiaEffectOnEggMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnAdultMortalityRate"), aname="_wolbachiaEffectOnAdultMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnLarvalMortalityRate"), aname="_wolbachiaEffectOnLarvalMortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnFecundity"), aname="_wolbachiaEffectOnFecundity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnMatingProbability"), aname="_wolbachiaEffectOnMatingProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnLeakageRate"), aname="_wolbachiaEffectOnLeakageRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaEffectOnVectorialCapacity"), aname="_wolbachiaEffectOnVectorialCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaPreReleaseAdultSuppressionEfficacy"), aname="_wolbachiaPreReleaseAdultSuppressionEfficacy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"wolbachiaPreReleaseLarvalSuppressionEfficacy"), aname="_wolbachiaPreReleaseLarvalSuppressionEfficacy", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.VectorControlStrategy_Def not in ns3.WolbachiaControlStrategy_Def.__bases__:
                bases = list(ns3.WolbachiaControlStrategy_Def.__bases__)
                bases.insert(0, ns3.VectorControlStrategy_Def)
                ns3.WolbachiaControlStrategy_Def.__bases__ = tuple(bases)

            ns3.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class WolbachiaReleaseSiteEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "WolbachiaReleaseSiteEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LarvicideControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LarvicideControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.LarvicideControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.VectorControlStrategy_Def not in ns3.LarvicideControlStrategy_Def.__bases__:
                bases = list(ns3.LarvicideControlStrategy_Def.__bases__)
                bases.insert(0, ns3.VectorControlStrategy_Def)
                ns3.LarvicideControlStrategy_Def.__bases__ = tuple(bases)

            ns3.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndoorResidualSprayingVectorControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndoorResidualSprayingVectorControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.IndoorResidualSprayingVectorControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionOfAdultsAffected"), aname="_fractionOfAdultsAffected", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.VectorControlStrategy_Def not in ns3.IndoorResidualSprayingVectorControlStrategy_Def.__bases__:
                bases = list(ns3.IndoorResidualSprayingVectorControlStrategy_Def.__bases__)
                bases.insert(0, ns3.VectorControlStrategy_Def)
                ns3.IndoorResidualSprayingVectorControlStrategy_Def.__bases__ = tuple(bases)

            ns3.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ContainerReductionControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContainerReductionControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ContainerReductionControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"coverRadius"), aname="_coverRadius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionReductionOfEggs"), aname="_fractionReductionOfEggs", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"fractionReductionOfLarvae"), aname="_fractionReductionOfLarvae", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.VectorControlStrategy_Def not in ns3.ContainerReductionControlStrategy_Def.__bases__:
                bases = list(ns3.ContainerReductionControlStrategy_Def.__bases__)
                bases.insert(0, ns3.VectorControlStrategy_Def)
                ns3.ContainerReductionControlStrategy_Def.__bases__ = tuple(bases)

            ns3.VectorControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Percent_Def(ZSI.TCnumbers.InonNegativeInteger, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Percent")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.InonNegativeInteger.__init__(self, pname, pyclass=None, **kw)
            class Holder(int):
                typecode = self
            self.pyclass = Holder

    class Latitude_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Latitude")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class Longitude_Def(ZSI.TCnumbers.FPdouble, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Longitude")
        def __init__(self, pname, **kw):
            ZSI.TCnumbers.FPdouble.__init__(self, pname, pyclass=None, **kw)
            class Holder(float):
                typecode = self
            self.pyclass = Holder

    class TravelRestrictionControlStrategy_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TravelRestrictionControlStrategy")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.TravelRestrictionControlStrategy_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"maximumTravelDistanceInKm"), aname="_maximumTravelDistanceInKm", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"compliance"), aname="_compliance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.InfectiousDiseaseControlStrategy_Def not in ns3.TravelRestrictionControlStrategy_Def.__bases__:
                bases = list(ns3.TravelRestrictionControlStrategy_Def.__bases__)
                bases.insert(0, ns3.InfectiousDiseaseControlStrategy_Def)
                ns3.TravelRestrictionControlStrategy_Def.__bases__ = tuple(bases)

            ns3.InfectiousDiseaseControlStrategy_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DiseaseSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.DiseaseSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloPathogenCode",lazy=True)(pname=(ns,"pathogen"), aname="_pathogen", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfCase"), aname="_speciesOfCase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"caseDefinition"), aname="_caseDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"sensitivityOfCaseDetection"), aname="_sensitivityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"specificityOfCaseDetection"), aname="_specificityOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"timeDelayOfCaseDetection"), aname="_timeDelayOfCaseDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._pathogen = None
                    self._speciesOfCase = None
                    self._caseDefinition = None
                    self._sensitivityOfCaseDetection = None
                    self._specificityOfCaseDetection = None
                    self._timeDelayOfCaseDetection = None
                    return
            Holder.__name__ = "DiseaseSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSurveillanceCapability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentSurveillanceCapability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatmentSurveillanceCapability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","IndividualTreatmentEnum",lazy=True)(pname=(ns,"treatment"), aname="_treatment", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"sensitivityOfTreatmentDetection"), aname="_sensitivityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"specificityOfTreatmentDetection"), aname="_specificityOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"timeDelayOfTreatmentDetection"), aname="_timeDelayOfTreatmentDetection", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._location = None
                    self._treatment = None
                    self._sensitivityOfTreatmentDetection = None
                    self._specificityOfTreatmentDetection = None
                    self._timeDelayOfTreatmentDetection = None
                    return
            Holder.__name__ = "TreatmentSurveillanceCapability_Holder"
            self.pyclass = Holder

    class TreatmentSystemLogistics_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TreatmentSystemLogistics")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TreatmentSystemLogistics_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Location",lazy=True)(pname=(ns,"location"), aname="_location", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"supplySchedulePerDay"), aname="_supplySchedulePerDay", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"supplyScheduleUnits"), aname="_supplyScheduleUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"administrationCapacityPerDay"), aname="_administrationCapacityPerDay", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"administrationCapacityUnits"), aname="_administrationCapacityUnits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._location = None
                    self._supplySchedulePerDay = []
                    self._supplyScheduleUnits = None
                    self._administrationCapacityPerDay = []
                    self._administrationCapacityUnits = None
                    return
            Holder.__name__ = "TreatmentSystemLogistics_Holder"
            self.pyclass = Holder

    class Rate_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Rate")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Rate_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"numeratorUnitOfMeasure"), aname="_numeratorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfMeasureEnum",lazy=True)(pname=(ns,"denominatorUnitOfMeasure"), aname="_denominatorUnitOfMeasure", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilityDistribution",lazy=True)(pname=(ns,"probabilityDistribution"), aname="_probabilityDistribution", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._numeratorUnitOfMeasure = None
                    self._denominatorUnitOfMeasure = None
                    self._value = None
                    self._probabilityDistribution = None
                    return
            Holder.__name__ = "Rate_Holder"
            self.pyclass = Holder

    class NonApolloParameter_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NonApolloParameter")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.NonApolloParameter_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"parameterName"), aname="_parameterName", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"parameterValue"), aname="_parameterValue", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._description = None
                    self._parameterName = None
                    self._parameterValue = None
                    return
            Holder.__name__ = "NonApolloParameter_Holder"
            self.pyclass = Holder

    class WithinGroupTransmissionProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "WithinGroupTransmissionProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.WithinGroupTransmissionProbability_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"groupType"), aname="_groupType", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._groupType = None
                    self._probability = None
                    return
            Holder.__name__ = "WithinGroupTransmissionProbability_Holder"
            self.pyclass = Holder

    class OperatorEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "OperatorEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualLifeCycle_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualLifeCycle")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.IndividualLifeCycle_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesId"), aname="_speciesId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LifeStageWithDurationAndMortality",lazy=True)(pname=(ns,"lifeStagesWithDurationsAndMortalities"), aname="_lifeStagesWithDurationsAndMortalities", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesId = None
                    self._lifeStagesWithDurationsAndMortalities = []
                    return
            Holder.__name__ = "IndividualLifeCycle_Holder"
            self.pyclass = Holder

    class AaaDummyType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "AaaDummyType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.AaaDummyType_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","TreatmentEfficacy",lazy=True)(pname=(ns,"elementIWantToScreenSnapWithoutArrows"), aname="_elementIWantToScreenSnapWithoutArrows", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._elementIWantToScreenSnapWithoutArrows = None
                    return
            Holder.__name__ = "AaaDummyType_Holder"
            self.pyclass = Holder

    class IndividualBehavior_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualBehavior")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.IndividualBehavior_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "IndividualBehavior_Holder"
            self.pyclass = Holder

    class IndividualMosquitoBehavior_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualMosquitoBehavior")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.IndividualMosquitoBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilisticParameter",lazy=True)(pname=(ns,"biteProbability"), aname="_biteProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"biteRadius"), aname="_biteRadius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"timeBetweenBites"), aname="_timeBetweenBites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"migrationSpeed"), aname="_migrationSpeed", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"shadeAffinity"), aname="_shadeAffinity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"maleMatingRadius"), aname="_maleMatingRadius", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"matingProbability"), aname="_matingProbability", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"straightTravelAfterOviposit"), aname="_straightTravelAfterOviposit", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.IndividualBehavior_Def not in ns3.IndividualMosquitoBehavior_Def.__bases__:
                bases = list(ns3.IndividualMosquitoBehavior_Def.__bases__)
                bases.insert(0, ns3.IndividualBehavior_Def)
                ns3.IndividualMosquitoBehavior_Def.__bases__ = tuple(bases)

            ns3.IndividualBehavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class IndividualHumanBehavior_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualHumanBehavior")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.IndividualHumanBehavior_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"speedOfMovement"), aname="_speedOfMovement", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Fraction",lazy=True)(pname=(ns,"buildingAffinity"), aname="_buildingAffinity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.IndividualBehavior_Def not in ns3.IndividualHumanBehavior_Def.__bases__:
                bases = list(ns3.IndividualHumanBehavior_Def.__bases__)
                bases.insert(0, ns3.IndividualBehavior_Def)
                ns3.IndividualHumanBehavior_Def.__bases__ = tuple(bases)

            ns3.IndividualBehavior_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class Distance_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Distance")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.Distance_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","UnitOfDistanceEnum",lazy=True)(pname=(ns,"unitOfDistance"), aname="_unitOfDistance", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.FPdouble(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.ParameterValue_Def not in ns3.Distance_Def.__bases__:
                bases = list(ns3.Distance_Def.__bases__)
                bases.insert(0, ns3.ParameterValue_Def)
                ns3.Distance_Def.__bases__ = tuple(bases)

            ns3.ParameterValue_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ParameterValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ParameterValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ParameterValue_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "ParameterValue_Holder"
            self.pyclass = Holder

    class TransmissionProbability_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TransmissionProbability")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TransmissionProbability_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ContactDefinitionEnum",lazy=True)(pname=(ns,"contactDefinition"), aname="_contactDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"contactDefinitionText"), aname="_contactDefinitionText", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Probability",lazy=True)(pname=(ns,"probability"), aname="_probability", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._contactDefinition = None
                    self._contactDefinitionText = None
                    self._probability = None
                    return
            Holder.__name__ = "TransmissionProbability_Holder"
            self.pyclass = Holder

    class ContactDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class IndividualMosquitoReproduction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IndividualMosquitoReproduction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.IndividualMosquitoReproduction_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"gonotrophicPeriodDuration"), aname="_gonotrophicPeriodDuration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"eggsPerBrood"), aname="_eggsPerBrood", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"minimumEggsPerOviposition"), aname="_minimumEggsPerOviposition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"ageDependentFecundityReduction"), aname="_ageDependentFecundityReduction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._gonotrophicPeriodDuration = None
                    self._eggsPerBrood = None
                    self._minimumEggsPerOviposition = None
                    self._ageDependentFecundityReduction = None
                    return
            Holder.__name__ = "IndividualMosquitoReproduction_Holder"
            self.pyclass = Holder

    class LifeStageWithDurationAndMortality_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LifeStageWithDurationAndMortality")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LifeStageWithDurationAndMortality_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","DevelopmentalStageEnum",lazy=True)(pname=(ns,"stage"), aname="_stage", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"duration"), aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"mortalityRate"), aname="_mortalityRate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","MortalityFunction",lazy=True)(pname=(ns,"mortalityFunction"), aname="_mortalityFunction", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._stage = None
                    self._duration = None
                    self._mortalityRate = None
                    self._mortalityFunction = None
                    return
            Holder.__name__ = "LifeStageWithDurationAndMortality_Holder"
            self.pyclass = Holder

    class MortalityFunction_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MortalityFunction")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.MortalityFunction_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "MortalityFunction_Holder"
            self.pyclass = Holder

    class ClaraDensityDependentMortalityFunction_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ClaraDensityDependentMortalityFunction")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.ClaraDensityDependentMortalityFunction_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"description"), aname="_description", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"omega"), aname="_omega", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"sigma"), aname="_sigma", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.MortalityFunction_Def not in ns3.ClaraDensityDependentMortalityFunction_Def.__bases__:
                bases = list(ns3.ClaraDensityDependentMortalityFunction_Def.__bases__)
                bases.insert(0, ns3.MortalityFunction_Def)
                ns3.ClaraDensityDependentMortalityFunction_Def.__bases__ = tuple(bases)

            ns3.MortalityFunction_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DevelopmentalStageEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DevelopmentalStageEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CartesianCircleLocationDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CartesianCircleLocationDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CartesianCircleLocationDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"eastWestOffsetFromCartesianCenter"), aname="_eastWestOffsetFromCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"northSouthOffsetFromCartesianCenter"), aname="_northSouthOffsetFromCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"altitudeRelativeToCartesianCenter"), aname="_altitudeRelativeToCartesianCenter", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"radius"), aname="_radius", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._eastWestOffsetFromCartesianCenter = None
                    self._northSouthOffsetFromCartesianCenter = None
                    self._altitudeRelativeToCartesianCenter = None
                    self._radius = None
                    return
            Holder.__name__ = "CartesianCircleLocationDefinition_Holder"
            self.pyclass = Holder

    class ScenarioCartesianOrigin_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ScenarioCartesianOrigin")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ScenarioCartesianOrigin_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","Longitude",lazy=True)(pname=(ns,"cartesianReferenceLongitude"), aname="_cartesianReferenceLongitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Latitude",lazy=True)(pname=(ns,"cartesianReferenceLatitude"), aname="_cartesianReferenceLatitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Distance",lazy=True)(pname=(ns,"cartesianReferenceAltitude"), aname="_cartesianReferenceAltitude", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._cartesianReferenceLongitude = None
                    self._cartesianReferenceLatitude = None
                    self._cartesianReferenceAltitude = None
                    return
            Holder.__name__ = "ScenarioCartesianOrigin_Holder"
            self.pyclass = Holder

    class OvipositionSiteCensus_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "OvipositionSiteCensus")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.OvipositionSiteCensus_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"breteauIndex"), aname="_breteauIndex", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"carryingCapacityPerHouse"), aname="_carryingCapacityPerHouse", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"heterogenousCarryingCapacity"), aname="_heterogenousCarryingCapacity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"ratioOfOutdoorToIndoorOvisites"), aname="_ratioOfOutdoorToIndoorOvisites", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"maximumRatioOfOutdoorCarryingCapacityToIndoor"), aname="_maximumRatioOfOutdoorCarryingCapacityToIndoor", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.AbioticEcosystemCensus_Def not in ns3.OvipositionSiteCensus_Def.__bases__:
                bases = list(ns3.OvipositionSiteCensus_Def.__bases__)
                bases.insert(0, ns3.AbioticEcosystemCensus_Def)
                ns3.OvipositionSiteCensus_Def.__bases__ = tuple(bases)

            ns3.AbioticEcosystemCensus_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseDefinition_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseDefinition")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.CaseDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseDefinitionEnum",lazy=True)(pname=(ns,"apolloLabel"), aname="_apolloLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationLabel"), aname="_investigationLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationDefinition"), aname="_investigationDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CategoryDefinition_Def not in ns3.CaseDefinition_Def.__bases__:
                bases = list(ns3.CaseDefinition_Def.__bases__)
                bases.insert(0, ns3.CategoryDefinition_Def)
                ns3.CaseDefinition_Def.__bases__ = tuple(bases)

            ns3.CategoryDefinition_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class CaseList_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseList")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseList_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesOfCases"), aname="_speciesOfCases", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseRecord",lazy=True)(pname=(ns,"caseRecords"), aname="_caseRecords", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesOfCases = None
                    self._caseRecords = []
                    return
            Holder.__name__ = "CaseList_Holder"
            self.pyclass = Holder

    class CaseRecord_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseRecord")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseRecord_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"caseId"), aname="_caseId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"ageInYears"), aname="_ageInYears", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","OccupationEnum",lazy=True)(pname=(ns,"occupations"), aname="_occupations", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PlaceVisited",lazy=True)(pname=(ns,"placesVisitedWhileSusceptibleOrInfectious"), aname="_placesVisitedWhileSusceptibleOrInfectious", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"infectionAcquiredFromCaseId"), aname="_infectionAcquiredFromCaseId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeWithLocationDateTime",lazy=True)(pname=(ns,"diseaseOutcomesWithLocationDateTime"), aname="_diseaseOutcomesWithLocationDateTime", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LabTestAndResult",lazy=True)(pname=(ns,"labTestsAndResults"), aname="_labTestsAndResults", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"pathogenGeneSequence"), aname="_pathogenGeneSequence", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._caseId = None
                    self._ageInYears = None
                    self._occupations = []
                    self._placesVisitedWhileSusceptibleOrInfectious = []
                    self._infectionAcquiredFromCaseId = None
                    self._diseaseOutcomesWithLocationDateTime = []
                    self._labTestsAndResults = []
                    self._pathogenGeneSequence = None
                    return
            Holder.__name__ = "CaseRecord_Holder"
            self.pyclass = Holder

    class CaseDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CaseCount_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseCount")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseCount_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"countTitle"), aname="_countTitle", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseDefinitionEnum",lazy=True)(pname=(ns,"caseDefinitionsIncluded"), aname="_caseDefinitionsIncluded", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"totalCount"), aname="_totalCount", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseCountArray",lazy=True)(pname=(ns,"caseCountArray"), aname="_caseCountArray", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countTitle = None
                    self._caseDefinitionsIncluded = []
                    self._totalCount = None
                    self._caseCountArray = None
                    self._referenceId = None
                    return
            Holder.__name__ = "CaseCount_Holder"
            self.pyclass = Holder

    class CaseCountArray_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseCountArray")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseCountArray_Def.schema
            TClist = [ZSI.TCnumbers.IpositiveInteger(pname=(ns,"nDimensions"), aname="_nDimensions", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ArrayAxis",lazy=True)(pname=(ns,"firstArrayAxis"), aname="_firstArrayAxis", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._nDimensions = None
                    self._firstArrayAxis = None
                    return
            Holder.__name__ = "CaseCountArray_Holder"
            self.pyclass = Holder

    class CaseRecordCategoricalVariables_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseRecordCategoricalVariables")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseRecordCategoricalVariables_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"someWayToIdentifyOutbreak"), aname="_someWayToIdentifyOutbreak", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseRecordCategoricalVariable",lazy=True)(pname=(ns,"categoricalVariablesAndCategories"), aname="_categoricalVariablesAndCategories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._someWayToIdentifyOutbreak = None
                    self._categoricalVariablesAndCategories = []
                    return
            Holder.__name__ = "CaseRecordCategoricalVariables_Holder"
            self.pyclass = Holder

    class CaseRecordCategoricalVariable_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseRecordCategoricalVariable")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseRecordCategoricalVariable_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ConditioningVariableEnum",lazy=True)(pname=(ns,"categoricalVariable"), aname="_categoricalVariable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CategoryDefinition",lazy=True)(pname=(ns,"categories"), aname="_categories", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._categoricalVariable = None
                    self._categories = []
                    return
            Holder.__name__ = "CaseRecordCategoricalVariable_Holder"
            self.pyclass = Holder

    class EpidemicPeriod_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "EpidemicPeriod")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.EpidemicPeriod_Def.schema
            TClist = [ZSI.TCtimes.gDate(pname=(ns,"startDate"), aname="_startDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","EpidemicPeriodBoundaryDefinitionEnum",lazy=True)(pname=(ns,"startDateDefinition"), aname="_startDateDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"endDate"), aname="_endDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","EpidemicPeriodBoundaryDefinitionEnum",lazy=True)(pname=(ns,"endDateDefinition"), aname="_endDateDefinition", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startDate = None
                    self._startDateDefinition = None
                    self._endDate = None
                    self._endDateDefinition = None
                    return
            Holder.__name__ = "EpidemicPeriod_Holder"
            self.pyclass = Holder

    class ContactDefinition_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ContactDefinition")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ContactDefinition_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","ContactDefinitionEnum",lazy=True)(pname=(ns,"apolloLabel"), aname="_apolloLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationLabel"), aname="_investigationLabel", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"investigationDefinition"), aname="_investigationDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._apolloLabel = None
                    self._investigationLabel = None
                    self._investigationDefinition = None
                    self._referenceId = None
                    return
            Holder.__name__ = "ContactDefinition_Holder"
            self.pyclass = Holder

    class TransmissionTree_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "TransmissionTree")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.TransmissionTree_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseRecord",lazy=True)(pname=(ns,"thisCase"), aname="_thisCase", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","TransmissionTree",lazy=True)(pname=(ns,"casesThisCaseInfected"), aname="_casesThisCaseInfected", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._thisCase = None
                    self._casesThisCaseInfected = []
                    return
            Holder.__name__ = "TransmissionTree_Holder"
            self.pyclass = Holder

    class RelativeRiskDataSet_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "RelativeRiskDataSet")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.RelativeRiskDataSet_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseCountArray",lazy=True)(pname=(ns,"caseCountArray"), aname="_caseCountArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CaseCountArray",lazy=True)(pname=(ns,"controlCountArray"), aname="_controlCountArray", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Reference",lazy=True)(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._textualDescription = None
                    self._caseCountArray = None
                    self._controlCountArray = None
                    self._referenceId = None
                    return
            Holder.__name__ = "RelativeRiskDataSet_Holder"
            self.pyclass = Holder

    class CaseVariableAndValue_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CaseVariableAndValue")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CaseVariableAndValue_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"variable"), aname="_variable", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","CategoryDefinition",lazy=True)(pname=(ns,"categoryDefinition"), aname="_categoryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"value"), aname="_value", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._variable = None
                    self._categoryDefinition = None
                    self._value = None
                    return
            Holder.__name__ = "CaseVariableAndValue_Holder"
            self.pyclass = Holder

    class PopulationInfectionSurvey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationInfectionSurvey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PopulationInfectionSurvey_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"speciesSampled"), aname="_speciesSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesSampledNcbiTaxonId"), aname="_speciesSampledNcbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberSampled"), aname="_numberSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"whereSampled"), aname="_whereSampled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"testName"), aname="_testName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LoincId",lazy=True)(pname=(ns,"testLoincId"), aname="_testLoincId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"numberOfSamplesPositive"), aname="_numberOfSamplesPositive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesSampled = None
                    self._speciesSampledNcbiTaxonId = None
                    self._numberSampled = None
                    self._whereSampled = None
                    self._testName = None
                    self._testLoincId = None
                    self._numberOfSamplesPositive = None
                    self._referenceId = None
                    return
            Holder.__name__ = "PopulationInfectionSurvey_Holder"
            self.pyclass = Holder

    class PopulationSerologySurvey_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PopulationSerologySurvey")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PopulationSerologySurvey_Def.schema
            TClist = [ZSI.TC.Token(pname=(ns,"speciesSampled"), aname="_speciesSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NcbiTaxonId",lazy=True)(pname=(ns,"speciesSampledNcbiTaxonId"), aname="_speciesSampledNcbiTaxonId", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.IpositiveInteger(pname=(ns,"numberSampled"), aname="_numberSampled", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"whereSampled"), aname="_whereSampled", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"testName"), aname="_testName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LoincId",lazy=True)(pname=(ns,"testLoincId"), aname="_testLoincId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"numberOfSamplesPositive"), aname="_numberOfSamplesPositive", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._speciesSampled = None
                    self._speciesSampledNcbiTaxonId = None
                    self._numberSampled = None
                    self._whereSampled = None
                    self._testName = None
                    self._testLoincId = None
                    self._numberOfSamplesPositive = None
                    self._referenceId = None
                    return
            Holder.__name__ = "PopulationSerologySurvey_Holder"
            self.pyclass = Holder

    class Reference_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Reference")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Reference_Def.schema
            TClist = [ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"id"), aname="_id", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"title"), aname="_title", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"authors"), aname="_authors", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"publication"), aname="_publication", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"url"), aname="_url", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"pubMedId"), aname="_pubMedId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"orcId"), aname="_orcId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"obcIdeId"), aname="_obcIdeId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._id = None
                    self._title = None
                    self._authors = None
                    self._publication = None
                    self._url = None
                    self._pubMedId = None
                    self._orcId = None
                    self._obcIdeId = None
                    return
            Holder.__name__ = "Reference_Holder"
            self.pyclass = Holder

    class EpidemicPeriodBoundaryDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "EpidemicPeriodBoundaryDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class CountType_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "CountType")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.CountType_Def.schema
            TClist = []
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    return
            Holder.__name__ = "CountType_Holder"
            self.pyclass = Holder

    class IntegerCount_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IntegerCount")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.IntegerCount_Def.schema
            TClist = [ZSI.TCnumbers.Iinteger(pname=(ns,"integer"), aname="_integer", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CountType_Def not in ns3.IntegerCount_Def.__bases__:
                bases = list(ns3.IntegerCount_Def.__bases__)
                bases.insert(0, ns3.CountType_Def)
                ns3.IntegerCount_Def.__bases__ = tuple(bases)

            ns3.CountType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class DoubleCount_Def(TypeDefinition):
        #complexType/complexContent extension
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DoubleCount")
        def __init__(self, pname, ofwhat=(), extend=False, restrict=False, attributes=None, **kw):
            ns = ns3.DoubleCount_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"double"), aname="_double", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            attributes = self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            if ns3.CountType_Def not in ns3.DoubleCount_Def.__bases__:
                bases = list(ns3.DoubleCount_Def.__bases__)
                bases.insert(0, ns3.CountType_Def)
                ns3.DoubleCount_Def.__bases__ = tuple(bases)

            ns3.CountType_Def.__init__(self, pname, ofwhat=TClist, extend=True, attributes=attributes, **kw)

    class ReproductionNumber_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "ReproductionNumber")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.ReproductionNumber_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","NonNegativeDouble",lazy=True)(pname=(ns,"exactValue"), aname="_exactValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ProbabilityDistribution",lazy=True)(pname=(ns,"uncertainValue"), aname="_uncertainValue", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._exactValue = None
                    self._uncertainValue = None
                    self._referenceId = None
                    return
            Holder.__name__ = "ReproductionNumber_Holder"
            self.pyclass = Holder

    class Interval_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "Interval")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.Interval_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","IntervalBoundaryDefinitionEnum",lazy=True)(pname=(ns,"startBoundaryDefinition"), aname="_startBoundaryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","IntervalBoundaryDefinitionEnum",lazy=True)(pname=(ns,"endBoundaryDefinition"), aname="_endBoundaryDefinition", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Duration",lazy=True)(pname=(ns,"duration"), aname="_duration", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Token(pname=(ns,"readableTitle"), aname="_readableTitle", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCnumbers.InonNegativeInteger(pname=(ns,"referenceId"), aname="_referenceId", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._startBoundaryDefinition = None
                    self._endBoundaryDefinition = None
                    self._duration = None
                    self._readableTitle = None
                    self._referenceId = None
                    return
            Holder.__name__ = "Interval_Holder"
            self.pyclass = Holder

    class IntervalBoundaryDefinitionEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "IntervalBoundaryDefinitionEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class LocationPolygon_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LocationPolygon")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LocationPolygon_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"linearRing"), aname="_linearRing", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._linearRing = None
                    return
            Holder.__name__ = "LocationPolygon_Holder"
            self.pyclass = Holder

    class LoincId_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LoincId")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class DiseaseOutcomeWithLocationDateTime_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "DiseaseOutcomeWithLocationDateTime")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.DiseaseOutcomeWithLocationDateTime_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","DiseaseOutcomeEnum",lazy=True)(pname=(ns,"diseaseOutcome"), aname="_diseaseOutcome", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"dateTime"), aname="_dateTime", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NamedMultiGeometry",lazy=True)(pname=(ns,"namedPolygon"), aname="_namedPolygon", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._diseaseOutcome = None
                    self._dateTime = None
                    self._place = None
                    self._namedPolygon = None
                    return
            Holder.__name__ = "DiseaseOutcomeWithLocationDateTime_Holder"
            self.pyclass = Holder

    class LabTestAndResult_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "LabTestAndResult")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.LabTestAndResult_Def.schema
            TClist = [ZSI.TC.String(pname=(ns,"textualName"), aname="_textualName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","LoincId",lazy=True)(pname=(ns,"loincCode"), aname="_loincCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDateTime(pname=(ns,"sampleDate"), aname="_sampleDate", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"result"), aname="_result", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._textualName = None
                    self._loincCode = None
                    self._sampleDate = None
                    self._result = None
                    return
            Holder.__name__ = "LabTestAndResult_Holder"
            self.pyclass = Holder

    class OccupationEnum_Def(ZSI.TC.String, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "OccupationEnum")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class PlaceVisited_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "PlaceVisited")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.PlaceVisited_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","PlaceEnum",lazy=True)(pname=(ns,"place"), aname="_place", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","NamedMultiGeometry",lazy=True)(pname=(ns,"namedMultiGeometry"), aname="_namedMultiGeometry", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","Rate",lazy=True)(pname=(ns,"frequencyOfVisits"), aname="_frequencyOfVisits", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"datesOfVisits"), aname="_datesOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","RealDateSpanCategoryDefinition",lazy=True)(pname=(ns,"realDateSpansOfVisits"), aname="_realDateSpansOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","RealTimeSpanCategoryDefinition",lazy=True)(pname=(ns,"realTimeSpansOfVisits"), aname="_realTimeSpansOfVisits", minOccurs=0, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._place = None
                    self._namedMultiGeometry = None
                    self._frequencyOfVisits = None
                    self._datesOfVisits = []
                    self._realDateSpansOfVisits = []
                    self._realTimeSpansOfVisits = []
                    return
            Holder.__name__ = "PlaceVisited_Holder"
            self.pyclass = Holder

    class MultiGeometry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "MultiGeometry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.MultiGeometry_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","LocationPolygon",lazy=True)(pname=(ns,"polygons"), aname="_polygons", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._polygons = []
                    return
            Holder.__name__ = "MultiGeometry_Holder"
            self.pyclass = Holder

    class NamedMultiGeometry_Def(ZSI.TCcompound.ComplexType, TypeDefinition):
        schema = "http://types.apollo.pitt.edu/v3_0_0/"
        type = (schema, "NamedMultiGeometry")
        def __init__(self, pname, ofwhat=(), attributes=None, extend=False, restrict=False, **kw):
            ns = ns3.NamedMultiGeometry_Def.schema
            TClist = [GTD("http://types.apollo.pitt.edu/v3_0_0/","LocationPolygon",lazy=True)(pname=(ns,"polygons"), aname="_polygons", minOccurs=1, maxOccurs="unbounded", nillable=False, typed=False, encoded=kw.get("encoded")), GTD("http://types.apollo.pitt.edu/v3_0_0/","ApolloLocationCode",lazy=True)(pname=(ns,"apolloLocationCode"), aname="_apolloLocationCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"textualDescription"), aname="_textualDescription", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            self.attribute_typecode_dict = attributes or {}
            if extend: TClist += ofwhat
            if restrict: TClist = ofwhat
            ZSI.TCcompound.ComplexType.__init__(self, None, TClist, pname=pname, inorder=0, **kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._polygons = []
                    self._apolloLocationCode = None
                    self._textualDescription = None
                    return
            Holder.__name__ = "NamedMultiGeometry_Holder"
            self.pyclass = Holder

# end class ns3 (tns: http://types.apollo.pitt.edu/v3_0_0/)
