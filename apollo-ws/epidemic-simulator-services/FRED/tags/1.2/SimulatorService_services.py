################################################## 
# SimulatorService_services.py 
# generated by ZSI.generate.wsdl2python
##################################################


from SimulatorService_services_types import *
import urlparse, types
from ZSI.TCcompound import ComplexType, Struct
from ZSI import client
import ZSI
from ZSI.generate.pyclass import pyclass_type

# Locator
class SimulatorServiceLocator:
    SimulatorServiceEI_address = "http://localhost:8080/simulatorservice/services/simulatorservice"
    def getSimulatorServiceEIAddress(self):
        return SimulatorServiceLocator.SimulatorServiceEI_address
    def getSimulatorServiceEI(self, url=None, **kw):
        return SimulatorServiceBindingSOAP(url or SimulatorServiceLocator.SimulatorServiceEI_address, **kw)

# Methods
class SimulatorServiceBindingSOAP:
    def __init__(self, url, **kw):
        kw.setdefault("readerclass", None)
        kw.setdefault("writerclass", None)
        # no resource properties
        self.binding = client.Binding(url=url, **kw)
        # no ws-addressing

    # op: run
    def run(self, request):
        if isinstance(request, runRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/simulatorservice/run", **kw)
        # no output wsaction
        response = self.binding.Receive(runResponse.typecode)
        return response

    # op: getRunStatus
    def getRunStatus(self, request):
        if isinstance(request, getRunStatusRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/simulatorservice/getRunStatus", **kw)
        # no output wsaction
        response = self.binding.Receive(getRunStatusResponse.typecode)
        return response

    # op: getSupportedLocations
    def getSupportedLocations(self, request):
        if isinstance(request, getSupportedLocationsRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/simulatorservice/getSupportedLocations", **kw)
        # no output wsaction
        response = self.binding.Receive(getSupportedLocationsResponse.typecode)
        return response

    # op: batchRun
    def batchRun(self, request):
        if isinstance(request, batchRunRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/simulatorservice/batchRun", **kw)
        # no output wsaction
        response = self.binding.Receive(batchRunResponse.typecode)
        return response

    # op: getConfigurationFileForRun
    def getConfigurationFileForRun(self, request):
        if isinstance(request, getConfigurationFileForRunRequest) is False:
            raise TypeError, "%s incorrect request type" % (request.__class__)
        kw = {}
        # no input wsaction
        self.binding.Send(None, None, request, soapaction="http://service.apollo.pitt.edu/simulatorservice/getConfigurationFileForRun", **kw)
        # no output wsaction
        response = self.binding.Receive(getConfigurationFileForRunResponse.typecode)
        return response

runRequest = ns0.run_Dec().pyclass

runResponse = ns0.runResponse_Dec().pyclass

getRunStatusRequest = ns0.getRunStatus_Dec().pyclass

getRunStatusResponse = ns0.getRunStatusResponse_Dec().pyclass

getSupportedLocationsRequest = ns0.getSupportedLocations_Dec().pyclass

getSupportedLocationsResponse = ns0.getSupportedLocationsResponse_Dec().pyclass

batchRunRequest = ns0.batchRun_Dec().pyclass

batchRunResponse = ns0.batchRunResponse_Dec().pyclass

getConfigurationFileForRunRequest = ns0.getConfigurationFileForRun_Dec().pyclass

getConfigurationFileForRunResponse = ns0.getConfigurationFileForRunResponse_Dec().pyclass
