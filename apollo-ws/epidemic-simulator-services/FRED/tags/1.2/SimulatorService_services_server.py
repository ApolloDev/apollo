##################################################
# SimulatorService_services_server.py
#      Generated by ZSI.generate.wsdl2dispatch.DelAuthServiceModuleWriter
#
##################################################

from SimulatorService_services import *
from ZSI.ServiceContainer import ServiceSOAPBinding

class SimulatorService(ServiceSOAPBinding):
    soapAction = {}
    root = {}
    _wsdl = """<?xml version=\"1.0\" ?>
<wsdl:definitions name=\"SimulatorService\" targetNamespace=\"http://service.apollo.pitt.edu/simulatorservice/\" xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\" xmlns:tns=\"http://service.apollo.pitt.edu/simulatorservice/\" xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">
	<wsdl:types>
		<xsd:schema targetNamespace=\"http://service.apollo.pitt.edu/simulatorservice/\" xmlns:apollo=\"http://types.apollo.pitt.edu/\">

			<xsd:import namespace=\"http://types.apollo.pitt.edu/\" schemaLocation=\"apollo-types.xsd\">
			</xsd:import>
			<xsd:element name=\"run\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"simulatorConfiguration\" type=\"apollo:SimulatorConfiguration\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"runResponse\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"runId\" type=\"apollo:RunIdentification\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getRunStatus\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"runId\" type=\"apollo:RunIdentification\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getRunStatusResponse\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"runStatus\" type=\"apollo:RunStatus\">
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getSupportedLocations\">
				<xsd:complexType>
					<xsd:sequence/>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getSupportedLocationsResponse\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element maxOccurs=\"unbounded\" minOccurs=\"1\" name=\"supportedPopluationLocations\" type=\"apollo:SupportedPopulationLocation\">
						</xsd:element>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"batchRun\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"batchRunSimulatorConfiguration\" type=\"apollo:BatchRunSimulatorConfiguration\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"batchRunResponse\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"batchRun\" type=\"apollo:BatchRunResult\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getConfigurationFileForRun\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"runId\" type=\"apollo:RunIdentification\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name=\"getConfigurationFileForRunResponse\">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name=\"configurationFile\" type=\"xsd:string\"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
		</xsd:schema>
	</wsdl:types>
	<wsdl:message name=\"runRequest\">
		<wsdl:part element=\"tns:run\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"runResponse\">
		<wsdl:part element=\"tns:runResponse\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getRunStatusRequest\">
		<wsdl:part element=\"tns:getRunStatus\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getRunStatusResponse\">
		<wsdl:part element=\"tns:getRunStatusResponse\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getSupportedLocationsRequest\">
		<wsdl:part element=\"tns:getSupportedLocations\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getSupportedLocationsResponse\">
		<wsdl:part element=\"tns:getSupportedLocationsResponse\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"batchRunRequest\">
		<wsdl:part element=\"tns:batchRun\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"batchRunResponse\">
		<wsdl:part element=\"tns:batchRunResponse\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getConfigurationFileForRunRequest\">
		<wsdl:part element=\"tns:getConfigurationFileForRun\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:message name=\"getConfigurationFileForRunResponse\">
		<wsdl:part element=\"tns:getConfigurationFileForRunResponse\" name=\"parameters\"/>
	</wsdl:message>
	<wsdl:portType name=\"SimulatorServiceEI\">
		<wsdl:operation name=\"run\">
			<wsdl:input message=\"tns:runRequest\"/>
			<wsdl:output message=\"tns:runResponse\"/>
		</wsdl:operation>
		<wsdl:operation name=\"getRunStatus\">
			<wsdl:input message=\"tns:getRunStatusRequest\"/>
			<wsdl:output message=\"tns:getRunStatusResponse\"/>
		</wsdl:operation>
		<wsdl:operation name=\"getSupportedLocations\">
			<wsdl:input message=\"tns:getSupportedLocationsRequest\"/>
			<wsdl:output message=\"tns:getSupportedLocationsResponse\"/>
		</wsdl:operation>
		<wsdl:operation name=\"batchRun\">
			<wsdl:input message=\"tns:batchRunRequest\"/>
			<wsdl:output message=\"tns:batchRunResponse\"/>
		</wsdl:operation>
		<wsdl:operation name=\"getConfigurationFileForRun\">
			<wsdl:input message=\"tns:getConfigurationFileForRunRequest\"/>
			<wsdl:output message=\"tns:getConfigurationFileForRunResponse\"/>
		</wsdl:operation>
	</wsdl:portType>
	<wsdl:binding name=\"SimulatorServiceBinding\" type=\"tns:SimulatorServiceEI\">
		<soap:binding style=\"document\" transport=\"http://schemas.xmlsoap.org/soap/http\"/>
		<wsdl:operation name=\"run\">
			<soap:operation soapAction=\"http://service.apollo.pitt.edu/simulatorservice/run\"/>
			<wsdl:input>
				<soap:body use=\"literal\"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=\"literal\"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=\"getRunStatus\">
			<soap:operation soapAction=\"http://service.apollo.pitt.edu/simulatorservice/getRunStatus\"/>
			<wsdl:input>
				<soap:body use=\"literal\"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=\"literal\"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=\"getSupportedLocations\">
			<soap:operation soapAction=\"http://service.apollo.pitt.edu/simulatorservice/getSupportedLocations\"/>
			<wsdl:input>
				<soap:body use=\"literal\"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=\"literal\"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=\"batchRun\">
			<soap:operation soapAction=\"http://service.apollo.pitt.edu/simulatorservice/batchRun\"/>
			<wsdl:input>
				<soap:body use=\"literal\"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=\"literal\"/>
			</wsdl:output>
		</wsdl:operation>
		<wsdl:operation name=\"getConfigurationFileForRun\">
			<soap:operation soapAction=\"http://service.apollo.pitt.edu/simulatorservice/getConfigurationFileForRun\"/>
			<wsdl:input>
				<soap:body use=\"literal\"/>
			</wsdl:input>
			<wsdl:output>
				<soap:body use=\"literal\"/>
			</wsdl:output>
		</wsdl:operation>
	</wsdl:binding>
	<wsdl:service name=\"SimulatorService\">
		<wsdl:port binding=\"tns:SimulatorServiceBinding\" name=\"SimulatorServiceEndpoint\">
			<soap:address location=\"http://localhost:8080/simulatorservice/services/simulatorservice\"/>
		</wsdl:port>
	</wsdl:service>
</wsdl:definitions>"""

    def __init__(self, post='/simulatorservice/services/simulatorservice', **kw):
        ServiceSOAPBinding.__init__(self, post)
        if kw.has_key('impl'):
            self.impl = kw['impl']
        self.auth_method_name = None
        if kw.has_key('auth_method_name'):
            self.auth_method_name = kw['auth_method_name']
    def authorize(self, auth_info, post, action):
        if self.auth_method_name and hasattr(self.impl, self.auth_method_name):
            return getattr(self.impl, self.auth_method_name)(auth_info, post, action)
        else:
            return 1

    def soap_run(self, ps):
        self.request = ps.Parse(runRequest.typecode)
        parameters = self.request._simulatorConfiguration

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.run(parameters)

        result = runResponse()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._runId = parameters
        return result

    soapAction['http://service.apollo.pitt.edu/simulatorservice/run'] = 'soap_run'
    root[(runRequest.typecode.nspname,runRequest.typecode.pname)] = 'soap_run'

    def soap_getRunStatus(self, ps):
        self.request = ps.Parse(getRunStatusRequest.typecode)
        parameters = self.request._runId

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getRunStatus(parameters)

        result = getRunStatusResponse()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._runStatus = parameters
        return result

    soapAction['http://service.apollo.pitt.edu/simulatorservice/getRunStatus'] = 'soap_getRunStatus'
    root[(getRunStatusRequest.typecode.nspname,getRunStatusRequest.typecode.pname)] = 'soap_getRunStatus'

    def soap_getSupportedLocations(self, ps):
        self.request = ps.Parse(getSupportedLocationsRequest.typecode)

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getSupportedLocations()

        result = getSupportedLocationsResponse()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._supportedPopluationLocations = parameters
        return result

    soapAction['http://service.apollo.pitt.edu/simulatorservice/getSupportedLocations'] = 'soap_getSupportedLocations'
    root[(getSupportedLocationsRequest.typecode.nspname,getSupportedLocationsRequest.typecode.pname)] = 'soap_getSupportedLocations'

    def soap_batchRun(self, ps):
        self.request = ps.Parse(batchRunRequest.typecode)
        parameters = self.request._batchRunSimulatorConfiguration

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.batchRun(parameters)

        result = batchRunResponse()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._batchRun = parameters
        return result

    soapAction['http://service.apollo.pitt.edu/simulatorservice/batchRun'] = 'soap_batchRun'
    root[(batchRunRequest.typecode.nspname,batchRunRequest.typecode.pname)] = 'soap_batchRun'

    def soap_getConfigurationFileForRun(self, ps):
        self.request = ps.Parse(getConfigurationFileForRunRequest.typecode)
        parameters = self.request._runId

        # If we have an implementation object use it
        if hasattr(self,'impl'):
            parameters = self.impl.getConfigurationFileForRun(parameters)

        result = getConfigurationFileForRunResponse()
        # If we have an implementation object, copy the result 
        if hasattr(self,'impl'):
            result._configurationFile = parameters
        return result

    soapAction['http://service.apollo.pitt.edu/simulatorservice/getConfigurationFileForRun'] = 'soap_getConfigurationFileForRun'
    root[(getConfigurationFileForRunRequest.typecode.nspname,getConfigurationFileForRunRequest.typecode.pname)] = 'soap_getConfigurationFileForRun'

