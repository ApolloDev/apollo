#labels Phase-Design
#Specification for Apollo Web Services

=1. Design Goals=
==1.1 General==
  #  Future: Provide a unified API that can be used by both the Apollo Web Service and Apollo-Enabled Epidemic-Model Web Services
==1.2 Apollo Web Service==
  #  Provide facilities which allow desktop applications to inter-operate with multiple epidemic models by connecting to a single endpoint
  #  Communicate (only) with implementations of the Apollo-Enabled Epidemic-Model Web Service, to:
    * submit run requests to epidemic models
    * check status of previous run requests
    * request results of previous runs
    * request the default configuration of an epidemic model 
  # Maintain a registry of available Apollo-Enabled Epidemic-Model Web Services
==1.3 Apollo-Enabled Epidemic-Model Web Service==
  #  Provide facilities which allow desktop applications and implementations of the Apollo Web Service to inter-operate with a single epidemic model in a standardized manner
  #  Enable clients of the web service to:
    * request runs of the epidemic model
    * check status of previous run requests
    * request results of previous runs
    * request the default configuration of the epidemic model 
=2. System Requirements=
A system (or systems) capable of hosting and/or making calls to a SOAP web service.
=3. Architecture=
==3.1 Communication Protocol==
Structured information is exchanged via web-services using the Simple Object Access Protocol (SOAP).  SOAP uses XML for its message format and HTTP for message negotiation and transmission.  SOAP was chosen over REST because:
==3.2 Apollo Web Service==
===3.2.1 Current===
The Apollo Web Service acts as an epidemic model repository on a central server which processes requests from end-user applications.  

===Implementation of an Apollo Web Service requires implementing the following methods:===

||return value ||method name||parameters||
||Run{ModelType}RequestResult||run{ModelType}Request||{ModelType}RunRequestObjType||
||{ModelType}RunResponseObjType||get{ModelType}RunResults||RunRequestResultObjType||
||{ModelType}RunRequestObjType||getDefault{ModelType}RunRequestObj||ModelID||
||List of ModelID||getRegisteredModels||none||
||RunStatusEnum||getStatus||int runId||
||String||getModelDescription||ModelID||
||SupportedTypeColletionType||getUnregisteredParametersDescription||ModelID||


{ModelType} = replace {ModelType} with corresponding concrete class name 

===3.2.2 Future===
We are currently considering shifting some of the complexity of the API from the run{ModelType}Request, get{ModelType}RunResults, and getDefault{ModelType}RunRequestObj method names (which require a separate method for each registered model type) to the parameter values.  That is, the ModelType would be defined in method parameters, which would allow for a single "runRequest," "getRunResults," and "getDefaultRunRequestObj" method.  The {ModelType}RunRequestObjType and {ModelType}RunResponseObjType would be serialized as a JSON object which could then be passed to into the singular methods.
==3.3 Apollo-Enabled Epidemic-Model Web Service==
===Implementation of an Apollo-Enabled Epidemic-Model Web Service requires implementing the following methods:===
||return value||method name||parameters||
||int runId||run||{ModelType}RunRequestObjType||
||{ModelType}RunResponseObjType||getResults||int runId||
||RunStatusEnum||getStatus||int runId||
||SupportedTypeCollectionType||getUnregisteredParametersDescription||none||
||{ModelType}RunRequestObjType||getDefaultRunParametersObj||none||
||String description||getModelDescription||none||

{ModelType} = replace {ModelType} with corresponding concrete class name 
===Example implementation of an Apollo-Enabled Epidemic-Model Web Service exposing an Agent Based Model===
||*return value*||*method name*||*parameters*||
||int runId||run||AgentBasedModelRunRequestObjType||
||AgentBasedModelRunResponseObjType||getResults||int runId||
||RunStatusEnum||getStatus||int runId||
||SupportedTypeCollectionType||getUnregisteredParametersDescription||none||
||AgentBasedModelRunRequestObjType||getDefaultRunParametersObj||none||
||String description||getModelDescription||none||


Note 2: Non-native classes are defined by this specification.  See Chapter 4 for a description of the non-native classes. 

=4. Classes=
==4.1 Apollo Common Classes==
The Apollo Common Classes are defined via and XML schema located in the subversion repository here: [http://code.google.com/p/apollo/source/browse/trunk/apollo-ws/reference-implementatons/apollo-common/src/main/resources/Apollo.xsd Apollo.xsd]