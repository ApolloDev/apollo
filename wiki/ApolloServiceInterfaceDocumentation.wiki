#summary This page contains the documentation for the ApolloServiceInterface.

= Introduction =

Add your content here.


= Details =

== Methods ==

=== runSimulation ===
==== Description ==== 
This method runs a simulation on a specified SimulatorService. 

==== Input ====

  # simulatorConfiguration (of type SimulatorConfiguration) - An object that contains the configuration parameters of a simulator.

==== Output ==== 

  # runId (of type Token)- A string identifier that uniquely identifies a run on all Apollo services.  A runId is created by concatenating the _simulatorDeveloper_, _simulatorName_, and _simulatorVersion_ fields from the SimulatorIdentification section of the simulatorConfiguration object, and then appending a unique integer to the string.  All fields should be separated by an underscore.  For example, the runId for the 59th run of the FRED simulator built by the University of Pittsburgh may look like this: *University of Pittsburgh_FRED_v1.0_59*.


=== runVisualization ===
==== Description ====
 This method runs a visualization on a specified VisualizerService for a given runId.
==== Input ====

  # visualizationConfiguration (of type VisualizationConfiguration) - An object that contains the configuration parameters of a visualizer.

==== Output ====
  #  runId (of type Token) -  A string identifier that uniquely identifies a run on all Apollo services.  A runId is created by concatenating the _visualizerDeveloper_, _visualizerName_, and _visualizerVersion_ fields from the VisualizerIdentification section of the VisualizerConfiguration object, and then appending a unique integer to the string.  All fields should be separated by an underscore.  For example, the runId for the 37th run of the GAIA simulator built by the University of Pittsburgh may look like this: *PSC_GAIA_v2.0_27*.
  #  visualizationResultURL (of type anyURI) - a URL, which specifies the location at which the visualization will be available for download once it has been created

=== getRunStatus ===
==== Description ====
This method is used to query the status of a run of an ApolloService.
==== Input ====
  # runId (of type Token)

==== Output ====
  #  runStatus (of type RunStatus) - An object containing a free text status description, and an enumerated type containing on the following members:
        * queued
        * running
        * completed
        * failed
        * unauthorized
        * authentication_failure
*example runStatus*: 
       * status: running
       * message: "Running since 1/1/2013 15:23:22"

=== registerService ===
==== Description ====
 Called by the developer of a SimulatorService or a VisualizerService to enable discovery of their service on the ApolloService.
==== Input ====
  # serviceRegistrationRecord (of type ServiceRegistrationRecord) - this object contains the username and password that will be required to unregister the service, an object that uniquely identifies either a SimulatorService or a VisualizerService on the ApolloService, and the URL of the web service at which the SimulatorService or VisualizerService is hosted

==== Output ====
  # registrationSuccessful (of type Boolean) - "true" if registration was successful, "false" if registration was unsuccessful
  # message (of type String) - If registration encountered an error, the error will be described here.

=== unregisterService ===
==== Description ====
 Called by the developer of a SimulatorService or a VisualizerService to disable discovery and usage of their service on the ApolloService.
==== Input ====
  # serviceRegistrationRecord (of type ServiceRegistrationRecord)

==== Output ====
  # unregistrationSucessful (of type Boolean) - "true" if unregistering the service was successfully completed, "false" if the service could not be unregistered
  # message (of type String) - If unregistration encountered an error, the error will be described here.

=== getRegisteredServices ===
==== Description ====
 Called by the developer of an End User Application to get a listing of all SimulatorServices and VisualizerServices

==== Input ====
  # none

==== Output ====
  # a list of [ServiceRecord ServiceRecords], a ServiceRecord contains a list of [SimulatorService SimulatorServices] and [VisualizerServices VisualizerServices].